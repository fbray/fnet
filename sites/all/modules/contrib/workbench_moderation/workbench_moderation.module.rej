***************
*** 1642,1696 ****
   *   The new moderation state requested.
   */
  function workbench_moderation_moderate($node, $state) {
-   global $user;
- 
    $old_revision = $node->workbench_moderation['my_revision'];
  
-   // Get the number of revisions for this node with vids greater than $node->vid
-   $vid_count = db_select('node_revision', 'r')
-     ->condition('r.nid', $node->nid)
-     ->condition('r.vid', $node->vid, '>')
-     ->countQuery()->execute()->fetchField();
-   // If the number of greater vids is 0, then this is the most current revision
-   $current = ($vid_count == 0);
- 
-   // Build a history record.
-   $new_revision = (object) array(
-     'from_state' => $old_revision->state,
-     'state' => $state,
-     'nid' => $node->nid,
-     'vid' => $node->vid,
-     'uid' => $user->uid,
-     'is_current' => $current,
-     'published' => ($state == workbench_moderation_state_published()),
-     'stamp' => $_SERVER['REQUEST_TIME'],
-   );
- 
-   // If this is the new 'current' moderation record, it should be the only one
-   // flagged 'current' in {workbench_moderation_node_history}.
-   if ($new_revision->is_current) {
-     $query = db_update('workbench_moderation_node_history')
-       ->condition('nid', $node->nid)
-       ->fields(array('is_current' => 0))
-       ->execute();
-   }
- 
-   // If this revision is to be published, the new moderation record should be
-   // the only one flagged 'published' in both
-   // {workbench_moderation_node_history} AND {node_revision}
-   if ($new_revision->published) {
-     $query = db_update('workbench_moderation_node_history')
-       ->condition('nid', $node->nid)
-       ->fields(array('published' => 0))
-       ->execute();
-     $query = db_update('node_revision')
-       ->condition('nid', $node->nid)
-       ->fields(array('status' => 0))
-       ->execute();
-   }
- 
-   // Save the node history record.
-   drupal_write_record('workbench_moderation_node_history', $new_revision);
  
    // Update the node's content_moderation information so that we can publish it
    // if necessary.
--- 1642,1650 ----
   *   The new moderation state requested.
   */
  function workbench_moderation_moderate($node, $state) {
    $old_revision = $node->workbench_moderation['my_revision'];
  
+   $new_revision = workbench_moderation_save_history($node, $state, $old_revision->state);
  
    // Update the node's content_moderation information so that we can publish it
    // if necessary.
***************
*** 1736,1741 ****
  }
  
  /**
   * Shutdown callback for saving a node revision.
   *
   * This function is called by drupal_register_shutdown_function().
--- 1690,1762 ----
  }
  
  /**
+  * Save a history record for a moderated node.
+  *
+  * @param object $node
+  *  The node being acted upon.
+  * @param string $new_state
+  *  The new moderation state.
+  * @param string $old_state
+  *  The former moderation state.
+  *
+  * @return object
+  *   The new history record as saved.
+  */
+ function workbench_moderation_save_history($node, $new_state, $old_state) {
+   global $user;
+ 
+   // Get the number of revisions for this node with vids greater than $node->vid
+   $vid_count = db_select('node_revision', 'r')
+     ->condition('r.nid', $node->nid)
+     ->condition('r.vid', $node->vid, '>')
+     ->countQuery()->execute()->fetchField();
+   // If the number of greater vids is 0, then this is the most current revision.
+   $current = ($vid_count == 0);
+ 
+   // Build a history record.
+   $new_revision = (object) array(
+     'from_state' => $old_state,
+     'state' => $new_state,
+     'nid' => $node->nid,
+     'vid' => $node->vid,
+     'uid' => $user->uid,
+     'is_current' => $current,
+     'published' => ($new_state == workbench_moderation_state_published()),
+     'stamp' => $_SERVER['REQUEST_TIME'],
+   );
+ 
+   // If this is the new 'current' moderation record, it should be the only one
+   // flagged 'current' in {workbench_moderation_node_history}.
+   if ($new_revision->is_current) {
+     db_update('workbench_moderation_node_history')
+       ->condition('nid', $node->nid)
+       ->fields(array('is_current' => 0))
+       ->execute();
+   }
+ 
+   // If this revision is to be published, the new moderation record should be
+   // the only one flagged 'published' in both
+   // {workbench_moderation_node_history} AND {node_revision}.
+   if ($new_revision->published) {
+     db_update('workbench_moderation_node_history')
+       ->condition('nid', $node->nid)
+       ->condition('vid', $node->vid, '!=')
+       ->fields(array('published' => 0))
+       ->execute();
+     db_update('node_revision')
+       ->condition('nid', $node->nid)
+       ->condition('vid', $node->vid, '!=')
+       ->fields(array('status' => 0))
+       ->execute();
+   }
+ 
+   // Save the node history record.
+   drupal_write_record('workbench_moderation_node_history', $new_revision);
+ 
+   return $new_revision;
+ }
+ 
+ /**
   * Shutdown callback for saving a node revision.
   *
   * This function is called by drupal_register_shutdown_function().
