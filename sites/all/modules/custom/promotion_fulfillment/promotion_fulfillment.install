<?php
// $Id: promotion_fulfillment.install 4005 2012-09-24 18:23:35Z hslaught $

/**
 * @file
 * Install, update and uninstall functions for the promotion_fulfillment module.
 *
 */

/**
 * Implements hook_install().
 */
function promotion_fulfillment_install() {
  // Create tables.
  // TODO The drupal_(un)install_schema functions are called automatically in D7.
  // drupal_install_schema('promotion_fulfillment')
}

/**
 * Implements hook_uninstall().
 */
function promotion_fulfillment_uninstall() {
  // Remove tables.
  // TODO The drupal_(un)install_schema functions are called automatically in D7.
  // drupal_uninstall_schema('promotion_fulfillment')
}

/**
 * Implements hook_schema().
 */
function promotion_fulfillment_schema() {
  $schema['promotion_fulfillment_submissions'] = array(
    'description' => 'Stores details of data submitted by users for promotion fulfillment forms.',
    'fields' => array(
      'request_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Primary Key: unique request ID.',
      ),
      'promotion_id' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'description' => 'Primary Key: NID of the promotion node being submitted.',
      ),
      'timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Timestamp.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'User name.',
      ),
      'email' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'User email address.',
      ),
      'company' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'User company.',
      ),
      'job_title' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'User\'s job title.',
      ),
      'address' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'User address.',
      ),
      'city' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'User city.',
      ),
      'state' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => FALSE,
        'description' => 'User state.',
      ),
      'zip' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
        'description' => 'User zip.',
      ),
      'country' => array(
        'type' => 'varchar',
        'length' => 4,
        'not null' => FALSE,
        'description' => 'Two letter country code.',
      ),
      'gold_contracts' => array(
        'type' => 'int',
        'length' => 8,
        'not null' => FALSE,
        'description' => 'Number of gold contracts purchased.',
      ),
      'promo_code' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
        'description' => 'Promotional code used.',
      ),
      'credit_value' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'Amount of credit given to user based on purchases.',
      ),
      'credit_spent' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'Amount of credit spent by user for product redemption.',
      ),
      'invoice_amount' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'Dollar amount of customer invoice.',
      ),
      'invoice_number' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'Customer invoice number.',
      ),
      'invoice_submitted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'description' => 'Whether an invoice was submitted with the request.',
      ),
      'purchased_items' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'description' => 'List of products purchased by user as manually entered.',
      ),
      'requested_items' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'description' => 'List of items selected by user.',
      ),
    ),
    'primary key' => array('request_id'),
  );

  return $schema;
}

// Table not initially added to module
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function promotion_fulfillment_update_6000() {
  drupal_install_schema('promotion_fulfillment');
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function promotion_fulfillment_update_6001() {
  $ret = array();
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $ret[] = array() /* update_sql("ALTER TABLE {promotion_fulfillment_submissions} ADD job_title varchar(64) AFTER company") */;
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $ret[] = array() /* update_sql("ALTER TABLE {promotion_fulfillment_submissions} ADD city varchar(64) AFTER address") */;
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $ret[] = array() /* update_sql("ALTER TABLE {promotion_fulfillment_submissions} ADD state varchar(16) AFTER city") */;
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $ret[] = array() /* update_sql("ALTER TABLE {promotion_fulfillment_submissions} ADD zip varchar(12) AFTER state") */;

  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function promotion_fulfillment_update_6002() {
  $ret = array();
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $ret[] = array() /* update_sql("ALTER TABLE {promotion_fulfillment_submissions} ADD gold_contracts int AFTER zip") */;
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $ret[] = array() /* update_sql("ALTER TABLE {promotion_fulfillment_submissions} ADD promo_code varchar(12) AFTER gold_contracts") */;

  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function promotion_fulfillment_update_6003() {
  $ret = array();
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $ret[] = array() /* update_sql("
    ALTER TABLE {promotion_fulfillment_submissions}
    ADD purchased_items text NULL
    COMMENT 'List of products purchased by user as manually entered.'
    AFTER invoice_submitted
  ") */;

  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function promotion_fulfillment_update_6004() {
  $ret = array();
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $ret[] = array() /* update_sql("
    ALTER TABLE {promotion_fulfillment_submissions}
    ADD country varchar(4)
    COMMENT 'Two letter country code.'
    AFTER zip
  ") */;

  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}
