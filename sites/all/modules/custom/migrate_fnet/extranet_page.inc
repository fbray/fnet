<?php
/**
 * Created by PhpStorm.
 * User: rositis
 * Date: 5/22/17
 * Time: 11:05 AM
 */
/*
 *  Extranet Page Migration Class
*/
class FNETExtranetPageMigration extends DrupalNode7Migration {
  public function __construct(array $arguments) {
    parent::__construct($arguments);

    // Put mapping logic here for fields.
    // Redirects
    $this->addFieldMapping('migrate_redirects', 'path');

    $this->addFieldMapping('body:language', 'body:language');

  }

  /**
   * Code to add imported Extranet Pages to their respective groups.
   *
   * @param $node
   * @param \stdClass $row
   */
  public function complete($node, stdClass $row) {
    // $node is the new, $row is the old.

    // Get the old gids using the old entity id.
    $old_groups = [];
    $query = Database::getConnection('default', $this->sourceConnection)
      ->select('groups', 'g')
      ->fields('g', array('Title' => 'title', 'gid' => 'gid'));
    $query->join('group_entity', 'ge', 'ge.gid = g.gid');
    $query->condition('ge.entity_id', $row->nid, '=');
    $results = $query->execute();
    foreach ($results as $result) {
      $old_groups[$result->gid] = $result->title;
    }

    // Match the names of the groups to get the new gid.
    $gid_query = Database::getConnection('default', 'default')
      ->select('groups', 'g')
      ->fields('g', array('gid' => 'gid'))
      ->condition('title', $old_groups, 'IN');
    $gid_results = $gid_query->execute();

    // Insert the new gid, new entity id, entity type 'node', bundle 'extranet_page' into the group_entity table.
    foreach($gid_results as $gid_result) {
      try {
        db_insert('group_entity')
        ->fields(array(
          'gid' => $gid_result->gid,
          'entity_id' => $node->nid,
          'entity_type' => 'node',
          'bundle' => 'extranet_page'
        ))->execute();
      }
      catch (Exception $e) {
        watchdog('migrate_fnet', $e->getMessage());
      }
    }

    return parent::complete($node, $row); // TODO: Change the autogenerated stub
  }

  /**
   * Code to execute after an entity has been rolled back.
   *
   * @param $entity_ids
   */
  public function completeRollback($entity_ids) {
    db_delete('group_entity')
      ->condition('entity_id', $entity_ids, 'IN')
      ->execute();
  }

}