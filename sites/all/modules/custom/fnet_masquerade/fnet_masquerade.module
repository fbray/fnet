<?php

/**
 * Implements hook_menu_alter().
 *
 *  Change certain callbacks to use the FNET versions.
 *  This is done to use the email field rather than usernames.
 */
function fnet_masquerade_menu_alter(&$items) {
  $items['masquerade/unswitch']['page callback'] = 'fnet_masquerade_switch_back_page';
  $items['masquerade/autocomplete']['page callback'] = 'fnet_masquerade_autocomplete';
  $items['masquerade/autocomplete-users']['page callback'] = 'fnet_masquerade_autocomplete_multiple';
  $items['masquerade/autocomplete-user']['page callback'] = 'fnet_masquerade_autocomplete_multiple';
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function fnet_masquerade_block_view_masquerade_masquerade_alter(&$data, $block) {
  $data['content'] = drupal_get_form('fnet_masquerade_block_1');
}

/**
 * Wrapper around user_load() to allow the loading of anonymous users.
 *
 * @param $email
 *   The email address of the user you wish to load (i.e. $user->mail). To load the
 *   anonymous user, pass the value of the 'anonymous' variable.
 *
 * @return
 *   A fully-loaded $user object upon successful user load or FALSE if user
 *   cannot be loaded.
 */
function _fnet_masquerade_user_load($email) {
  $account = FALSE;
  if (!empty($email)) {
    $anon = variable_get('anonymous', t('Anonymous'));
    $account = user_load_by_mail(($email == $anon ? '' : $email));
    if (isset($account->uid) && empty($account->uid)) {
      // Anonymous user should have a name.
      $account->name = $anon;
      $account->mail = $anon;
    }
  }

  return $account;
}

/**
 * Masquerade block form.
 */
function fnet_masquerade_block_1() {
  global $user;
  $quick_switch_links = array();
  $markup_value = '';
  if (isset($_SESSION['masquerading'])) {
    $quick_switch_links[] = l(t('Switch back'), 'masquerade/unswitch', array('query' => array('token' => drupal_get_token('masquerade/unswitch'))));
    if ($user->uid > 0) {
      $markup_value = t('You are masquerading as <a href="@user-url">%masq_as</a>.', array('@user-url' => url('user/' . $user->uid), '%masq_as' => $user->mail));
    }
    else {
      $markup_value = t('You are masquerading as %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous'))));
    }
  }
  else {
    $quick_switches = variable_get('masquerade_quick_switches', array());

    // Add in user-specific switches, and prevent duplicates.
    $user_switches = db_query("SELECT uid_to FROM {masquerade_users} WHERE uid_from = :uid_from", array(':uid_from' => $user->uid))->fetchCol();
    $masquerade_switches = array_unique(array_merge($quick_switches, $user_switches));

    foreach ($masquerade_switches as $switch_user) {
      if (!isset($_SESSION['user']->uid) || $switch_user != $_SESSION['user']->uid) {
        $account = user_load($switch_user);
        if (isset($account->uid)) {
          $switch_link = 'masquerade/switch/' . $account->uid;
          if ($account->uid) {
            $quick_switch_links[] = l($account->mail, $switch_link, array('query' => array('token' => drupal_get_token($switch_link))));
          }
          if ($switch_user == 0) {
            $account->mail = variable_get('anonymous', t('Anonymous'));
            $quick_switch_links[] = l($account->mail, $switch_link, array('query' => array('token' => drupal_get_token($switch_link))));
          }
        }
      }
    }

    if (masquerade_menu_access('autocomplete')) {
      $markup_value .= t('Enter the user email to masquerade as.');
      $form['masquerade_user_field'] = array(
        '#prefix' => '<div class="container-inline">',
        '#type' => 'textfield',
        '#size' => '18',
        '#default_value' => '',
        '#autocomplete_path' => 'masquerade/autocomplete',
        '#required' => TRUE,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Go'),
        '#suffix' => '</div>',
      );
    }

  }
  if ($quick_switch_links) {
    $markup_value .= '<div id="quick_switch_links">' . t('Quick switches:') . theme('item_list', array('items' => $quick_switch_links)) . '</div>';
  }
  $form['fnet_masquerade_desc'] = array(
    '#prefix' => '<div class="form-item"><div class="description">',
    '#markup' => $markup_value,
    '#suffix' => '</div></div>',
  );
  return $form;
}

/**
 * Masquerade block form validation.
 */
function fnet_masquerade_block_1_validate($form, &$form_state) {
  global $user;
  //unset($form);
  $mail = $form_state['values']['fnet_masquerade_user_field'];

  $allowed = FALSE;
  $to_uid = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('u.mail', $mail, '=')
    ->execute()
    ->fetchField();

  if ($to_uid !== FALSE) {
    $allowed = user_access('masquerade as any user') ||
               db_select('masquerade_users', 'm')
                  ->fields('m', array('uid_to'))
                  ->condition('m.uid_to', $to_uid, '=')
                  ->condition('m.uid_from', $user->uid, '=')
                  ->execute()
                  ->fetchField();
  }
  if (isset($_SESSION['masquerading'])) {
    form_set_error('fnet_masquerade_user_field', t('You are already masquerading. Please <a href="@unswitch">switch back</a> to your account to masquerade as another user.', array('@unswitch' => url('masquerade/unswitch', array('query' => array('token' => drupal_get_token('masquerade/unswitch')))))));
  }
  if ($allowed === FALSE) {
    form_set_error('masquerade_user_field', t('You are not allowed to masquerade as the selected user.'));
  }

  if ($mail != variable_get('anonymous', t('Anonymous')) && module_exists('alt_login')) {
    $alt_login = db_query("SELECT u.name FROM {users} u INNER JOIN {alt_login} al ON u.uid = al.uid WHERE al.alt_login = :alt_login", array(
      ':alt_login' => $mail
    ))->fetchObject();
    if (isset($alt_login->name)) {
      $name = $alt_login->name;
    }
  }
  $masq_user = _fnet_masquerade_user_load($mail);
  if (!$masq_user) {
    form_set_error('fnet_masquerade_user_field', t('User %masq_as does not exist. Please enter a valid email.', array('%masq_as' => $form_state['values']['fnet_masquerade_user_field'])));
  }
  elseif ($masq_user->uid == $user->uid) {
    form_set_error('masquerade_user_field', t('You cannot masquerade as yourself. Please choose a different user to masquerade as.'));
  }
  elseif (variable_get('maintenance_mode', 0) && !user_access('access site in maintenance mode', $masq_user)) {
    form_set_error('masquerade_user_field', t('It is not possible to masquerade in off-line mode as !user does not have the %config-perm permission. Please <a href="@site-maintenance">set the site status</a> to "online" to masquerade as !user.', array('!user' => theme('username', array('account' => $masq_user)), '%config-perm' => 'use the site in maintenance mode', '@site-maintenance' => url('admin/settings/site-maintenance'))));
  }
  else {
    $form_state['values']['masquerade_user_field'] = $name;
  }
}

/**
 * Masquerade block form submission.
 */
function fnet_masquerade_block_1_submit($form, &$form_state) {
  //unset($form);

//  $masq_user = _fnet_masquerade_user_load($form_state['values']['fnet_masquerade_user_field']);

// FNET Note:  The autocomplete doesn't seem to leave a value in the form field object. This code gets the value from a different location.

    $switch_email = $form_state['complete form']['masquerade_user_field']['#value'];
    $masq_user = _fnet_masquerade_user_load($switch_email);

  if (!masquerade_switch_user($masq_user->uid)) {
    drupal_access_denied();
  }
  else {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
}

/**
 * Returns JS array for Masquerade autocomplete fields.
 */
function fnet_masquerade_autocomplete($string) {
  $matches = array();
  // Anonymous user goes first to be visible for user.
  $anonymous = variable_get('anonymous', t('Anonymous'));
  if (stripos($anonymous, $string) === 0) {
    $matches[$anonymous] = $anonymous;
  }
  // Other suggestions.
  //scott name -> mail
  $result = db_query_range("SELECT mail FROM {users} WHERE LOWER(mail) LIKE LOWER(:string)", 0, 10, array(
    ':string' => $string . '%',
  ));
  foreach ($result as $user) {
    //scott name -> mail
    $matches[$user->mail] = check_plain($user->mail);
  }
  if (module_exists('devel')) {
    $GLOBALS['devel_shutdown'] = FALSE;
  }
  drupal_json_output($matches);
}

/**
 * Returns JS array for Masquerade autocomplete fields.
 *
 * Supports multiple entries separated by a comma.
 *
 * @param $string
 *   The string of autocmplete value submitted by the user.
 * @param $add_anonymous
 *   Flag to include Anonymous user into result.
 */
function fnet_masquerade_autocomplete_multiple($string, $add_anonymous = TRUE) {
  $matches = array();
  // The user enters a comma-separated list of users. We only autocomplete the last user.
  $users_typed = drupal_explode_tags($string);
  // Fetch last string.
  $last_string = drupal_strtolower(array_pop($users_typed));
  if ($last_string) {
    $prefix = count($users_typed) ? implode(', ', $users_typed) . ', ' : '';
    if ($add_anonymous) {
      // Anonymous user goes first to be visible for user.
      $anonymous = variable_get('anonymous', t('Anonymous'));
      if (stripos($anonymous, $last_string) === 0) {
        $matches[$prefix . $anonymous] = $anonymous;
      }
    }
    // Other suggestions.
    $result = db_query_range("SELECT mail FROM {users} WHERE LOWER(mail) LIKE :string", 0, 10, array(
      ':string' => $last_string . '%',
    ));
    foreach ($result as $user) {
      $matches[$prefix . $user->mail] = check_plain($user->mail);
    }

    // Remove existing tags.
    $matches = array_diff($matches, $users_typed);

    // @todo Check compatibility for D7.
    if (module_exists('alt_login')) {
      $result = db_query_range("SELECT u.alt_login AS alt_login FROM {alt_login} u WHERE LOWER(u.alt_login) LIKE LOWER(:string)", 0, 10, array(
        ':string' => $last_string . '%',
      ));
      foreach ($result as $user) {
        $matches[$user->alt_login] = check_plain($user->alt_login);
      }
    }
  }
  if (module_exists('devel')) {
    $GLOBALS['devel_shutdown'] = FALSE;
  }
  drupal_json_output($matches);
}

/**
 * Allows a user with the right permissions to become the selected user.
 *
 * @param $uid
 *   The user ID to switch to.
 *
 * @return
 *   TRUE if the user was sucessfully switched, or FALSE if there was an error.
 */
function fnet_masquerade_switch_user($uid) {
  global $user;
  if (!is_numeric($uid)) {
    drupal_set_message(t('A user id was not correctly passed to the switching function.'));
    watchdog('masquerade', 'The user id provided to switch users was not numeric.', NULL, WATCHDOG_ERROR);
    return drupal_goto($_SERVER['HTTP_REFERER']);
  }

  $new_user = user_load($uid);

  $roles = array_keys(array_filter(variable_get('fnet_masquerade_admin_roles', array())));
  $perm = $uid == 1 || array_intersect(array_keys($new_user->roles), $roles) ?
    'masquerade as admin' :
    'masquerade as user';

  // Check to see if we need admin permission.
  $results = db_query_range('SELECT 1 FROM {masquerade_users} WHERE uid_from = :uid_from AND uid_to = :uid_to', 0, 1, array(
    ':uid_from' => $user->uid,
    ':uid_to' => $new_user->uid,
  ));
  if (!user_access($perm) && !isset($_SESSION['masquerading']) && !$results->fetchField()) {
    //scott
    watchdog('masquerade', 'This user requires administrative permissions to switch to the user %user.', array('%user' => $new_user->mail), WATCHDOG_ERROR);
    return FALSE;
  }

  if ($user->uid == $uid || isset($user->masquerading)) {
    watchdog('masquerade', 'This user is already %user.', array('%user' => $new_user->mail), WATCHDOG_ERROR);
    return FALSE;
  }

  if (variable_get('maintenance_mode', 0) && !user_access('access site in maintenance mode', $new_user)) {
    drupal_set_message(t('It is not possible to masquerade in off-line mode as %user does not have the %config-perm permission. Please <a href="@site-maintenance">set the site status</a> to "online" to masquerade as %user.', array('%user' => $new_user->mail, '%config-perm' => 'use the site in maintenance mode', '@site-maintenance' => url('admin/settings/site-maintenance'))));
    return FALSE;
  }

  // Call logout hooks when switching from original user.
  module_invoke_all('user_logout', $user);
  drupal_session_regenerate();

  $query = db_insert('masquerade');
  $query->fields(array(
    'uid_from' => $user->uid,
    'uid_as' => $new_user->uid,
    'sid' => session_id(),
  ));
  $query->execute();
  // switch user

  watchdog('masquerade', 'User %user now masquerading as %masq_as.', array('%user' => $user->mail, '%masq_as' => $new_user->mail ? $new_user->mail : variable_get('anonymous', t('Anonymous'))), WATCHDOG_INFO);
//  drupal_set_message(t('You are now masquerading as !masq_as.', array('!masq_as' => theme('username', array('account' => $new_user)))));
  drupal_set_message(t('You are now masquerading as !masq_as.', array('!masq_as' => l( $new_user->mail, url('user/' . $new_user->uid) ))  ));
  $user->masquerading = $new_user->uid;
  $user = $new_user;

  // Call all login hooks when switching to masquerading user.
  $edit = array(); // Passed by reference.
  user_module_invoke('login', $edit, $user);

  return TRUE;
}

/**
 * Allows a user who is currently masquerading to become a new user.
 */
function fnet_masquerade_switch_back_page() {
  if (isset($_GET['token']) && drupal_valid_token($_GET['token'], 'masquerade/unswitch')) {
    global $user;
    $olduser = $user;
    fnet_masquerade_switch_back();
    drupal_set_message(t('You are no longer masquerading as !masq_as and are now logged in as !user.', array('!user' => l( $user->mail, url('user/' . $user->uid) ), '!masq_as' => l( $olduser->mail, url('user/' . $olduser->uid) )   )));
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Function for a masquerading user to switch back to the previous user.
 */
function fnet_masquerade_switch_back() {
  // switch user
  global $user;
  cache_clear_all($user->uid, 'cache_menu', TRUE);
  $uid = db_query("SELECT m.uid_from FROM {masquerade} m WHERE m.sid = :sid AND m.uid_as = :uid_as ", array(
    ':sid' => session_id(),
    ':uid_as' => $user->uid,
  ))->fetchField();
  // erase record
  db_delete('masquerade')
    ->condition('sid', session_id())
    ->condition('uid_as', $user->uid)
    ->execute();

  $oldname = ($user->uid == 0 ? variable_get('anonymous', t('Anonymous')) : $user->mail);

  // Call logout hooks when switching from masquerading user.
  module_invoke_all('user_logout', $user);
  drupal_session_regenerate();

  $user = user_load($uid);

  // Call all login hooks when switching back to original user.
  $edit = array(); // Passed by reference.
  user_module_invoke('login', $edit, $user);

  watchdog('masquerade', 'User %user no longer masquerading as %masq_as.', array('%user' => $user->mail, '%masq_as' => $oldname), WATCHDOG_INFO);
}





function fnet_masquerade_form_fnet_profile_profile_edit_form_alter(&$form, &$form_state) {
  global $user;
  if (user_access('masquerade as user') &&
    ($user->uid != $form_state['#user']->uid) &&
    (!isset($_SESSION['masquerading']))
  ) {
    $switch_url = 'masquerade/switch/' . $form_state['#user']->uid;

    // If user blocked, switching will log out
    if ($form_state['#user']->status) {
      $switch_link = l('Masquerade as this user', $switch_url, array('query' => array('token' => drupal_get_token($switch_url))));
    } else {
      $switch_link = l( 'User blocked, cannot masquerade. Click here to change status.', 'user/' . $form_state['#user']->uid . '/edit', array() );
    }
    $form['masquerade_link']['#markup'] = $switch_link;
  }
  elseif (isset($_SESSION['masquerading'])) {
    $switch_link = l(t('Switch back'), 'masquerade/unswitch', array('query' => array('token' => drupal_get_token('masquerade/unswitch'))));
    $markup_value = t('You are masquerading as: %masq_as. ', array('%masq_as' => $user->mail)) . $switch_link;
    $form['masquerade_link']['#markup'] = $markup_value;
  }

}



