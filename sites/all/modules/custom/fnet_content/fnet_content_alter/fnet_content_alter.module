<?php

/**
 * @file
 * Various functions to alter content type displays in different view modes
 */


// check drupal_goto via command line


// fix
// http://jun23.flukenetworks.com/search/node/Best%20of%20Show%2C%20Network%20Time%20Machine%2C%20Interop%20Tokyo%20June%202012
// award results


/**
 * Implements hook_field_formatter_info().
 */
function fnet_content_alter_field_formatter_info() {

  return array(
    'text_clean' => array(
      'label' => 'Clean Text',
      'field types' => array('text', 'text_long', 'text_with_summary',),
      'settings' => array(),
        ),
    'text_raw' => array(
      'label' => 'Raw Text',
      'field types' => array('text', 'text_long', 'text_with_summary',),
      'settings' => array(),
        )
    );

}


/**
 *    Implements hook_menu()
 */
function fnet_content_alter_menu() {

  $items = array();
  $items['search/autocomplete'] = array(
    'page callback' => '_fnet_content_alter_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
    );

  return $items;

}


/**
 *    custom autocomplete
 */
function _fnet_content_alter_autocomplete($term) {

  $return = array();
  $term = check_plain($term);

  if (strlen($term) > 3) {

    $query = db_select('node', 'n');

    $types = array('product', 'pressrelease', 'award', 'event', 'blog_article', 'family', 'page', );

    $titles_return = $query
      ->fields('n', array('title'))
      ->condition('n.status', 1)
      ->condition('n.type', $types, 'IN')
      ->condition('n.title', '%' . db_like($term) . '%', 'LIKE')
      ->range(0, 8)
      ->execute()
      ->fetchAll();

    foreach ($titles_return as $title) {
      $return[$title->title] = _fnet_content_remove_sup($title->title);

    }

    watchdog('test', print_r($return, true) );

  }
  drupal_json_output ($return);

}

/**
 *    Implements hook_form_alter(&$form, &$form_state)
 */
function fnet_content_alter_form_alter(&$form, &$form_state, $form_id) {

  if ( ($form_id == 'form_search') || ($form_id == 'search_block_form') ) {
      $form['basic']['keys']['#autocomplete_path'] = 'search/autocomplete' ;
  }


}

/**
 *    Implements hook_form_FORMID_alter(&$form, &$form_state)
 */
function fnet_content_alter_form_search_form_alter(&$form, &$form_state) {

  $form['basic']['keys']['#autocomplete_path'] = 'search/autocomplete' ;

}


/**
 *    Implements hook_form_FORMID_alter(&$form, &$form_state)
 */
function fnet_content_alter_form_search_block_form_alter(&$form, &$form_state) {

  $form['basic']['keys']['#autocomplete_path'] = 'search/autocomplete' ;

}

/**
 * Implements hook_preprocess_node(&$variables)
 *
 * auto forwards not handled elsewhere
 *
 * @param $variables
 */
function fnet_content_alter_preprocess_node(&$variables) {
  // if ($variables['view_mode'] == 'full') {
    // // types to forward to other URL
    // $external = array(
      // 'award' => 'field_award_link',
      // );
    // if ( in_array($variables['type'], array_keys($external) ) ){
      // $url = fnet_common_get_field_value($variables['type'], $variables['node'], $external[$variables['type']], 'url' );
      // if ($url) {
        // drupal_goto($url);
      // }
    // }
  // }
}

/**
 * Implements hook_field_formatter_view().
 *
 * Remove CSS/tags from indexed content
 *
 * @param $entity_type
 * @param $entity
 * @param $field
 * @param $instance
 * @param $langcode
 * @param $items
 * @param $display
 * @return array
 */
function fnet_content_alter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  if ($entity_type=='node') {
    if ( ($field['module'] == 'text') && ($display['type'] == 'text_clean') ) {
      foreach ($items as $delta => $item) {
        //$no_markup = check_markup($item['value'], 'full_html');
        $value = $item['value'];
        $no_css = _fnet_content_remove_css( $value );
        $no_markup = strip_tags($no_css);
        $elements[$delta] = array( '#markup' =>  $no_markup  );
      }
    }

    // for ad tags
    if ( ($field['module'] == 'text') && ($display['type'] == 'text_raw') ) {
      foreach ($items as $delta => $item) {
        $elements[$delta] = array( '#markup' =>  $item['value']  );
      }
    }
  }
  return $elements;
}

/**
 *  Used to add Random to results, used for content list
 * 
 * Implements hook_query_TAG_alter(&$query)
 */
function fnet_content_alter_query_random_alter($query) {
  $query->orderRandom();
}


/**
 *  Used to add Draggable Views weighting to results
 * 
 * Implements hook_query_TAG_alter(&$query)
 */
function fnet_content_alter_query_draggableviews_alter($query) {

  $query->join('draggableviews_structure', 'ds', 'ds.entity_id = node.nid');
  $query->orderBy('ds.weight');

}

/**
 *  Excludes some types from searches
 * 
 * Implements hook_query_alter(&$query)
 */
function fnet_content_alter_query_alter(&$query) {
 // Deprecated by the Content Access module? Need to test 1/4/2016 rositis
  /*
  $is_search = FALSE;
  foreach ($query->getTables() as $table) {
    if ($table['table'] == 'search_index') {
      $is_search = TRUE;
    }
  }

  if ($is_search) {

    // nids to exclude from search results
    // for type-specific rules which can't easily to added to query
    $nids_to_exclude = array();

    // get product nids for those not Active
    $nids_to_exclude = _fnet_content_get_product_nids_to_remove();

    dpm($query);
    $not_searched_types = array('product_distributor_group', 'digital_asset', 'asset_gateway', 'distributor', 'eloqua_form', 'expertise', 'family', 'feature', 'homepage', 'homepage_language', 'image', 'industry_language', 'knowledge_base_article', 'productlanguage', 'productsubtype', 'profile', 'software_notifications', 'story', 'extranet_news', 'extranet_promotion', 'media_gallery');
// n.type throws an error in Views Search
    $query->condition('n.type', $not_searched_types, 'NOT IN');
    $query->condition('n.nid', $nids_to_exclude, 'NOT IN');


  } // end if search

  /*

  D6 types excluded from search

  distributor
  eloqua_form
  expertise
  family
  feature
  homepage
  homepage_language
  image
  industry_language
  knowledge_base_article
  productlanguage
  productsubtype
  profile
  software_notifications
  story

  */


} // end query alter function




/**
 *  This presents specified content to specific view modes
 *  Update Search results for ___language types to refer to parent
 *
 * Implements hook_entity_view($entity, $type, $view_mode, $langcode)
 */
function fnet_content_alter_entity_view($entity, $type, $view_mode, $langcode) {

  if (($type == 'node') && ($view_mode == 'full') && (substr($entity->type, -8) == 'language')) {
    // filter out incidental requests from other modules
    if (current_path() != 'node/' . $entity->nid) {
      return;
    }

    $parent_nid = _fnet_content_get_parent_from_child($entity->nid);
    $parent_url = drupal_get_path_alias('node/' . $parent_nid);
    drupal_goto($parent_url);
  }

  if ($view_mode == 'search_result') {
    if (substr($entity->type, -8) == 'language') {
      $parent_nid = _fnet_content_get_parent_from_child($entity->nid);
      $parent_node = node_load($parent_nid);
      if ($parent_node) {
        $entity->title = $parent_node->title;
        $entity->nid = $parent_node->nid;
      }
    }
  }

  if (($view_mode == 'search_index') || ($view_mode == 'search_result')) {
    if (($type == 'node') && ($entity->type == 'digital_asset')) {
      $search_da = array(
        '#entity_type' => 'node',
        '#bundle' => $entity->type,
        '#markup' => ' ',
      );
      $blank = new stdClass();
      $blank->title = '';
      $blank->content = $search_da;
      $entity->title = '';
      $entity->content = $search_da;
      $entity = $blank;
    }
  } // end if search

  // if metatags->robots->noindex is elected hide node from search
  if (($view_mode == 'search_index') && ($type == 'node')) {
    if (isset($entity->metatags[LANGUAGE_NONE]['robots']['value']['noindex'])) {
      if ($entity->metatags[LANGUAGE_NONE]['robots']['value']['noindex'] == 'noindex') {
        $entity->title = '';
        $entity->content = array(
          '#entity_type' => 'node',
          '#bundle' => $entity->type,
          '#markup' => ' ',
        );
      }
    }
  }
}



/*
* Helper functions
*/

/*
* Find parent nid, for all types
*/
function _fnet_content_get_parent_from_child($child_nid) {

  $parent_field = array(
    'edoclanguage' => 'field_edoc_lang_edoc',
    'exp_ind_lng' => 'field_exp_ind_lng_exp_ind',
    'exp_rle_lng' => 'field_exp_rle_lng_rle',
    'exp_tpc_lng'  =>  'field_exp_tpc_lng_exp_tpc',
    'homepage2013language'  =>  'field_home13lng_homepage',
    'industrylanguage'  =>  'field_indlang_industry',
    'microsite_page_language'  =>  'field_ms_page_language_ms_page',
    'productlanguage'  =>  'field_prodlang_product',
  );

  $child_node = node_load($child_nid);
  if (! $child_node) return ;

  if ( in_array( $child_node->type , array_keys($parent_field) ) ) {
    return( fnet_common_get_field_value('node', $child_node, $parent_field[ $child_node->type ], 'nid') );

  }

  return FALSE;

}

/*
*     Gets product nids of Product Status != Active
*/

function _fnet_content_get_product_nids_to_remove() {

  $active_tid=0;
  $not_active=array();
  $expired_nids=array();
  $status = taxonomy_get_tree(1);

  foreach ($status as $term) {

    if ($term->name == 'Active') {
      $active_tid = $term->tid;
    }
  }

  $query = new EntityFieldQuery();
  $expired_nodes = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'product')
        ->fieldCondition('taxonomy_vocabulary_1', 'tid', $active_tid, '!=')
        ->propertyCondition('status', NODE_PUBLISHED)
        ->execute();

  if (isset($expired_nodes['node']) ) $expired_nids =   array_keys($expired_nodes['node']);

  return $expired_nids ;

}


/*
*  regex to remove style tags and their contents. for search indexing
*/
function _fnet_content_remove_css($text) {

  $text = preg_replace('/\s/', ' ', $text);
  $after = preg_replace('/<style.*\/style>/im', ' ', $text);
  $after = preg_replace('/<script.*\/script>/im', ' ', $after);

  return $after;
}

/*
*  regex to remove sup tags and their contents, for title autocomplete
*/
function _fnet_content_remove_sup($text) {

  $after = preg_replace('/<sup.*\/sup>/i', '', $text);

  $text = preg_replace('/ /m', '_', $after);
  $after = preg_replace('/\W/m', '', $text);
  $text = preg_replace('/_/m', ' ', $after);

  return $text;
}


