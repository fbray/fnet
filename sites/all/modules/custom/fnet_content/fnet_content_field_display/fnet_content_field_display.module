<?php

/**
 * @file
 * Code for FNET Content.
 */



function fnet_content_field_display_menu() {

    $items = array();

    $items['admin/fnet/content/displayfields'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title'   =>    t('FNET Content Types Display Modes'),
      'access arguments' => array('administer site configuration'),
      'page callback' => '_fnet_content',
    );

    $modes = _display_modes();

    foreach ($modes as $mode) {

      $items['admin/fnet/content/displayfields/' . $mode] = array(
        'type' => MENU_LOCAL_TASK,
        'title'   =>    $mode,
        'access arguments' => array('administer site configuration'),
        'page callback' => '_fnet_content_field_display_list',
        'page arguments' => array( $mode ),
      );

    }

return $items;

}


/**
 * Implements hook_node_view().
 */
function fnet_content_field_display_node_view($node, $view_mode) {

  if ($view_mode == 'rss') {

    if (! isset($node->rss_namespaces)) $node->rss_namespaces = array();

  }


}

function fnet_content_field_display_preprocess_node(&$variables) {


  if ($variables['view_mode'] == 'rss') {

    unset($variables['node']->locations);
    unset($variables['locations']);
  }

}



function fnet_content_field_display_url_inbound_alter(&$path, $original_path, $path_language) {


  if (strpos($path, 'admin/fnet/content') !== FALSE ) {

   //   $_GET['destination'] = $path;


  }


}


function fnet_content_field_display_url_outbound_alter(&$path, &$options, $original_path) {




}




function fnet_content_field_display_drupal_goto_alter(&$path, &$options, &$http_response_code) {

  $current_path = current_path();

  if (strpos($current_path, 'admin/fnet/content') !== FALSE ) {

      drupal_set_message('Ignoring redirect to ' . $path  );

      $path = $current_path;
      $http_response_code = 200;

      header_remove('Location');

      return FALSE;
  }

}



function _fnet_content_field_display_list($mode) {

  $types = _content_types();
  $return = array();

  $hidemore = ".node-readmore {display:none !important;}";
  drupal_add_css($hidemore, array('type' => 'inline') );

  foreach ($types as $type => $description) {

      $options = array(
          'attributes' => array(
            'class' => array('big', 'h2', ),
            'target' => '_blank', )
          );

      $link = l($description, 'admin/structure/types/manage/' . $type . '/display/' . $mode, $options );

      // return 1 random node. can increase limit
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
            ->propertyCondition('type', $type)
            ->addTag('random')
            ->propertyCondition('status', NODE_PUBLISHED);
      $query->range(0,1);
      $entities = $query->execute();
      $content = '';
      $node_array = array();

      if ($entities['node']) {
        $node_array = array_keys($entities['node']);
        $nodes = node_load_multiple( $node_array ); 
        $rendered = ''; // "no results" ?
        if (count($nodes) > 0) {
          $nodes_to_render = node_view_multiple($nodes, $mode);
          $content = render($nodes_to_render);
        }
      } // end query

       $fieldset = array(
          '#theme' => 'fieldset',
          '#attributes' => array() , 
          '#collapsed' => TRUE, 
          '#collapsible' => TRUE, 
          '#description' => 'Sample Node(s) ' . implode(',', $node_array) ,
          '#id' => $type, 
          '#title' => render($link) . ' (click to edit field display settings) ', 
          '#value' => $content,
        );

      $return[] = $fieldset;

  } // end foreach

  return $return;

}



/**
 *  
 * 
 * Implements hook_query_TAG_alter(&$query)
 */
function fnet_content_field_display_query_random_alter($query){
  $query->orderRandom();
}



function _display_modes() {

  return array(
    'full',
    'teaser',
    'default',
    'search_index',
    'search_result',
    'rss',
    'print',
    'token',
    );

}



function _content_types() {




return array (

 //   'asset_gateway' => 'Asset gateway',
    'award' => 'Award',
    'blog_article' => 'Blog Article',
//    'digital_asset' => 'Digital Asset',
 //   'distributor' => 'Location',
//    'edoc' => 'eDoc',
//    'edoclanguage' => 'eDoc Language',
 //   'email_page' => 'Email Page',
    'event' => 'Event',
    'event_occurrence' => 'Event Occurrence',
    'expertise' => 'Expertise',
    'exp_ind' => 'Expertise Industry',
    'exp_ind_lng' => 'Expertise Industry Language',
    'exp_rle' => 'Expertise Role',
    'exp_rle_lng' => 'Expertise Role Language',
    'exp_tpc' => 'Expertise Topic',
    'exp_tpc_lng' => 'Expertise Topic Language',
    'family' => 'Family',
    'feature' => 'Feature',
    'homepage2013' => 'Homepage2013',
    'homepage2013language' => 'Homepage2013 Language',
    'industry' => 'Industry',
    'industrylanguage' => 'Industry Language',
    'knowledge_base_article' => 'Knowledge Base Article',
    'localized_email' => 'Localized email',
 //   'marketo_form' => 'Marketo Form',
 //   'microsite_page' => 'Microsite Page',
//    'microsite_page_language' => 'Microsite Page Language',
//    'microsite_story' => 'Microsite Story',
//    'microsite_story_language' => 'Microsite Story Language',
    'page' => 'Page',
    'page_reg' => 'Page Region',
    'page_reg_lang' => 'Page Region Language',
    'pressrelease' => 'Press Release',
    'product' => 'Product',
    'productlanguage' => 'Product Language',
    'productsubtype' => 'Product Sub Type',
    'product_distributor_group' => 'Distributor',
    'profile' => 'Profile',
    'promotion' => 'Promotion',
    'promotion_form' => 'Promotion Form',
    'promotion_fulfillment' => 'Promotion fulfillment',
    'promotion_product' => 'Promotion product',
    'software_notifications' => 'Software Notifications',
    'story' => 'Story',
    'suite' => 'Suite',
    'translation_text' => 'Translation Text'
  );

}

