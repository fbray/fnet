<?php

/**
 * @file
 * Adds custom product finder functionality to Drupal.
 *
 * This functionality is specific to Fluke Networks web portal.
 */

/**
 * TODO: Add validation to the Contextual Filter in the view.
 *
 * Make sure it checks if the input is either
 * a) numeric or
 * b) fits the format of 123+124+125 (numbers concatinated with +).
 */

/**
 * Implements hook_menu().
 */
function product_finder_menu() {
  $items['product-finder'] = array(
    'title' => 'Product Finder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('product_finder_search_form'),
    'access arguments' => array('search using product finder'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function product_finder_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'product_finder') . '/views',
  );
}

/**
 * Implementation of Search form for Product Finder.
 */
function product_finder_search_form($form, &$form_state) {
  global $language;
  $form = array();

  drupal_set_title('Find the Best Cable Network Testing Tools');
  // Add meta tag description.
  $tag = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'description',
      'content' => 'Network installation and testing tools for contractors, data center operators, network engineers, and service providers who install and maintain critical network cabling infrastructure.  Fluke Networks provides the best certification, qualification, and verification tools for copper and fiber cabling.',
    ],
  ];
  drupal_add_html_head($tag, 'meta_description');

  // Get Product Categories and their Product Attributes.
  $query = "SELECT n.title as title, ti.tid as tid, ttd.name as name, ttd.description as description
  FROM {node} n
  JOIN {taxonomy_index} ti ON ti.nid = n.nid
  JOIN {taxonomy_term_data} ttd ON ttd.tid = ti.tid
  WHERE n.type = 'product_category'
  AND n.status = 1
  AND (ttd.language = :language OR ttd.language = 'und')";
  $result = db_query($query, array(':language' => $language->language))->fetchAll();
  // Set the result up into an array for display.
  $data = array();
  foreach ($result as $row) {
    $data[$row->title][] = array(
      'tid' => $row->tid,
      'name' => $row->name,
      'description' => $row->description,
    );
  }

  // Put the data into form elements. Split it up according to Product Category.
  foreach ($data as $category => $attributes) {
    // The categories are a fieldset.
    $form[$category] = array(
      '#type' => 'fieldset',
      '#title' => $category,
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    foreach ($attributes as $attribute) {
      $form[$category][$attribute['tid']] = array(
        '#type' => 'checkbox',
        '#title' => $attribute['name'],
        '#description' => $attribute['description'],
      );
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

/**
 * Submit handler for the Product Finder search form.
 */
function product_finder_search_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $selected = array();
  foreach ($values as $key => $value) {
    if ((is_numeric($key)) && ($value == 1)) {
      $selected[] = $key;
    }
  }
  // Format the results of the form (the checkboxes) into a value that the view
  // will find useful. In this case Value1+Value2+Value3... and so on.
  $tids = implode('+', $selected);
  $form_state['redirect'] = '/product-finder/' . $tids;
}
