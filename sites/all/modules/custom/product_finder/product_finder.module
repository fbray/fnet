<?php
// $Id$

/**
 * @file
 * Adds custom product finder functionality to Drupal. This functionality is specific to Fluke Networks web portal.
 */

/**
 * Implements hook_menu().
().
 */
function product_finder_menu() {
  $items['product_finder'] = array(
    'title' => 'Product Finder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('product_finder_search_form'),
    'access arguments' => array('search using product finder'),
    'type' => MENU_CALLBACK,
  );
  $items['product_finder/results'] = array(
    'title' => 'Product Finder Results',
    'page callback' => 'product_finder_results_page',
    'access arguments' => array('search using product finder'),
    'type' => MENU_CALLBACK,
  );
  $items['product_finder/results/%/%/%'] = array(
    'title' => 'Product Finder Results',
    'page callback' => 'results_page_by_industry',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('search using product finder'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/product_finder'] = array(
    'title' => 'Product Finder configurations',
    'description' => 'Configure Product Finder settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('product_finder_settings_form'),
    'access arguments' => array('administer product finder'),
  );
  $items['admin/config/product_finder/configure'] = array(
    'title' => 'Configure',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  return $items;
}

/**
 * Implements hook_permission().
().
 */
function product_finder_permission() {
  return array(
    'search using product finder' => array(
      'title' => t('search using product finder'),
      'description' => t('Search Using Product Finder'),
    ),
    'administer product finder' => array(
      'title' => t('administer product finder'),
      'description' => t('Administer Product Finder'),
    ),
  );
}

/**
 * Implementation of Search form for Product Finder.
 */
function product_finder_search_form($form, &$form_state) {
  $vars = variable_get('product_finder_settings', NULL);

  if (!$vars) {
    drupal_set_message(t('Please contact the administrator. Product Finder is not configured!'), 'error');
  }
  else {
    drupal_add_css(drupal_get_path('module', 'product_finder') . '/product_finder.css');
    $form = array();

    //Hardcoding vocabulary ID
    $vars      = variable_get('product_finder_settings', array());
    $vocab_id  = $vars['vocabulary'];
    $node_type = $vars['node_type'];
    $sql = <<<sql
SELECT
	n.nid,
	n.vid,
	n.title
FROM
	{node} AS n
INNER JOIN field_data_field_business_entity AS be ON n.nid = be.entity_id
AND n.vid = be.revision_id
WHERE
	n.type = :type
AND n.`status` = :status
AND (be.field_business_entity_tid IN (:tids)
OR be.field_business_entity_tid IS NULL)
ORDER BY
	n.title ASC
sql;
    $results = db_query($sql, array(
      ':type' => $node_type,
      ':status' => 1,
      ':tids' => site_split_personality_tids()
    ));
    $titles    = array();

    foreach ($results as $data) {
      $node_title = str_replace(' ', '_', strtolower($data->title));
      $titles[]   = $data->title;
      $vid        = $data->vid;

      //taxonomy_node_get_terms_by_vocabulary($node, $vid, $key = 'tid');

      if (!isset($terms[$vid][$key])) {
        $result = db_query('SELECT t.* FROM {taxonomy_index} r
              JOIN {node} n ON n.nid = r.nid
              INNER JOIN {taxonomy_term_data} t ON r.tid = t.tid
              INNER JOIN {taxonomy_vocabulary} v ON t.vid = v.vid
            WHERE n.vid = :vId AND t.vid = :vocabId
            ORDER BY v.weight, t.weight, t.name', array(":vId"=>$vid, ":vocabId"=>$vocab_id));
        $terms = array();
        foreach ($result as $term) {
          $terms['attr-' . $term->tid . '-' . $term->vid] = t($term->name);
        }

        $form[$node_title] = array(
          '#type' => 'checkboxes',
          '#title' => t($data->title),
          '#options' => $terms,
        );
        $terms = NULL;
      }
    }
    $titles         = implode('||', $titles);
    $form['titles'] = array(
      '#type' => 'hidden',
      '#value' => $titles,
    );
    $form['save']   = array(
      '#type' => 'submit',
      '#value' => t('Search'),
      '#weight' => 10,
    );

    $form['#action'] = url('product_finder/results');
    return $form;
  }
}

/**
 * Implementations of Search results page view.
 */
function product_finder_results_page() {

  // Fetch regLang value to pass as argument to 'industry_family_products' view
  $region = strtolower($_COOKIE["regLang"]);
  if ($region == "") {
    $region = "en-us";
  }

  drupal_add_css(drupal_get_path('module', 'product_finder') . '/product_finder.css');
  $output       = ''
                . '<div id="product-finder-results-wrapper">'
                . '<div class="start-over"><a href="' . base_path()
                . 'product_finder">Start over</a></div>';
  $titles_arr   = explode('||', $_POST['titles']);
  $result_state = 0; //0 = blank form submitted; 1 = no records found; 2 = records found

  foreach ($titles_arr as $title_text) {
    $title = str_replace(' ', '_', strtolower($title_text));

    if (isset($_POST[$title])) {
      $result_state = 1;
      $term_ids     = array();

      foreach ($_POST[$title] as $term_arr) {
        $term_id    = explode('-', $term_arr);
        $term_ids[] = $term_id[1];
      }

      foreach ($term_ids as $term_id) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->propertyCondition('type', 'product')
          ->propertyCondition('status', NODE_PUBLISHED)
          ->fieldCondition('taxonomy_vocabulary_6', 'tid', $term_id);
        $nodes = $query->execute();
        $total_results = count($nodes);
        try {
          $term_name = taxonomy_term_load($term_id)->name;
        } catch (Exception $e) {
          watchdog('product_finder', 'Error loading taxonomy term for tid: %tid', array('%tid' => $term_id));
        }

        if ($total_results > 0) {
          $output .= '<div class="industry-entry-wrapper"><h3 class="industry-title">'
                   . html_entity_decode($title_text) . ': ' . $term_name . '</h3>';
          $output .= '<ul class="product_finder_results_wrapper">';
          foreach ($nodes['node'] as $nid => $info) {
            $result_state = 2;
            $data = entity_metadata_wrapper('node', $nid);
            try {
              $title = $data->title->value();
              $description = $data->field_product_desc->value->value();
            } catch (Exception $e) {
              continue;
            }
            $output .= '<li><h4>' . html_entity_decode(l($title, 'node/' . $nid)) . '</h4><div class="description">' . $description . '</div></li>';
          }
          $output .= '</ul>';
          $output .= '</div>';
        }
      }
    }
  }

  if ($result_state == 0) {
    drupal_set_message(t('Please make at least one selection and try again!'), 'error');
    drupal_goto('product_finder');
  }
  elseif ($result_state == 1) {
    drupal_set_message(t('Sorry, no records were found for your selection!'), 'error');
    drupal_goto('product_finder');
  }

  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_form for admin settings form
().
 */
function product_finder_settings_form($form, &$form_state) {

  $form       = array();
  $node_types = _node_types_build();
  $vars       = variable_get('product_finder_settings', array());
  $vocabulary = taxonomy_get_vocabularies();
  $vocabs     = array(); /* Change to array('0' => '--none--'); if you want a none option*/

  foreach ($vocabulary as $item) {
    $key          = $item->vid;
    $value        = $item->name;
    $vocabs[$key] = $value;
  }

  $form['node_type'] = array(
    '#type' => 'select',
    '#title' => t('Content type in use'),
    '#default_value' => $vars['node_type'],
    '#options' => $node_types->names,
    '#description' => t('Content type of industries.'),
    '#required' => TRUE,
  );
  $form['vocabulary'] = array(
    '#type' => 'select',
    '#title' => t('Vocabulary in use'),
    '#default_value' => $vars['vocabulary'],
    '#options' => $vocabs,
    '#description' => t('Vocabulary related to selected content type.'),
    '#required' => TRUE,
  );
  $form['page_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Results per page for pagination'),
    '#default_value' => $vars['page_size'],
    '#size' => 60,
    '#required' => TRUE,
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 10,
  );
  return $form;
}

/**
 * Implements hook_submit() for Product Finder Configuration form
().
 */
function product_finder_settings_form_submit($form, &$form_state) {
  $vars               = array();
  $vars['node_type'] = $form_state['values']['node_type'];
  $vars['vocabulary'] = $form_state['values']['vocabulary'];
  $vars['page_size'] = $form_state['values']['page_size'];
  variable_set('product_finder_settings', $vars);
  drupal_set_message('<strong>' . t('Configurations have been saved.') . '</strong>');
}
