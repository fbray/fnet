<?php

// required.  change to something portal based
// https://www.drupal.org/node/2277381#comment-9331979
function box_entities_access_cb_funk() {
    return TRUE;
}

// cheat to call drush enable during dev
// HACK HACK HACK
include_once('box_entities.batch.php');

/*
 * Module hooks
 * ----------------------------------------
 */

/*
 * Implementation of hook_help().
 */
function box_entities_help() {

}

/*
 * Implements hook_views_api().
 */
function box_entities_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'box_entities') . '/views',
  );
}

/*
* Implementation of hook_menu().
*/
function box_entities_menu() {
  $items = array();

  /* These need to go to Box Connect.
  $items['admin/fnet/extranet/box_gallery_init/%'] = array(
    'title'            => 'Box Galleries',
    'page callback'    => '_update_box_entities',
    'page arguments'  =>  array(3),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/fnet/extranet/box_gallery_download_images'] = array(
    'title'            => 'Download Thumbnails',
    'page callback'    => 'drupal_get_form',
    'page arguments'  =>  array('box_galleries_thumbnail_form'),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/fnet/extranet/box_galleries/%/edit'] = array(
    'menu'            =>  'management',
    'title'            => 'Edit Box Galleries',
    'page callback'    => 'box_gallery_edit_page',
    'page arguments'  =>  array(3),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/content/box_gallery/%'] = array(
    'title'            => 'Gallery',
    'page callback'    => 'box_gallery_page_callback',
 //   'load functions'    => 'box_thumbnail_load',
    'page arguments'  =>  array(3),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/content/box_thumbnail/%'] = array(
    'title'            => 'Thumbnail',
    'page callback'    => 'box_thumbnail_page_callback',
 //   'load functions'    => 'box_thumbnail_load',
    'page arguments'  =>  array(3),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/content/image_size/%'] = array(
    'title'            => 'Image Size',
    'page callback'    => 'image_size_page_callback',
    'load functions'    => 'image_size_load',
    'page arguments'  =>  array(3),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_CALLBACK,
  );
  */
  return $items;
}

function box_galleries_thumbnail_form($form, &$form_state) {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Download a batch of up to 200 images from Box'),
  );
  return $form;
}

function box_galleries_thumbnail_form_submit($form, &$form_state) {
  include_once('box_entities.batch.php');
  try {
    create_pngs();
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage());
  }
}

/*
* Menu callback functions
 * -----------------------------------------------------------
*/

/**
 * @param $box_file_id
 * @return string
 * @throws \Exception
 */
function image_size_page_callback($box_file_id) {
    $box_image_size = entity_load_unchanged('box_image_size', $box_file_id );
    if ($box_image_size) {
      return theme('box_image_size', array('element' => $box_image_size) );
    }
    return '';
}

/**
 * @param $tid
 * @return string
 * @throws \Exception
 */
// TODO: Debug this, since it's problematic.
function box_thumbnail_page_callback($tid) {
  $view_mode = 'full';
  $box_thumbnail = entity_load_unchanged('box_thumbnail', $tid );
  $array = _box_entities_prepare_entity_content($box_thumbnail, 'box_thumbnail', 'box_thumbnail_single');

  if ($box_thumbnail) {
    return theme('box_thumbnail_single', array('element' => $box_thumbnail) );
  }
  return $array->content;
}

/**
 * @param $gid
 * @param string $view_mode
 * @return mixed
 */
function box_gallery_page_callback($gid, $view_mode = 'full') {
  $box_gallery = entity_load_unchanged('box_gallery', $gid );
  $array = _box_entities_prepare_entity_content($box_gallery, 'box_gallery', 'box_gallery', $view_mode);

  return $array->content;
}


// can get/return individual item titles
/**
 * @param int $id
 * @return null|string
 */
function gallery_page_title($id = 0) {
  return t('Image Gallery');
}

/**
 * @param int $id
 * @return null|string
 */
function thumbnail_page_title($id=0) {
  return t('Image');
}

/*
 * Helper Functions
 * Used for content preparations. Adds render array elements.
 */

/**
 * @param $entity
 * @param $entity_type
 * @param $theme
 * @param string $view_mode
 * @return mixed
 */
function _box_entities_prepare_entity_content($entity, $entity_type, $theme, $view_mode='full') {
  $id = 'ID';

  // got odd msgs a couple times, added this. may not be needed.
  if ($entity_type =='box_gallery') {
    if ( isset($entity->gid) ) {
      $id = $entity->gid;
    } 
  }

  $entity->content = array();
  field_attach_prepare_view($entity_type, array($id => $entity),  $view_mode  );
  entity_prepare_view($entity_type, array($id => $entity));

  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  $entity->content += array(
    '#theme'     => $theme,
    '#element'   => $entity,
    '#view_mode' => $view_mode,
    '#language'  => NULL,
  );

  return $entity;

}

/**
 * @param $box_image_size
 * @return string
 */
function box_image_size_render_entity($box_image_size) {
  $prepared = _box_entities_prepare_entity_content($box_image_size, 'box_image_size', 'box_image_size');
  $prepared->content['elements'] = $box_image_size;
  $render = drupal_render($prepared->content);
  return $render;
}

/**
 * @param $box_thumbnail
 * @return string
 */
function box_thumbnail_render_entity($box_thumbnail) {
    $sizes = array(
      'Large' => 'High Resolution (TIF)',
      'Medium'  => 'Medium Resolution (JPG)',
      'Small' => 'Low Resolution (JPG)',
      'CMYK'  => 'CMYK (TIF)',
      'Web' => 'For web or presentations (PNG)',
      );

  $prepared = _box_entities_prepare_entity_content($box_thumbnail, 'box_thumbnail', 'box_thumbnail_single');
  $prepared->content['elements'] = $box_thumbnail;

  // create download link text
  if ( count($prepared->content['elements']->box_image_size) > 1) {

    $box_thumbnail->download_link_text = 'Download Options';

    foreach ($prepared->content['elements']->box_image_size as $id => $size) {
        $link_display_text = isset($sizes[$size->size_name]) ? $sizes[$size->size_name] : t('Other');
        $prepared->content['elements']->box_image_size[$id]->link_display_text = $link_display_text;
    }
  } else {
    foreach ($prepared->content['elements']->box_image_size as $id => $size) {
        $prepared->content['elements']->box_image_size[$id]->link_display_text = t('Download');
    }
  }
  $render = drupal_render($prepared->content);
  return $render;
}

/**
 * @param $box_gallery
 * @return string
 */
function box_gallery_render_entity($box_gallery) {

  $prepared = _box_entities_prepare_entity_content($box_gallery, 'box_gallery', 'box_gallery');
  $prepared->content['elements'] = $box_gallery;
  $render = drupal_render($prepared->content);
  return $render;

}


/*
*     receives entity in array (like from Views), sets up render elements
*/
function box_thumbnail_callback_passthru($variables) {
  $box_thumbnail = $variables['box_thumbnail'];
  $testing = _box_entities_prepare_entity_content($box_thumbnail, 'box_thumbnail', 'box_thumbnail_single');
  $render = drupal_render($testing->content);

  return $render;
}

function box_gallery_callback_passthru($variables) {

     $theme = 'box_gallery_single';
     $view_mode = 'full';

    // Views
    if ( isset($variables['box_gallery']) ) {

        $theme = 'box_gallery_single';
        $view_mode = 'full';
        $box_gallery = $variables['box_gallery'];

        if ( isset($box_gallery->view_mode) && ($box_gallery->view_mode == 'gallery_paged')  ) {
          $view_mode = 'gallery_paged';
          $theme = 'box_gallery_paged';

        }

        $testing = _box_entities_prepare_entity_content($box_gallery, 'box_gallery', $theme, $view_mode);
        $render = drupal_render($testing->content);

        return $render;

    }

    // Media Gallery 
    if ( isset($variables['element']) && ($variables['theme_hook_original'] == 'box_gallery') ) {

        $box_gallery = $variables['element'];
        if ($box_gallery->content['#view_mode'] == 'gallery_paged') {
          $box_gallery->content['#theme'] = 'box_gallery_paged';
        }

        $view_mode = 'gallery_paged';
        $theme = 'box_gallery';

        $testing = _box_entities_prepare_entity_content($box_gallery, 'box_gallery', $theme, $view_mode);

        $render = drupal_render($testing->content);

        return $render;

    }

    return array();

}


/*
*
*  hook_theme()
*/
function box_entities_theme() {
    $themes = array (
        'box_gallery' => array(
            'template' => 'box_gallery',
            'variables' =>  array('element' => NULL),
        ),
        'box_gallery_full' => array(
            'template' => 'box_gallery_full',
            'variables' =>  array('element' => NULL),
        ),
        'box_gallery_single' => array(
            'template' => 'box_gallery_single',
            'variables' =>  array('element' => NULL),
        ),
        'box_gallery_paged' => array(
            'template' => 'box_gallery_paged',
            'variables' =>  array('element' => NULL),
        ),
        'box_gallery_thumbnails' => array(
            'template' => 'box_gallery_thumbnails',
            'variables' =>  array('element' => NULL),
        ),
        'box_gallery_carousel' => array(
            'template' => 'box_gallery_carousel',
            'variables' =>  array('element' => NULL),
        ),
        'box_gallery_carousel_rows' => array(
            'template' => 'box_gallery_carousel_rows',
            'variables' =>  array('element' => NULL, 'view_mode' => NULL, ),
        ),
        'box_image_size' => array(
            'template' => 'box_image_size',
            'variables' =>  array('element' => NULL),
        ),
        'box_thumbnail' => array(
            'function'  => 'box_thumbnail_callback_passthru',
            'render element' => 'box_thumbnail',
           'variables' =>  array('element' => NULL),
        ),
        'box_gallery' => array(
            'function'  => 'box_gallery_callback_passthru',
            'render element' => 'box_gallery',
           'variables' =>  array('element' => NULL),
        ),
       'box_thumbnail_single' => array(
            'template' => 'box_thumbnail_single',
            'variables' =>  array('element' => NULL),
        ),
    );
    return $themes;
}



/**
 * Implements hook_entity_view($entity, $type, $view_mode, $langcode)
 */
function box_entities_entity_view($entity, $type, $view_mode, $langcode) {
    // Media Gallery
    if ( ($type=='node') && ($entity->type== 'media_gallery') )  {
      $node_view_mode = fnet_common_get_field_value('node', $entity, 'field_media_gallery_display_type');

/*
      if ( isset( $entity->content['field_box_gallery_id']['#items']) ) {
        foreach ($entity->content['field_box_gallery_id']['#items'] as $count => $item) {
              $gid = $item['target_id'];
              $content = box_gallery_page_callback($gid, $node_view_mode);

              $entity->content['gallery_' . $gid] = $content;

        }

      }
*/
 //     $entity->content['field_box_gallery_id']['#theme'] = 'hidden';

    } // end gallery


    /*                                                      */
    // Media Gallery
    /*                                                      */

    if ( isset($entity->type) && ($entity->type == 'media_gallery') ) {

    }


    if ($type=='box_thumbnail') {
    }

    if ($type=='box_image_size') {

    }

    if ($type=='box_gallery') {

    }

} // end function


// Start of update functions
/**
 * @param int $iter
 * @return string
 */
function _update_box_entities($iter = 0) {

 // box_ent_thumb  1446750070
 // 1446750070

 $now = new DateTime();
 $timestamp = $now->getTimeStamp();

/*
 $query = db_update('box_item');
 $query->condition('box_type', 'file', '!=');
 $query->fields(array(
    'original_file_name' =>'',
    'last_checked' => $timestamp,
    )
  );
 $query->execute();


  $query = db_delete('box_ent_thumb');
  $query->condition('checked',  1447036349, '<');
  $query->execute();
   
  $query = db_delete('box_ent_image_size');
  $query->condition('checked',  1447036349, '<');
  $query->execute();


  $query = db_select('box_item', 'bi');
  $query->fields('bi', array( 'box_id', 'box_name' ) );
  $query->condition('last_checked', 1447041699, '<');
  $query->condition('box_type', 'file', '=');
  $query->range(0,700);

  $results = $query->execute()->fetchAll();

  if ($results) {

      foreach ($results as $result) {

          $box_id = $result->box_id;
          $name = $result->box_name;

         $original_a =_box_get_name_size($result->box_name) ;
         if ( ($original_a) && is_array($original_a) ) {
             $original = array_shift($original_a) ;
          } else {
              $original = $result->box_name;
          }

           $query = db_update('box_item');
           $query->fields(array(
              'original_file_name' => $original,
              'last_checked' => $timestamp,
              )
            );
           $query->condition('box_id', $box_id, '=');
           $query->execute();
    }

      drupal_set_message('Updated: ' . count($results) );

  }

  return 'done';
*/
  // make this drupal
  //THIS IS GARBAGE AS IT SITS. -rositis
  include_once('box_entities.batch.php');

  $remaining=0;

  $remaining = _update_box_galleries();

  if ($remaining < 1) {
    $iter++;
    $remaining = _update_box_thumbnails();

    if ($remaining < 1) $remaining = create_pngs() ;

    // called via drush
    if ( !drupal_is_cli() ) {
        // web
        if ($remaining > 5) {
         drupal_goto('admin/fnet/extranet/box_gallery_init/' . $iter);
        } else {
          drupal_goto('admin');
        }
    }
  }

  return 'Done ' . $remaining;
}



function _get_product_name_array() {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title', ) );
  $query->condition('n.status', 1, '=');
  $query->condition('n.type', 'product', '=');
  $query->orderBy('n.title', 'ASC');

  $results=$query->execute()->fetchAllKeyed(0,1);

  foreach ($results as $nid => $title) {
    $results[$nid] = _fnet_content_remove_sup($title);
  }

  return $results;

}

function box_gallery_edit_page ($gid) {

    $gallery_array = entity_load('box_gallery', array($gid) );

    $box_gallery = array_shift($gallery_array);

    $form_state = array();

    $edit_box_gallery = entity_ui_get_form('box_gallery', $box_gallery, 'edit', $form_state );

    return $edit_box_gallery;

}

function box_gallery_form($form, $form_state) {

  $title = '';

  $box_gallery = $form_state['build_info']['args'][0];

/*
  $nid = $box_gallery->content_nid;

  if ($nid) {
    $node=node_load($nid);
    $title = 'Product: ' . $node->title;
  }
*/

  $nid_values = fnet_common_get_field_values('box_gallery', $box_gallery, 'field_dam_related_product');

  $nids=array();
  foreach ($nid_values as $nid_value) {
    if ($nid_value['nid']) $nids[] = $nid_value['nid'];
  }

  if ($nids) {
    $nodes = node_load_multiple($nids);
    $title = 'Products: ';
      foreach ($nodes as $node) {
        $title .= $node->title . ', ' ;
    }
  }

  $form_state['redirect'] = 'admin/fnet/extranet/box_galleries';

  $form['#title'] = t('Edit ') . $box_gallery->box_title;

  $form['return'] = array(
      '#theme'  =>  'link',
      '#text' => 'Back to list',
      '#path' => 'admin/extranet/box_galleries',
      '#options' => array(
        'attributes' => array(),
        'html'  => FALSE,
        ),
      );

  $results = _get_product_name_array();

  $form['field_dam_related_product'] = array(
    '#type' => 'select',
    '#size' => 11,
    '#multiple' => 'multiple',
    '#entity_type' => 'node',
    '#bundle' => 'product',
    '#title' => 'Product',
    '#default_value' => $nids,
    '#options' => $results,
    '#description' => $title,
    );

  $form['submit'] = array(
    '#type' => 'submit',
    '#action' => 'box_gallery_form_submit',
    '#value' => 'Save',
    '#weight' => 50,
    );

  return $form;

}


// to-do:  update box_ent_thumb where content_nid match

function box_gallery_form_submit($form, $form_state) {

  $entity = $form_state['box_gallery'];

  $delta = 0;
  foreach ($form_state['values']['field_dam_related_product'] as $value) {
    fnet_common_set_field_value($value, 'box_gallery', $entity, 'field_dam_related_product', 'nid', $delta++);
  }

//  $entity->field_dam_related_product = $form_state['values']['field_dam_related_product'];

  $entity->save();

  drupal_set_message('Saved.');

}




/*
*   hook_entity_info()
*/

function box_entities_entity_info() {

  $return = array(

    'box_gallery' => array(
      'label' => 'Box Gallery',
      'base table' => 'box_ent_gallery',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' =>  'gid',
        'label' => 'box_title',
        ),
      'configuration' => TRUE,
      'exportable' => FALSE,
      'metatags'  => TRUE,
      'entity class' => 'Entity',
      'label callback' => 'entity_class_label',
      'module'  => 'box_entities',
      'admin ui' => array( 'path' => 'box_gallery', ),
      'default path'  => 'admin/content/box_gallery/%box_gallery',
      'controller class' => 'BoxGalleryController',
      'views controller class' => 'EntityDefaultViewsController',
      'access callback' => 'box_entities_access_cb_funk',
/*      'access callback' => 'user_access',
      'access arguments' => array('administer site configuration'),*/
      'view modes' => array(
          'full' => array(
            'label' => t('Full content'),
            'custom settings' => FALSE,
          ),
          'node_settings' => array(
            'label' => t('Set the display per node, rather than per field'),
            'custom settings' => FALSE,
          ),
          'gallery_paged' => array(
            'label' => t('Gallery Paged (12)'),
            'custom settings' => FALSE,
          ),
          // other possible view modes/templates
          /*
          'carousel' => array(
            'label' => t('Carousel View Single Row'),
            'custom settings' => FALSE,
          ),
          'carousel_rows' => array(
            'label' => t('Carousel View Multiple Row'),
            'custom settings' => FALSE,
          ),  
          'all_thumbs' => array(
            'label' => t('Show all thumbnails'),
            'custom settings' => FALSE,
          ),
          'preview' => array(
            'label' => t('Preview (Max 3 thumbnails)'),
            'custom settings' => FALSE,
          ),
          'do_not_display' => array(
            'label' => t('Do not display'),
            'custom settings' => FALSE,
          ), 
*/
        ),
      ),
//    ),

    'box_thumbnail' => array(
      'label' => 'Box Image Thumb',
      'base table' => 'box_ent_thumb',
      'fieldable' => TRUE,
      'metatags'  => TRUE,
      'entity keys' => array(
        'id' =>  'tid',
        'label' => 'original_file_name',
        ),
      'entity class' => 'Entity',
      'module'  => 'box_entities',
      'admin ui' => array( 'path' => 'box_thumbnail', ),
      'default path'  => 'admin/content/box_thumbnail/%box_thumbnail',
      'controller class' => 'BoxThumbnailController',
      'views controller class' => 'EntityDefaultViewsController',
      'access callback' => 'box_entities_access_cb_funk',
/*      'access callback' => 'user_access',
      'access arguments' => array('administer site configuration'),*/

      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'title' => array(
          'label' => t('Title View '),
          'custom settings' => FALSE,
        ),
      ),
    ),

    'box_image_size' => array(
      'name' => 'box_image_size',
      'label' => 'Box Image Size',
      'base table' => 'box_ent_image_size',
      'fieldable' => TRUE,
      'metatags'  => FALSE,
      'entity keys' => array(
        'id' =>  'box_file_id',
        'label' =>  'size_name',
        ),

      'entity class' => 'Entity',
      'module'  => 'box_entities',
      'admin ui' => array( 'path' => 'box_image_size', ),
      'default path'  => 'admin/content/image_size/%box_image_size',
      'controller class' => 'BoxImageSizeController',
      'views controller class' => 'EntityDefaultViewsController',

      'access callback' => 'box_entities_access_cb_funk',
/*      'access callback' => 'user_access',
      'access arguments' => array('administer site configuration'),*/

      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
    ),


);

return $return;

}




function box_entities_get_view_modes($field_info) {
  $info = box_entities_entity_info();
  $image_styles = image_styles();
  if ($field_info['field_name'] == 'field_media_gallery_display_type') {
    $modes = array();
    foreach ($info['box_gallery']['view modes'] as $key => $info) {
      $modes[$key] = $info['label'];
    }
    foreach ($image_styles as $id => $is) {
      $modes['thumbnail.' . $id] = $is['label'];
    }
    return $modes;
  } else {
    return array();
  }

}


function _box_entities_entity_property_info_alter(&$info) {

}




/*
*   hook_entity_property_info()
*/
function box_entities_entity_property_info() {

  $info = array();

  $info['box_gallery']['properties'] = array(
    'gid' => array('label' => 'Gallery ID', 'help' => '', 'schema field' => 'gid', 'type' => 'integer', 'description' => 'ID of the folder from Box',),
  'box_title' => array('label' => 'Title', 'help' => '', 'type' => 'text', 'schema field' => 'box_title', 'description' => 'Name of the folder from Box.', ), 
  'checked' => array('label' => 'Last Checked', 'help' => '', 'type' => 'date', 'schema field' => 'checked', 'description' => 'When Info Was Refreshed.', ), 
  'content_nid' => array('label' => 'Product Node', 'help' => '', 'type' => 'node', 'schema field' => 'content_nid', 'description' => 'Node ID for associated product.', ), 
    );

  

  $info['box_thumbnail']['properties'] = array(
    'tid' => array('label' => 'Thumb ID (tid)', 'schema field' => 'tid', 'type' => 'integer',   ),
    'gallery_id' => array('label' => 'Gallery ID', 'schema field' => 'gallery_id', 'type' => 'box_gallery',  ),
    'original_file_name' => array('label' => 'File Name', 'type' => 'text', 'schema field' => 'original_file_name', ), 
    'thumbnail' => array('label' => 'Image', 'type' => 'uri', 'schema field' => 'thumbnail',  )
    );

  $info['box_image_size']['properties']= array(

    'box_file_id' => array('label' => 'Box File ID', 'schema field' => 'box_file_id', 'type' => 'integer', 'entity views field'  => TRUE, ),
    'thumb_id' => array('label' => 'Thumbnail ID (tid)', 'schema field' => 'thumb_id', 'type' => 'box_thumbnail', 'entity views field'  => TRUE, ),
    'size_name' => array('type' => 'text', 'label' => 'Size Name', 'schema field' => 'size_name', 'entity views field' => TRUE), 

    );

  $bundles = array(
    'box_gallery' => array('label' => 'Box Gallery', ), 
    'box_thumbnail' => array('label' => 'Box Thumbnails', ),
    'box_image_size' => array('label' => 'Box Image Size', ),    
    );

  $info['box_gallery']['bundles'] = $bundles;
  $info['box_thumbnail']['bundles'] = $bundles;
  $info['box_image_size']['bundles'] = $bundles;

  return $info;
}


