<?php
// $Id: fnet_bedrock.module 1675 2016-03-30 22:14:30Z mositis $
include 'includes/fnet_bedrock_user.php';
include 'includes/pretty-json.php';
/**
 * @file
 * fnet_bedrock module contains code to interface with FNET Bedrock IAM via REST calls
 *
 */
function fnet_bedrock_menu() {
  $items['admin/fnet/fnet_bedrock'] = array(
    'title' => 'FNET Bedrock',
    'description' => "Settings for fnet_bedrock module.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fnet_bedrock_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fnet_bedrock.admin.inc',
  );
  $items['admin/fnet/fnet_bedrock/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/fnet/fnet_bedrock_support'] = array(
    'title' => 'Bedrock support',
    'description' => "Support functions for Bedrock authentication.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fnet_bedrock_support'),
    'access arguments' => array('access bedrock support functions'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fnet_bedrock.support.inc',
  );
  if ($_SERVER['HTTP_HOST'] != 'www.flukenetworks.com') {
    $items['admin/fnet/fnet_bedrock/test'] = array(
      'title' => 'Test',
      'description' => "Exercise bedrock interface.",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fnet_bedrock_test'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'fnet_bedrock.test.inc',
    );
  }
  return $items;
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function fnet_bedrock_permission() {
  $perms = array(
    'access bedrock support functions' => array(
      'title' => t('Access Bedrock support functions'),
      'description' => t('Access bedrock troubleshooting functions'),
    ),
  );
  return $perms;
}

/**
 * Query Bedrock REST interface for a user's data
 *
 * @param $email
 * @return \fnet_bedrock_user|mixed
 */
function fnet_bedrock_get_user($email) {
  $rest_method = 'users';
  $data = array('email' => $email);
  $result = fnet_bedrock_rest('GET', $rest_method, $data);
  if ($result->code == 200) {
    $bedrock_user = json_decode($result->data);
    if (count($bedrock_user->items) == 0) {
      $bedrock_user = new fnet_bedrock_user();
    }
    else {
      $bedrock_user = new fnet_bedrock_user($bedrock_user->items[0]);
    }
  }
  else {
    fnet_bedrock_log_failure($result, $data);
    $bedrock_user = new fnet_bedrock_user();
  }
  return $bedrock_user;
}

/**
 * Call Bedrock REST interface to insert a new user in the database
 *
 * @param $bedrock_user
 * @return \fnet_bedrock_user
 */
function fnet_bedrock_insert_user($bedrock_user) {
  $rest_method = 'users';
  $user_data = new stdClass();
  fnet_bedrock_check_field_lengths($bedrock_user);
  $user_data->user = $bedrock_user;
  $data = json_encode($user_data);
  $result = fnet_bedrock_rest('POST', $rest_method, $data);
  if ($result->code == 201) {
    return new fnet_bedrock_user(json_decode($result->data));
  }
  else {
    fnet_bedrock_log_failure($result, $data);
    return new fnet_bedrock_user();
  }
}

/**
 * Call Bedrock REST interface to update a user in the database
 *
 * @param $bedrock_user
 * @return \fnet_bedrock_user
 */
function fnet_bedrock_update_user($bedrock_user) {
  $rest_method = 'users/' . $bedrock_user->id;
  $update_user = new stdClass();
  foreach ($bedrock_user as $key => $value) {
    $update_user->$key = $value;
  }
  $user_data = new stdClass();
  fnet_bedrock_check_field_lengths($update_user);
  $user_data->user = $update_user;
  $data = json_encode($user_data);
  $result = fnet_bedrock_rest('PUT', $rest_method, $data);
  if ($result->code == 200) {
    $bedrock_user = new fnet_bedrock_user(json_decode($result->data));
    return $bedrock_user;
  }
  else {
    fnet_bedrock_log_failure($result, $data);
    return new fnet_bedrock_user(NULL);
  }
}

/**
 * Call Bedrock REST interface to delete a user in the database
 *
 * @param $bedrock_user
 * @return bool
 */
function fnet_bedrock_delete_user($bedrock_user) {
  $rest_method = 'users/' . $bedrock_user->id;
  $result = fnet_bedrock_rest('delete', $rest_method);
  if ($result->code == 204) {
    db_delete('bedrock_user')
      ->condition('bedrock_user_id', $bedrock_user->id)
      ->execute();
    return TRUE;
  }
  else {
    fnet_bedrock_log_failure($result);
    return FALSE;
  }
}


/**
 * Create Drupal user profile from Bedrock user profile.
 *
 * @param $uid
 * @param \fnet_bedrock_user
 */
function fnet_bedrock_create_user_profile($uid, fnet_bedrock_user $bedrock_user) {
  $account = user_load($uid);
  $addressfield_data = array(
    'first_name' => $bedrock_user->first_name,
    'last_name' => $bedrock_user->last_name,
    'organisation_name' => $bedrock_user->company_name,
    'thoroughfare' => $bedrock_user->company_address1,
    'premise' => $bedrock_user->company_address2,
    'locality' => $bedrock_user->city,
    'administrative_area' => $bedrock_user->state_code,
    'postal_code' => $bedrock_user->postal_code,
    'country' => $bedrock_user->country_code,
  );
  $account->field_address[LANGUAGE_NONE][0] = $addressfield_data;
  $account->field_user_preferred_language[LANGUAGE_NONE][0]['value'] = $bedrock_user->language_code;
  $account->field_user_telephone[LANGUAGE_NONE][0]['value'] = $bedrock_user->phone_number;
  user_save($account);
  return $account;
}


/**
 * Create new Drupal user from Bedrock user.
 *
 * @param \fnet_bedrock_user $bedrock_user
 * @return \stdClass
 * @throws \Exception
 */
function fnet_bedrock_create_drupal_user(fnet_bedrock_user $bedrock_user) {
  // Generate a random drupal password.
  $pass_new = user_password(20);
  $name = fnet_profile_email_registration_name($bedrock_user->email);
  if (function_exists('email_registration_unique_username')) {
    $name = email_registration_unique_username($name, 0);
  }
  $user_information = array(
    'name' => $name,
    'pass' => $pass_new,
    'mail' => $bedrock_user->email,
    'init' => $bedrock_user->email,
    'status' => 1,
    'fnet_bedrock_authenticated' => TRUE,
    'language' => $bedrock_user->language_code,
    'timezone' => $bedrock_user->time_zone,
    'authname_fnet_bedrock' => $bedrock_user->email,
  );
  $account = user_save('', $user_information);

  watchdog('fnet_bedrock', 'New user %name/%mail created from the Bedrock user', array(
    '%name' => $account->name,
    '%mail' => $account->mail,
  ), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $account->uid . '/edit'));
  return $account;
}

/**
 * Log Bedrock call failure to Drupal watchdog.
 *
 * @param $result
 * @param null $data
 */
function fnet_bedrock_log_failure($result, $data = NULL) {
  if (!empty($data)) {
    if (module_exists('devel')) {
      dpm($data);
    }
    // TODO: What if the response is an array?
    $payload = json_decode($data);
    if (($payload) && ($payload->user)) {
      $payload->user->password = '*******';
    }
    $data = json_encode($payload);
  }
  $message = 'Bedrock REST returned error code: %code <br/>';
  $message .= 'REST method: %method <br/>';
  $message .= 'Data sent: %data_sent <br/>';
  $message .= 'Code: %code <br/>';
  $message .= 'Error: %error <br/>';
  $message .= 'Data: %data <br/>';
  if (isset($result->request)) {
    $request = explode(' ', $result->request);
    $rest_method = $request[0] . ' ' . $request[1];
    $variables = array(
      '%method' => $rest_method,
      '%data_sent' => $data,
      '%code' => $result->code,
      '%error' => $result->error,
      '%data' => $result->data,
    );

  }
  else {
    $message = 'No result information';
    $variables = array();
  }
  watchdog('fnet_bedrock', $message, $variables, WATCHDOG_NOTICE);
}

/**
 * @param $http_method
 * @param $rest_method
 * @param null $data
 * @return object
 */
function fnet_bedrock_rest($http_method, $rest_method, $data = NULL) {
  $href = variable_get('fnet_bedrock_url_scheme', 'https:') . '//';
  $href .= variable_get('fnet_bedrock_basic_auth_user', '') . ':';
  $href .= variable_get('fnet_bedrock_basic_auth_password', '') . '@';
  $href .= variable_get('fnet_bedrock_base_url', '');
  $href .= $rest_method;
  switch (strtoupper($http_method)) {
    case 'PUT':
      $headers = array('Content-Type' => 'application/json');
      $result = drupal_http_request($href, array(
        'headers' => $headers,
        'method' => 'PUT',
        'data' => $data
      ));
      break;
    case 'POST':
      $headers = array('Content-Type' => 'application/json');
      $result = drupal_http_request($href, array(
        'headers' => $headers,
        'method' => 'POST',
        'data' => $data
      ));
      break;
    case 'DELETE':
      $headers = array('Content-Type' => 'application/json');
      $result = drupal_http_request($href, array(
        'headers' => $headers,
        'method' => 'DELETE',
        'data' => $data
      ));
      break;
    case 'GET':
    default:
      $href .= '?' . fnet_bedrock_query_string_encode($data);
      $result = drupal_http_request($href, array('headers' => array()));
      break;
  }
  return $result;
}

/**
 * @param $email
 * @param $password
 * @return \fnet_bedrock_user
 */
function fnet_bedrock_make_bedrock_user($email, $password) {
  $uid = db_query("SELECT uid FROM {users} WHERE mail = :mail LIMIT 1", array(':mail' => $email))->fetchField();

  $account = user_load($uid);
  $addressfield_data = $account->field_address[LANGUAGE_NONE][0];
  $bedrock_user = new fnet_bedrock_user();
  $bedrock_user->email = $email;
  $bedrock_user->password = $password;
  $bedrock_user->time_zone = (!empty($account->timezone)) ? $account->timezone : 'UTC';
  if ($account) {
    $bedrock_user->first_name = $addressfield_data['first_name'];
    $bedrock_user->middle_name = '';
    $bedrock_user->last_name = $addressfield_data['last_name'];
    $bedrock_user->company_name = $addressfield_data['organisation_name'];
    $bedrock_user->company_address1 = $addressfield_data['thoroughfare'];
    $bedrock_user->company_address2 = $addressfield_data['premise'];
    $bedrock_user->city = $addressfield_data['locality'];
    $bedrock_user->state_code = $addressfield_data['administrative_area'];
    $bedrock_user->postal_code = $addressfield_data['postal_code'];
    $bedrock_user->country_code = $addressfield_data['country'];
    $bedrock_user->language_code = fnet_common_get_field_value('user', $account, 'field_user_preferred_language');
    $bedrock_user->phone_number = fnet_common_get_field_value('user', $account, 'field_user_telephone');
  }
  return $bedrock_user;
}

/**
 * Implements hook_form_alter().
 */
function fnet_bedrock_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'fnet_profile_profile_edit_form':
      $form['#submit'][] = 'fnet_bedrock_fnet_profile_profile_edit_form_submit';
      break;
  }
}

/**
 * Implementation of hook_submit for the user profile form
 * @param $form
 * @param $form_state
 */
function fnet_bedrock_fnet_profile_profile_edit_form_submit($form, &$form_state) {
  $account = $form_state['#user'];
  $bedrock_user = fnet_bedrock_get_user($account->mail);
  $bedrock_user->time_zone = (!empty($account->timezone)) ? $account->timezone : 'UTC';
  $bedrock_user->first_name = $form_state['values']['first_name'];
  $bedrock_user->middle_name = '';
  $bedrock_user->last_name = $form_state['values']['last_name'];
  $bedrock_user->company_name = $form_state['values']['company'];
  $bedrock_user->company_address1 = $form_state['values']['thoroughfare'];
  $bedrock_user->company_address2 = $form_state['values']['premise'];
  $bedrock_user->city = $form_state['values']['city'];
  $bedrock_user->state_code = $form_state['values']['province'];
  $bedrock_user->postal_code = $form_state['values']['postal_code'];
  $bedrock_user->country_code = $form_state['values']['country'];
  $bedrock_user->phone_number = $form_state['values']['phone'];
  if (empty($bedrock_user->id)) {
    //todo: should we do an insert here with a dummy password and force user to change password at next login?
    return;
  }
  else {
    fnet_bedrock_update_user($bedrock_user);
  }
}

/**
 * @param $bedrock_user
 */
function fnet_bedrock_check_field_lengths(&$bedrock_user) {
  foreach ($bedrock_user as $field => &$value) {
    switch ($field) {
      case 'language_code':
        $value = fnet_bedrock_trim_string($value, 5);
        break;
      case 'country_code':
        $value = fnet_bedrock_trim_string($value, 3);
        break;
      case 'postal_code':
        $value = fnet_bedrock_trim_string($value, 15);
        break;
      case 'company_name':
        $value = fnet_bedrock_trim_string($value, 255);
        break;
      case 'company_address1':
        $value = fnet_bedrock_trim_string($value, 255);
        break;
      case 'company_address2':
        $value = fnet_bedrock_trim_string($value, 255);
        break;
      case 'city':
        $value = fnet_bedrock_trim_string($value, 255);
        break;
      case 'state_code':
        $value = fnet_bedrock_trim_string($value, 6);
        break;
      case 'phone_number':
        if (strlen($value) > 15) {
          $value = str_replace(' ', '', $value);
          if (strlen($value) > 15) {
            $value = fnet_bedrock_trim_string($value, 15);
          }
        }
        break;
      default:
        break;
    }
  }
}

/**
 * @param $value
 * @param $length
 * @return string
 */
function fnet_bedrock_trim_string($value, $length) {
  if (!empty($value)) {
    if ($value == 'false') {
      $value = '';
    }
    $value = substr($value, 0, $length);
  }
  return $value;
}

/**
 * Parse an array into a valid urlencoded query string.
 *
 * @param $query
 *   The array to be processed e.g. $_GET.
 * @param $exclude
 *   The array filled with keys to be excluded. Use parent[child] to exclude
 *   nested items.
 * @param $parent
 *   Should not be passed, only used in recursive calls.
 * @return string
 *   An urlencoded string which can be appended to/as the URL query string.
 */
function fnet_bedrock_query_string_encode($query, $exclude = array(), $parent = '') {
  $params = array();

  foreach ($query as $key => $value) {
    $key = rawurlencode($key);
    if ($parent) {
      $key = $parent . '[' . $key . ']';
    }

    if (in_array($key, $exclude)) {
      continue;
    }

    if (is_array($value)) {
      $params[] = fnet_bedrock_query_string_encode($value, $exclude, $key);
    }
    else {
      $params[] = $key . '=' . rawurlencode($value);
    }
  }

  return implode('&', $params);
}
