<?php

/**
 * @file
 * versiv_configurator.module
 */

/**
 * Large chunks of this module, the email stuff especially, are a direct port
 * from the old Email Page module, with minimal changes made for compatibility
 * reasons. If the code sucks, it's not my fault. Feel free to change it for
 * the better.
 *
 * To make up for it, here is my recipe for a good chicken rub. Use it at your
 * next BBQ.
 * TODO: Add BBQ Chicken Recipe.
 *
 * - Ryan Ositis, 4/24/2018
 */

/**
 * Implementation of hook_menu().
 *
 * @return mixed
 */
function versiv_configurator_menu() {
  $items = [];
  $items['email_page/submit'] = [
    'title' => 'E-mail send page',
    'page callback' => '_versiv_configurator_email_submit',
    'access callback' => 'user_access',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  $items['admin/fnet/versiv_configurator'] = [
    'title' => 'Versiv Configurator',
    'description' => "Settings for the Versiv Configurator.",
    'page callback' => 'drupal_get_form',
    'page arguments' => ['versiv_configurator_admin_form'],
    'access callback' => 'user_access',
    'access arguments' => ['administer email page'],
    'type' => MENU_NORMAL_ITEM,
    'tab_parent' => 'admin/fnet',
    'file' => 'versiv_configurator.admin.inc',
  ];
  return $items;
}

/**
 * Imp
 * @return array
 */
function versiv_configurator_permission() {
  return [
    'administer versiv configurator' => [
      'title' => t('Administer Versiv Configurator'),
      'description' => t('Access Versiv Configurator administrative settings.'),
    ],
  ];
}


/**
 * Implements hook_preprocess_node().
 * @param $variables
 */
function versiv_configurator_preprocess_node(&$variables) {
  // The node types used for Versiv Kit Configurator pages.
  $types = [
    'page_region',
    'page_region_language',
  ];

  // Current node.
  $node = $variables['node'];

  // Determine if current node is used for Versiv Kit Configurator.
  if (in_array($node->type, $types) && (stripos($node->title, "Versiv Kit Configurator") !== FALSE)) {
    $options = ['scope' => 'footer'];
    drupal_add_js(drupal_get_path('module', 'versiv_configurator') . '/js/versiv_configurator.js', $options);
    drupal_add_css(drupal_get_path('module', 'versiv_configurator') . '/css/versiv_reset.min.css');
    drupal_add_css(drupal_get_path('module', 'versiv_configurator') . '/css/versiv_configurator.css', ['media' => 'screen']);
    drupal_add_css(drupal_get_path('module', 'versiv_configurator') . '/css/versiv_configurator.print.css', ['media' => 'print']);
    drupal_add_css(drupal_get_path('module', 'versiv_configurator') . '/css/versiv_configurator.email.css', ['media' => 'screen']);
  }
}

/**
 * Helper function to send email from the Versiv Configurator.
 * A direct port from the Email Page module.
 *
 * TODO: ARGH. This is a good example of 'happy path' programming. Undefined variables may exist.
 */
function _versiv_configurator_email_submit(){
  watchdog('Versiv Configurator', 'Email function was called!');
  // This part determines who is sending the message. Did it come from an approved domain?

  $referrer = $_SERVER['HTTP_REFERER'];

  $matches = [];
  $referring_domain = preg_match('@^(?:http://|https://)?([^/]+)@i', $referrer, $matches);
  $referring_domain = explode('.', $matches[1], 2);
  $referring_domain = strtolower($referring_domain[1]);
  if (($referring_domain !== 'flukenetworks.com') && ($referring_domain !== 'pantheonsite.io')){
    drupal_set_message('Submissions not allowed from this domain.');
    drupal_goto($referrer);
  }

  if ($_SERVER['REQUEST_METHOD'] !== 'POST'){
    drupal_set_message('You must post to this URL.', 'error');
    drupal_goto($referrer);
  }


  // TODO: This sucks. Put in the code and internationalize with t(). Or something.
  $regLang = $_COOKIE['regLang'];
  $language = strtolower(substr($regLang, 0, 2));
  $footer = variable_get("email_page_footer_$language", '');
  if ($footer == ''){
    $footer = variable_get("email_page_footer_en", '');
  }

// This check seems like a good idea, but the hidden emailtoken field may only work with HTML5
// 'form' attribute
//  if (!isset($_POST['emailtoken']) || !drupal_valid_token($_POST['emailtoken'])){
//    drupal_set_message('Invalid email token!', 'error');
//    drupal_goto($referrer);
//  }
  if (isset($_POST['emailto'])){
    $to = $_POST['emailto'];
    if (!valid_email_address($to)){
      drupal_set_message('Email address appears invalid.', 'error');
      drupal_goto($referrer);
    }
  }
  if (isset($_POST['emailcc'])){
    $cc = $_POST['emailcc'];
  } else {
    $cc = '';
  }
  if (isset($_POST['emailbcc'])){
    $bcc = $_POST['emailbcc'];
  } else {
    $bcc = '';
  }
  if (isset($_POST['emailfrom'])){
    $from = $_POST['emailfrom'];
  } else {
    $from = '';
  }
  if (isset($_POST['emailsubject'])){
    $subject = $_POST['emailsubject'];
  } else {
    $subject = '';
  }
  if (isset($_POST['emailbody'])){
    $body = $_POST['emailbody'];
  }
  $message = [];
  $template = variable_get('email_page_template', '');

  if (strpos($template, '%body') !== false){
    $body = strtr($template, ['%body'=> $body, '%footer' => $footer]);
  }
  $message['subject'] = $subject;
  $message['from'] = $from;
  $message['to'] = $to;
  $message['body'] = $body;

  $headers = [
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html;charset=utf-8',
  ];
  $headers['From'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $message['from'] = $from;
  if ($cc){
    $headers['Cc'] = $cc;
  }
  if ($bcc){
    $headers['Bcc'] = $bcc;
  }
  $message['headers'] = $headers;
  // If 'Return-Path' isn't already set in php.ini, we pass it separately as an
  // additional parameter instead of in the header.
  if (isset($message['headers']['Return-Path']) && !ini_get('safe_mode')) {
    $return_path_set = strpos(ini_get('sendmail_path'), ' -f');
    if (!$return_path_set) {
      $message['Return-Path'] = $message['headers']['Return-Path'];
      unset($message['headers']['Return-Path']);
    }
  }

  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.

//  $result = drupal_mail_send($message);
  // TODO: Remove FNET Helper dependency. Replace with drupal_mail().
  $result = fnet_helper_mail_send($message, true);

  if ($result == true) {
    watchdog('Versiv Configurator', 'Email sent - subject: %subject from: %from to: %to', ['%from' => $message['from'], '%to' =>$message['to'], '%subject' => $message['subject']],WATCHDOG_INFO);
  } else {
    watchdog('Versiv Configurator', 'Error sending mail - subject: %subject from: %from to: %to', ['%from' => $message['from'], '%to' =>$message['to'], '%subject' => $message['subject']],WATCHDOG_ERROR);
  }
  drupal_goto($referrer);
}

