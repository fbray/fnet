<?php

/**
 * @file
 * Code for news events.
 */

include_once 'fnet_news_events.features.inc';

/**
 * Implements hook_menu().
 */
function fnet_news_events_menu() {

  $items = array();

  $items['news-events'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'News and Events',
    'access arguments' => array('access content'),
    'page callback' => 'news_events',
  );
  $items['news-list'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'News',
    'access arguments' => array('access content'),
    'page callback' => 'get_news_html',
  );

  $items['news-events/training'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Training',
    'access arguments' => array('access content'),
    'page callback' => 'get_event_html',
    'page arguments' => array('Training'),
  );

  $items['news-events/tradeshows'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Trade Shows',
    'access arguments' => array('access content'),
    'page callback' => 'get_event_html',
    'page arguments' => array('Trade Shows'),
  );
  $items['news-events/webcasts'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Webcasts',
    'access arguments' => array('access content'),
    'page callback' => 'get_event_html',
    'page arguments' => array('Webcasts'),
  );
  $items['news-events/workshops'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Workshops',
    'access arguments' => array('access content'),
    'page callback' => 'get_event_html',
    'page arguments' => array('Workshops'),
  );
  $items['news-events/seminars'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Seminars',
    'access arguments' => array('access content'),
    'page callback' => 'get_event_html',
    'page arguments' => array('Seminars'),
  );

  return $items;
}

/**
 * Callback for /news-events page.
 */
function news_events() {
  drupal_set_title(t('News and Events'));
  return '';
}

/**
 * Implements hook_entity_view().
 */
function fnet_news_events_entity_view($entity, $type, $view_mode, $langcode) {
  if ($view_mode == 'teaser') {
    if (($type == 'node') && (in_array($entity->type, array(
      'press_release',
      'award',
    )))) {

      $entity->content['links'] = array();
      $entity->content['title'] = array(
        '#theme' => 'link',
        '#weight' => 0,
        '#text' => $entity->title,
        '#path' => drupal_get_path_alias('node/' . $entity->nid),
        '#view_mode' => 'teaser',
        '#options' => array(
          'attributes' => array(),
          'html' => TRUE,
        ),
      );
      $entity->body = array();

      $entity->location = array();
      $entity->locations = array();
      $entity->content['locations'] = array();

      $entity->title = '';
      $entity->name = '';
      $entity->uid = '';
      $entity->field_award_link = array();

    }

    if (($type == 'node') && ($entity->type == 'event')) {

      $entity->field_workshop_reglink = array();
      $entity->location = array();
      $entity->locations = array();
      $entity->content['links'] = array();
      $entity->content['locations'] = array();
      $entity->content['title'] = array(
        '#theme' => 'link',
        '#weight' => 0,
        '#text' => $entity->title,
        '#path' => drupal_get_path_alias('node/' . $entity->nid),
        '#view_mode' => 'teaser',
        '#options' => array(
          'attributes' => array(),
          'html' => TRUE,

        ),
      );
      $entity->body = array();
      $entity->title = '';

    }
  } // end if teaser
}

/**
 * Implements hook_block_info().
 */
function fnet_news_events_block_info() {

  $blocks = array();
  $blocks['news_block'] = array(
    'info' => t('News-Events: Press Release (News)'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'region' => 'content_column_one',
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'news-events',
    'weight' => 0,
  );

  $blocks['awards_block'] = array(
    'info' => t('News-Events: Awards'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'region' => 'content_column_one',
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'news-events',
    'weight' => 2,
  );

  $blocks['webcasts_block'] = array(
    'info' => t('News-Events: Webcasts'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'region' => 'content_column_one',
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'news-events',
    'weight' => 4,
  );

  $blocks['training_block'] = array(
    'info' => t('News-Events: Training'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'region' => 'content_column_three',
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'news-events',
    'weight' => 0,
  );

  $blocks['workshops_block'] = array(
    'info' => t('News-Events: Workshops'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'region' => 'content_column_three',
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'news-events',
    'weight' => 2,
  );

  $blocks['seminars_block'] = array(
    'info' => t('News-Events: Seminars'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'region' => 'content_column_three',
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'news-events',
    'weight' => 4,
  );

  $blocks['tradeshows_block'] = array(
    'info' => t('News-Events: Trade Shows'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'region' => 'content_column_three',
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'news-events',
    'weight' => 6,
  );

  return $blocks;

}

/**
 * Implements hook_block_view().
 */
function fnet_news_events_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'news_block':
      $block['subject'] = t('News');
      $more = l(t('More News'), 'news-list');
      $block['content'] = get_news_html(5) . $more;
      break;

    case 'awards_block':
      $block['subject'] = t('Awards');
      $more = l(t('More Awards'), 'awards-list');
      $block['content'] = get_awards_html(5) . $more;
      break;

    case 'webcasts_block':
      $block['subject'] = t('Webcasts');
      $more = l(t('On Demand Webcasts'), 'support/technical-docs/webcasts');
      $block['content'] = get_event_html('Webcasts', 5) . $more;
      break;

    case 'training_block':
      $block['subject'] = t('Training');
      $content = get_event_html('Training', 5);
      $more = (!empty($content)) ? l(t('More Training'), 'news-events/training') : '';
      $block['content'] = $content . $more;
      break;

    case 'workshops_block':
      $block['subject'] = t('Workshops');
      $content = get_event_html('Workshops', 5);
      $more = (!empty($content)) ? l(t('More workshops'), 'news-events/workshops') : '';
      $block['content'] = $content . $more;
      break;

    case 'seminars_block':
      $block['subject'] = t('Seminars');
      $content = get_event_html('Seminars', 5);
      $more = (!empty($content)) ? l(t('More Seminars'), 'news-events/seminars') : '';
      $block['content'] = $content . $more;
      break;

    case 'tradeshows_block':
      $block['subject'] = t('Trade Shows');
      $block['content'] = get_event_html('Trade Shows', 5);
      break;

  }
  return $block;
}

/**
 * Callback for /news-list page.
 *
 * TODO: Replace this with a View.
 *
 * @param int $range
 *   The number of items to show.
 *
 * @return string
 *   The rendered node objects for display.
 */
function get_news_html($range = NULL) {
  $siteReg = module_invoke('fnet_helper', 'site_region');
  $regLang = $siteReg["regLang"];

  if ($range) {
    $cache_name = 'news_block_' . $regLang . '_' . $range;
  }
  else {
    $cache_name = 'news_block_' . $regLang;
  }

  $cache = cache_get($cache_name, 'cache_block');

  if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
    return $cache->data;
  }
  else {
    $nodes = node_load_multiple(get_news_nids($regLang, $range));
    $rendered = '';
    if (count($nodes) > 0) {
      $nodes_to_render = node_view_multiple($nodes, 'teaser');
      $rendered = render($nodes_to_render);
    }
    cache_set($cache_name, $rendered, 'cache_block', time() + 600);
    return $rendered;
  }
}

/**
 * Helper function to retrieve the appropriate node ids.
 */
function get_news_nids($regLang, $range = NULL) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'press_release')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_language_region', 'value', $regLang, '=')
    ->fieldOrderBy('field_release_date', 'value', 'DESC');
  if ($range) {
    $query->range(0, $range);
  }
  $entities = $query->execute();

  if (isset($entities['node'])) {
    return array_keys($entities['node']);
  }
  else {
    return [];
  }
}

/**
 * Callback for /awards-list page.
 *
 * TODO: Replace this with a View.
 *
 * @param int $range
 *   The number of items to show.
 *
 * @return string
 *   The rendered node objects for display.
 */
function get_awards_html($range = NULL) {
  $siteReg = module_invoke('fnet_helper', 'site_region');
  $regLang = $siteReg["regLang"];

  if ($range) {
    $cache_name = 'awards_block_' . $regLang . '_' . $range;
  }
  else {
    $cache_name = 'awards_block_' . $regLang;
  }

  $cache = cache_get($cache_name, 'cache_block');

  if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
    return $cache->data;
  }
  else {
    $nodes = node_load_multiple(get_awards_nids($regLang, $range));
    $rendered = '';
    if (count($nodes) > 0) {
      $nodes_to_render = node_view_multiple($nodes, 'teaser');
      $rendered = render($nodes_to_render);
    }
    cache_set($cache_name, $rendered, 'cache_block', time() + 600);
    return $rendered;
  }
}

/**
 * Helper function to get the appropriate node ids.
 *
 * TODO: Replace this with a View.
 */
function get_awards_nids($regLang, $range = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'award')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_language_region', 'value', $regLang, '=')
    ->fieldOrderBy('field_award_date', 'value', 'DESC');
  if ($range) {
    $query->range(0, $range);
  }
  $entities = $query->execute();

  if (isset($entities['node'])) {
    return array_keys($entities['node']);
  }
  else {
    return array();
  }
}

/**
 * Callback for /news-events/* pages/blocks.
 *
 * TODO: Replace this with a View.
 *
 * @param string $type
 *   The type of event nodes to display.
 * @param int $range
 *   The number of items to show.
 *
 * @return string
 *   The rendered node objects for display.
 */
function get_event_html($type, $range = NULL) {

  $siteReg = module_invoke('fnet_helper', 'site_region');
  $regLang = $siteReg["regLang"];

  if ($range) {
    $cache_name = 'events_block_' . $type . $regLang . '_' . $range;
  }
  else {
    $cache_name = 'events_block_' . $type . $regLang;
  }

  $cache = cache_get($cache_name, 'cache_block');

  if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
    return $cache->data;
  }
  else {

    $event_tid = 0;
    $tids = taxonomy_get_term_by_name($type, 'event_types');
    foreach ($tids as $term) {
      $event_tid = $term->tid;
    }

    $nodes = node_load_multiple(get_event_nids($type, $event_tid, $regLang, $range));

    $rendered = '';
    if (count($nodes) > 0) {
      $nodes_to_render = node_view_multiple($nodes, 'teaser');
      $rendered = render($nodes_to_render);
    }

    cache_set($cache_name, $rendered, 'cache_block', time() + 600);
    return $rendered;
  }
}

/**
 * Helper function to retrieve the appropriate node ids.
 *
 * TODO: Replace this with a View.
 */
function get_event_nids($type, $tid, $regLang, $range = 50) {

  $today = date('Y-m-d 00:00:00');
  $today = str_replace(' ', 'T', $today);
  $expired_nids = array();

  // Needs future date, or no date:
  // Webcasts, Training, Trade Shows, Seminars, Workshops.
  $query = new EntityFieldQuery();
  $expired_nodes = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'event')
    ->fieldCondition('field_event_date', 'value', $today, '<')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->execute();

  if (isset($expired_nodes['node'])) {
    $expired_nids = array_keys($expired_nodes['node']);
  }

  // We want items with either a future date, or no date set
  // Queries lack a good 'OR' so as workaround:
  // * Get all NIDs for items with a date in the past
  // * Do another query for all items
  // * Remove the items in the first query from the second query.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'event')
    ->propertyCondition('nid', $expired_nids, 'NOT IN')
    ->fieldCondition('field_language_region', 'value', $regLang, '=')
    ->fieldCondition('field_event_types', 'target_id', $tid)
    ->propertyCondition('status', NODE_PUBLISHED);
  if ($type == 'Award') {
    $query->fieldOrderBy('field_award_date', 'value', 'ASC');
    $query->propertyOrderBy('title', 'ASC');
  }
  else {
    $query->propertyOrderBy('title', 'ASC');
  }

  if ($range) {
    $query->range(0, $range);
  }
  $entities = $query->execute();

  if (isset($entities['node'])) {
    $return = array();
    foreach ($entities['node'] as $nid => $node) {
      if (!in_array($nid, $expired_nids)) {
        $return[$nid] = $nid;
      }
    }

    return $return;
  }
  else {
    return array();
  }
}
