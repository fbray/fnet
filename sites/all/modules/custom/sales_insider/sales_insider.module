<?php
/**
 * Created by PhpStorm.
 * User: ryanositis
 * Date: 1/4/18
 * Time: 1:13 PM
 */

/**
 * @file
 * Provides a protected extranet to the Fluke Networks website
 * called 'Sales Insider'.
 */

/**
 * Implements hook_permission().
 *
 * @return array
 */
function sales_insider_permission() {
    return array(
        'administer extranet' => array(
            'title' => t('Administer Extranet'),
            'description' => t('Access Extranet Administration pages.'),
        ),
        'access extranet' => array(
            'title' => t('Access Extranet'),
            'description' => t('Allow most basic Extranet access. Other restriction types will also usually be used.'),
        ),
    );
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function sales_insider_menu() {
    $items = [];

    // Public facing paths start with 'extranet'
    $items['extranet'] = [
        'menu_name' => 'extranet',
        'title' => t('Sales Insider'),
        'page callback' => '_sales_insider_initial_content',
        'access arguments' => ['access content'],
        'type' => MENU_CALLBACK,
    ];

    $items['extranet/request-received'] = [
        'title' => t('Sales Insider Access Request Received'),
        'description' => t('Thank you page for Access Requests'),
        'page callback' => '_sales_insider_access_request_received',
        'access arguments' => ['access content'],
        'type' => MENU_CALLBACK,
    ];

    $items['extranet-access-denied'] = [
        'title' => t('Access Denied'),
        'description' => t('Access Denied page'),
        'page callback' => '_sales_insider_access_denied',
        'access arguments' => ['access content'],
        'type' => MENU_CALLBACK,
    ];

    $items['extranet/tools'] = [
        'title' => t('Sales Tools'),
        'description' => t('Extranet Sales Tools'),
        'page callback' => '_sales_insider_sales_tool_page',
        'access arguments' => ['access extranet'],
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'extranet',
    ];

    $items['extranet/services'] = [
        'title' => t('Services & Support'),
        'description' => t('Extranet Services & Support'),
        'page callback' => '_sales_insider_services_page',
        'access arguments' => ['access extranet'],
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'extranet',
    ];

    // box item download.  get box, then item url
    // send back as redirect location
    $items['extranet/download/%/%'] = [
        'menu_name' => 'extranet',
        'title' => 'Photo Download',
        'page callback' => '_sales_insider_download_gallery_asset',
        'page arguments' => [2, 3],
        'access arguments' => ['access content'],
        'type' => MENU_CALLBACK,
    ];

    /* TODO: This seems to be unused. Deprecated?
    $items['extranet/node/%'] = [
        'menu_name' => 'extranet',
        'page callback' => '_sales_insider_node_page',
        'page arguments' => [2],
        'title callback' => '_fextranet_node_title',
        'title arguments' => [2],
        'access callback' => '_fextranet_node_access',
        'access arguments' => [2],
        'type' => MENU_CALLBACK,
    ];
    */

    // Autocomplete callback
    $items['productname/autocomplete'] = [
        'page callback' => '_sales_insider_products_autocomplete',
        'access arguments' => ['access content'],
        'type' => MENU_CALLBACK
    ];

    // Extranet Administrative Pages
    $items['admin/fnet/extranet'] = [
        'title' => t('Extranet'),
        'description' => t('Adminstrative functions for managing the Extranet'),
        'access arguments' => ['administer extranet'],
        'page callback' => 'system_admin_menu_block_page',
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
    ];

    $items['admin/fnet/extranet/instructions'] = [
        'title' => t('Instruction Text'),
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'drupal_get_form',
        'page arguments' => ['sales_insider_admin_instructions_form'],
        'access arguments' => ['administer extranet'],
        'file' => 'sales_insider.admin.inc'
    ];

    /* Web service config page */
    $items['admin/fnet/extranet/salesforce'] = [
        'title' => t('Configure Salesforce Connection'),
        'description' => t('Settings for connecting Salesforce to the Extranet.'),
        'file' => 'sales_insider.admin.inc',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['_salesforce_admin_salesforce_config'],
        'access arguments' => ['administer extranet'],
        'type' => MENU_NORMAL_ITEM,
    ];

    /* Web service callback for new Salesforce-enabled processing */
    $items['insider/v1/post'] = [
        'page callback' => '_fextranet_insider_processing',
        'access arguments' => ['access content'],
        'type' => MENU_CALLBACK,
    ];

    return $items;
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function sales_insider_theme() {
  $base = array(
    'path' => drupal_get_path('module', 'sales_insider') . '/theme',
  );
  return array(
    'product_assets' => $base + array(
        'template' => 'product_assets',
        'variables' => array(
          'elements' => NULL
        ),
      ),
    'sales_insider_default_page_menu_item' => $base + array(
        'template' => 'sales_insider_default_page_menu_item',
        'variables' => array('items' => NULL),
      ),
    'sales_insider_request_thanks_message' => $base + array(
        'template' => 'sales_insider_request_thanks_message',
        'variables' => array(),
      ),
  );
}

/**
 * Implements hook_node_info().
 *
 * @return array
 */
function sales_insider_node_info() {
  $types = array(
    'extranet_page' => array(
      'name' => t('Extranet Page'),
      'base' => 'node_content',
      'description' => t('Extranet Page'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => t('Extranet Page'),
    ),
    'extranet_news' => array(
      'name' => t('Extranet News'),
      'base' => 'node_content',
      'description' => t('Extranet News: Sales Alerts and Announcements'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => t('Extranet News: Sales Alerts and Announcements'),
    ),
    'extranet_promotion' => array(
      'name' => t('Extranet Promotion'),
      'base' => 'node_content',
      'description' => t('Extranet Promotions, optional start and end date.'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => t('Extranet Promotions, optional start and end date.'),
    ),
  );
  return $types;
}

/**
 * ---------- PAGE CALLBACKS ---------------
 */

/**
 * Initial content for the Extranet page.
 *
 * @return array|mixed|null
 * @throws \Exception
 */
function _sales_insider_initial_content() {
  global $user;  // Get the current user.
  $account = user_load($user->uid);

  /*
   * Here we go with the logic needed to provide a response based on that status of the user.
   * First off, s the User logged in?
   */
  if (user_is_logged_in()) {
    // Yes? Excellent. Let the user in.
    if (user_access('access_extranet')) {  // If the user has access to the Extranet...
      $content = variable_get('extranet_instructions_main', '');
      return $content;
    }

    // No? Well, that's fine. More checking is necessary.
    else {
      // Does the user have any pending requests?
      $pending_query = "SELECT requested_on, blocked_on, status, added_on FROM group_membership WHERE uid = :uid";
      $access_requests = db_query($pending_query, array(':uid' => $user->uid))->fetchAssoc();

      // A request has been made and is pending.
      if ($access_requests) {
        $requested_on = !empty($access_requests['requested_on']) ? format_date($access_requests['requested_on'], 'medium', ''): NULL;
        $blocked_on = !empty($access_requests['blocked_on']) ? format_date($access_requests['blocked_on'], 'medium', ''): NULL;
        $added_on = !empty($access_requests['blocked_on']) ? format_date($access_requests['added_on'], 'medium', ''): NULL;
        $status = $access_requests['status'];

        // Display the 'You requested access on X, but it
        if (!empty($requested_on)) {
          $message = 'You requested access to Sales Insider on @request_date ';
          if ($status == 'blocked') { // has been denied.
            // Re-request Access/Resend Request option
            $message .= 'but unfortunately your request was denied by an administrator on @blocked_date.';
          }
          else {
            // has not yet been approved.'
            $message .= 'but your request has not yet been approved.';
          }
          $localized_message = t($message, array(
            '@request_date' => $requested_on,
            '@blocked_date' => $blocked_on
          ));
        }
        elseif (!empty($added_on)) {
          // if there is nothing in the requested_on field, the user was added manually.
          $message = 'You were granted access to Sales Insider on @added_date ';
          if ($status == 'blocked') { // has been denied.
            // Re-request Access/Resend Request option
            $message .= 'but unfortunately your access was blocked by an administrator on @blocked_date.';
          }
          else {
            // has not yet been approved.'
            $message .= 'but something has gone wrong.';
          }
          $localized_message = t($message, array(
            '@added_date' => $added_on,
            '@blocked_date' => $blocked_on
          ));
        }

        // Give a default message,
        else {
          // TODO: Language?
          $localized_message = theme('sales_insider_request_thanks_message');
        }
        return $localized_message;
      }

      // ...or they just haven't requested access yet.
      else {
        // Load the Request Access Form
        module_load_include('inc', 'sales_insider', 'includes/access_request.form');
        // Get the region by looking for the country in the user address field.
        $address = field_get_items('user', $account, 'field_address', LANGUAGE_NONE);
        dpm($address);
        $country = $address[0]['country'];

        // Get the Groud ID of the Sales Insider Region group that has this country.
        $group = _sales_insider_get_group_by_country($country);

        // TODO: Modify the Request Form to deal with multiple groups, if only as a failover.

        $request_form = drupal_get_form('sales_insider_request_form', $group);
        return $request_form;
      }
    }
  }
  // The user is not logged in. Give them the form.
  else {
    $login_form = drupal_get_form('user_login');
    $url = urldecode($login_form['#action']);
    // If there is an existing query string, extract those values.
    $query_string_values = array();
    parse_str( parse_url($url, PHP_URL_QUERY), $query_string_values );
    $query_string_values['destination'] = 'extranet';
    // Trim the query off the URL to be able to rebuild.
    $url = preg_replace('/\?.*/', '', $url);
    // This puts in the '?destination=extranet'.
    $action = url($url, array('query' => $query_string_values));
    $login_form['#action'] = $action; // URL Decoding to clean up some weirdness.
    $login_form['#redirect'] = 'extranet';
    $login_form['#after_build'] = array();
    return $login_form;
  }
}

/**
 * Implements hook_views_api().
 *
 * @return array
 */
function sales_insider_views_api() {
    return [
        'api' => 3.0,
        'path' => drupal_get_path('module', 'sales_insider') . '/views',
    ];
}

/**
 * wrappers to Group functions
 */
/**
 * Group Access wrapper.
 *
 * @param $gid
 * @return bool
 */
function _sales_insider_group_access($gid) {
    $group = group_load($gid);
    if ($group) {
        return group_access('access member overview', $group);
    }
    return FALSE;
}

/**
 * @param $gid
 * @param $node_type
 * @return array|bool
 */
function _sales_insider_gnode_node_add($gid, $node_type) {
    $group = group_load($gid);
    if ($group) {
        return gnode_node_add($group, $node_type);
    }
    return FALSE;
}

/**
 * @param $gid
 * @param $node_type
 * @return bool
 */
function _sales_insider_gnode_add_node_access($gid, $node_type) {
    $group = group_load($gid);
    if ($group) {
        return gnode_add_node_access($group, $node_type);
    }
    return FALSE;
}

/**
 * Helper function to find which Sales Insider Region group is assigned what country.
 * Assumes a country is only in 1 group.
 *
 * TODO: Returns the newest/highest gid if multiple. This can cause issues. Needs fixing.
 *
 * @param $country
 * @return bool|\Group
 */
function _sales_insider_get_group_by_country($country) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'group')
    ->fieldCondition('field_extranet_group_countries', 'value', $country , '=');
  $query->propertyOrderBy('gid', 'DESC');
  $query->range(0,1);
  $entity_array = $query->execute();

  if ($entity_array) {
    $group_num = key( $entity_array['group']);
    $group = group_load($group_num);
    return $group;
  } else {
    return FALSE;
  }
}

/**
 * Implements hook_variable_group_info().
 * Defines the variable group.
 *
 * @return array
 */
function sales_insider_variable_group_info() {
    $groups = array();
    $groups['sales_insider'] = array(
        'title' => t('Sales Insider Extranet'),
        'description' => t('Extranet variables'),
        'access' => 'administer extranet',
    );

    return $groups;
}

/**
 * Implements hook_variable_info().
 *
 * @param $options
 * @return array
 */
function sales_insider_variable_info($options) {
    $variable = array();

    $variable['extranet_instructions_main'] = array(
        'type' => 'string',
        'title' => t('Extranet Main Instructions', array(), $options),
        'description' => t('Instructions given to users on the main Sales Insider page.'),
        'group' => 'sales_insider',
        'default' => '',
    );

    $variable['extranet_instructions_sales_tools'] = array(
        'type' => 'string',
        'title' => t('Extranet Sales Tools Instructions', array(), $options),
        'description' => t('Instructions given to users on the Sales Insider Extranet Sales Tools page.'),
        'group' => 'sales_insider',
        'default' => '',
    );

    $variable['extranet_instructions_services'] = array(
        'type' => 'string',
        'title' => t('Extranet Services Instructions', array(), $options),
        'description' => t('Instructions given to users on the Sales Insider Services page.'),
        'group' => 'sales_insider',
        'default' => '',
    );

    $variable['extranet_instructions_access_denied'] = array(
        'type' => 'string',
        'title' => t('Extranet Access Denied', array(), $options),
        'description' => t('Message given when user is denied access to the Sales Insider section.'),
        'group' => 'sales_insider',
        'default' => '',
    );

    $variable['extranet_instructions_request_access'] = array(
        'type' => 'string',
        'title' => t('Extranet Request Access', array(), $options),
        'description' => t('Message given when user needs to request access to the Sales Insider section.'),
        'group' => 'sales_insider',
        'default' => '',
    );

    return $variable;
}


/**
 * Implements hook_default_search_api_index().
 *
 * @return array
 */
function sales_insider_default_search_api_index() {
  $items = array();
  $items['extranet_index'] = entity_import('search_api_index', '{
    "name" : "Extranet Index",
    "machine_name" : "extranet_index",
    "description" : "A search index specifically for the Extranet search box.",
    "server" : "local_search",
    "item_type" : "node",
    "options" : {
      "datasource" : { "bundles" : [
          "digital_asset",
          "extranet_news",
          "extranet_page",
          "extranet_promotion"
        ]
      },
      "index_directly" : 0,
      "cron_limit" : "100",
      "fields" : {
        "author" : { "type" : "integer", "entity_type" : "user" },
        "body:value" : { "type" : "text" },
        "field_business_entity" : { "type" : "integer", "entity_type" : "taxonomy_term" },
        "field_dam_asset_type" : { "type" : "string" },
        "field_dam_document_id" : { "type" : "text" },
        "field_dam_industry" : { "type" : "list\\u003Cstring\\u003E" },
        "field_dam_language" : { "type" : "string" },
        "field_dam_parent" : { "type" : "integer", "entity_type" : "node" },
        "field_dam_related_product" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "node" },
        "field_digital_assets" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "node" },
        "field_edoc_subtitle" : { "type" : "text" },
        "field_media_gallery" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "node" },
        "field_products" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "node" },
        "group" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "group" },
        "search_api_access_node" : { "type" : "list\\u003Cstring\\u003E" },
        "search_api_language" : { "type" : "string" },
        "search_api_viewed" : { "type" : "text" },
        "status" : { "type" : "integer" },
        "title" : { "type" : "text", "boost" : "2.0" }
      },
      "data_alter_callbacks" : {
        "search_api_alter_bundle_filter" : {
          "status" : 1,
          "weight" : "-10",
          "settings" : { "default" : "1", "bundles" : [] }
        },
        "search_api_alter_language_control" : {
          "status" : 0,
          "weight" : "0",
          "settings" : { "lang_field" : "", "languages" : [] }
        },
        "search_api_alter_node_access" : { "status" : 1, "weight" : "0", "settings" : [] },
        "search_api_alter_node_status" : { "status" : 1, "weight" : "0", "settings" : [] },
        "search_api_alter_add_hierarchy" : {
          "status" : 1,
          "weight" : "0",
          "settings" : { "fields" : {
              "source:field_edoc_prod" : "source:field_edoc_prod",
              "source:field_dam_parent" : "source:field_dam_parent",
              "source:field_dam_related_product" : "source:field_dam_related_product"
            }
          }
        },
        "search_api_alter_add_viewed_entity" : {
          "status" : 1,
          "weight" : "0",
          "settings" : { "mode" : "search_result" }
        },
        "search_api_alter_add_url" : { "status" : 0, "weight" : "0", "settings" : [] },
        "search_api_alter_add_aggregation" : { "status" : 0, "weight" : "0", "settings" : [] },
        "search_api_metatag_alter_callback" : { "status" : 0, "weight" : "0", "settings" : [] }
      },
      "processors" : {
        "search_api_case_ignore" : {
          "status" : 1,
          "weight" : "0",
          "settings" : { "fields" : {
              "title" : true,
              "field_dam_asset_type" : true,
              "field_media_gallery" : true,
              "field_digital_assets" : true,
              "search_api_viewed" : true,
              "body:value" : true
            }
          }
        },
        "search_api_html_filter" : {
          "status" : 1,
          "weight" : "10",
          "settings" : {
            "fields" : { "title" : true, "search_api_viewed" : true, "body:value" : true },
            "title" : 0,
            "alt" : 1,
            "tags" : "h1 = 5\\r\\nh2 = 3\\r\\nh3 = 2\\r\\nstrong = 2\\r\\nb = 2\\r\\nem = 1.5\\r\\nu = 1.5"
          }
        },
        "search_api_tokenizer" : {
          "status" : 1,
          "weight" : "20",
          "settings" : {
            "fields" : { "title" : true, "search_api_viewed" : true, "body:value" : true },
            "spaces" : "[^[:alnum:]]",
            "ignorable" : "[\\u0027]"
          }
        },
        "search_api_stopwords" : {
          "status" : 0,
          "weight" : "30",
          "settings" : {
            "fields" : { "title" : true },
            "file" : "",
            "stopwords" : "but\\r\\ndid\\r\\nthe this that those\\r\\netc"
          }
        },
        "search_api_highlighting" : {
          "status" : 0,
          "weight" : "35",
          "settings" : {
            "prefix" : "\\u003Cstrong\\u003E",
            "suffix" : "\\u003C\\/strong\\u003E",
            "excerpt" : 1,
            "excerpt_length" : "256",
            "exclude_fields" : [],
            "highlight" : "always"
          }
        }
      }
    },
    "enabled" : "1",
    "read_only" : "0",
    "rdf_mapping" : []
  }');
  return $items;
}
