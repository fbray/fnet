<?php

/**
 * @file
 * Provides a protected extranet to FNet website called 'Sales Insider'.
 */

/**
 * Implements hook_permission().
 */
function sales_insider_permission() {
  return [
    'administer extranet' => [
      'title' => t('Administer Extranet'),
      'description' => t('Access Extranet Administration pages.'),
    ],
    'access extranet' => [
      'title' => t('Access Extranet'),
      'description' => t('Allow most basic Extranet access. Other restriction types will also usually be used.'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function sales_insider_menu() {
  $items = [];

  // Public facing paths start with 'extranet'.
  $items['extranet'] = [
    'menu_name' => 'extranet',
    'title' => t('Sales Insider'),
    'page callback' => '_sales_insider_initial_content',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  $items['extranet/request-received'] = [
    'title' => t('Sales Insider Access Request Received'),
    'description' => t('Thank you page for Access Requests'),
    'page callback' => '_sales_insider_access_request_received',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  $items['extranet-access-denied'] = [
    'title' => t('Access Denied'),
    'description' => t('Access Denied page'),
    'page callback' => '_sales_insider_access_denied',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  $items['extranet/tools'] = [
    'title' => t('Sales Tools'),
    'description' => t('Extranet Sales Tools'),
    'page callback' => '_sales_insider_sales_tool_page',
    'access arguments' => ['access extranet'],
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'extranet',
  ];

  $items['extranet/contacts'] = [
    'title' => t('Contacts'),
    'description' => t('Extranet Contacts'),
    'page callback' => '_sales_insider_contacts_page',
    'access arguments' => ['access extranet'],
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'extranet',
  ];

  // Box item download.  get box, then item url
  // send back as redirect location.
  $items['extranet/download/%/%'] = [
    'menu_name' => 'extranet',
    'title' => 'Photo Download',
    'page callback' => '_sales_insider_download_gallery_asset',
    'page arguments' => [2, 3],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  // Autocomplete callback.
  $items['productname/autocomplete'] = [
    'page callback' => '_sales_insider_products_autocomplete',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  // Extranet Administrative Pages.
  $items['admin/fnet/extranet'] = [
    'title' => t('Extranet'),
    'description' => t('Adminstrative functions for managing the Extranet'),
    'access arguments' => ['administer extranet'],
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  ];

  $items['admin/fnet/extranet/instructions'] = [
    'title' => t('Instruction Text'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => ['sales_insider_admin_instructions_form'],
    'access arguments' => ['administer extranet'],
    'file' => 'sales_insider.admin.inc',
  ];

  /* Web service config page */
  $items['admin/fnet/extranet/salesforce'] = [
    'title' => t('Configure Salesforce Connection'),
    'description' => t('Settings for connecting Salesforce to the Extranet.'),
    'file' => 'sales_insider.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['_salesforce_admin_salesforce_config'],
    'access arguments' => ['administer extranet'],
    'type' => MENU_NORMAL_ITEM,
  ];

  /* Web service callback for new Salesforce-enabled processing */
  $items['insider/v1/post'] = [
    'page callback' => '_fextranet_insider_processing',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_theme().
 */
function sales_insider_theme() {
  $base = [
    'path' => drupal_get_path('module', 'sales_insider') . '/theme',
  ];
  return [
    'product_assets' => $base + [
      'template' => 'product_assets',
      'variables' => [
        'elements' => NULL,
      ],
    ],
    'sales_insider_default_page_menu_item' => $base + [
      'template' => 'sales_insider_default_page_menu_item',
      'variables' => ['items' => NULL],
    ],
    'sales_insider_request_thanks_message' => $base + [
      'template' => 'sales_insider_request_thanks_message',
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_node_info().
 */
function sales_insider_node_info() {
  $types = [
    'extranet_page' => [
      'name' => t('Extranet Page'),
      'base' => 'node_content',
      'description' => t('Extranet Page'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => t('Extranet Page'),
    ],
    'extranet_news' => [
      'name' => t('Extranet News'),
      'base' => 'node_content',
      'description' => t('Extranet News: Sales Alerts and Announcements'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => t('Extranet News: Sales Alerts and Announcements'),
    ],
    'extranet_promotion' => [
      'name' => t('Extranet Promotion'),
      'base' => 'node_content',
      'description' => t('Extranet Promotions, optional start and end date.'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => t('Extranet Promotions, optional start and end date.'),
    ],
  ];
  return $types;
}

/**
 * Implements hook_preprocess_page().
 */
function sales_insider_preprocess_page(&$vars) {
  // Get the current user.
  global $user;

  // Don't do anything unless the page__extranet theme suggestion exists.
  if (in_array('page__extranet', $vars['theme_hook_suggestions'])) {
    $subhead = t('Marketing Tools and Information');
    $regional_groups = [];
    $vars['page']['#access_extranet'] = FALSE;
    $vars['page']['#node_edit_link'] = FALSE;
    if (user_access('access extranet')) {
      $vars['page']['#access_extranet'] = TRUE;
      $groups = group_membership_load_by_user($user->uid);

      foreach ($groups as $group) {
        $mygroup = group_load($group->gid);
        if ($mygroup->type = 'sales_insider_region') {
          $regional_groups[] = $mygroup;
        }
      }
      if (count($regional_groups) > 0) {
        if (count($regional_groups) > 1) {

          $subhead = t('Multiple Regions');
        }
        else {
          $subhead = $regional_groups[0]->title;
        }
      }
      $vars['page']['extranet_region'] = $subhead;
    }
    return;
  }
}

/**
 * A---------- PAGE CALLBACKS ---------------.
 */

/**
 * Initial content for the Extranet page.
 *
 * @return array|mixed|null
 * @throws \Exception
 */
function _sales_insider_initial_content() {
  // Get the current user.
  global $user;
  $account = user_load($user->uid);

  /*
   * Start of logic needed to provide a response based on status of the user.
   * First off, is the User logged in?
   */
  if (user_is_logged_in()) {
    // Yes? Excellent. Let the user in.
    if (user_access('access extranet')) {
      // If the user has access to the Extranet...
      $content = variable_get('extranet_instructions_main', '');
      return $content;
    }

    // No? Well, that's fine. More checking is necessary.
    else {
      // Does the user have any pending requests?
      $pending_query = "SELECT requested_on, blocked_on, status, added_on FROM group_membership WHERE uid = :uid";
      $access_requests = db_query($pending_query, [':uid' => $user->uid])->fetchAssoc();

      // A request has been made and is pending.
      if ($access_requests) {
        $requested_on = !empty($access_requests['requested_on']) ? format_date($access_requests['requested_on'], 'medium', '') : NULL;
        $blocked_on = !empty($access_requests['blocked_on']) ? format_date($access_requests['blocked_on'], 'medium', '') : NULL;
        $added_on = !empty($access_requests['blocked_on']) ? format_date($access_requests['added_on'], 'medium', '') : NULL;
        $status = $access_requests['status'];

        // Display the 'You requested access on X, but it...
        if (!empty($requested_on)) {
          $message = 'You requested access to Sales Insider on @request_date ';
          if ($status == 'blocked') {
            // Has been denied.
            // Re-request Access/Resend Request option.
            $message .= 'but unfortunately your request was denied by an administrator on @blocked_date.';
          }
          else {
            // Has not yet been approved.
            $message .= 'but your request has not yet been approved.';
          }
          $localized_message = t($message, [
            '@request_date' => $requested_on,
            '@blocked_date' => $blocked_on,
          ]);
        }
        elseif (!empty($added_on)) {
          // If there is nothing in the requested_on field,
          // the user was added manually.
          $message = 'You were granted access to Sales Insider on @added_date ';
          if ($status == 'blocked') {
            // Has been denied.
            // Re-request Access/Resend Request option.
            $message .= 'but unfortunately your access was blocked by an administrator on @blocked_date.';
          }
          else {
            // Has not yet been approved.
            $message .= 'but something has gone wrong.';
          }
          $localized_message = t($message, [
            '@added_date' => $added_on,
            '@blocked_date' => $blocked_on,
          ]);
        }

        // Give a default message.
        else {
          // TODO: Language?
          $localized_message = theme('sales_insider_request_thanks_message');
        }
        return $localized_message;
      }

      // ...or they just haven't requested access yet.
      else {
        // Load the Request Access Form.
        module_load_include('inc', 'sales_insider', 'includes/access_request.form');
        // Get the region by looking for the country in the user address field.
        $address = field_get_items('user', $account, 'field_address', LANGUAGE_NONE);
        $country = $address[0]['country'];

        // Get the Group ID of the Sales Insider Region group
        // that has this country.
        $group = _sales_insider_get_group_by_country($country);

        // TODO: Modify the Request Form to deal with multiple groups,
        // if only as a failover.
        $request_form = drupal_get_form('sales_insider_custom_request_form', $group);
        return $request_form;
      }
    }
  }
  // The user is not logged in. Give them the form.
  else {
    $login_form = drupal_get_form('user_login');
    $url = urldecode($login_form['#action']);
    // If there is an existing query string, extract those values.
    $query_string_values = [];
    parse_str(parse_url($url, PHP_URL_QUERY), $query_string_values);
    $query_string_values['destination'] = 'extranet';
    // Trim the query off the URL to be able to rebuild.
    $url = preg_replace('/\?.*/', '', $url);
    // This puts in the '?destination=extranet'.
    $action = url($url, ['query' => $query_string_values]);
    // URL Decoding to clean up some weirdness.
    $login_form['#action'] = $action;
    $login_form['#redirect'] = 'extranet';
    $login_form['#after_build'] = [];
    return $login_form;
  }
}

/**
 * Callback for Sales Tools page content.
 *
 * @return null|string
 * @throws \Exception
 */
function _sales_insider_sales_tool_page() {
  $content = variable_get('extranet_instructions_sales_tools', '');
  $items = ['items' => _sales_insider_submenu_page_items('extranet/tools')];
  try {
    $content .= theme('sales_insider_default_page_menu_item', $items);
  }
  catch (Exception $e) {
    watchdog('Sales Insider', $e->getMessage());
  }
  return $content;
}

/**
 * Helper function for Contacts page content.
 *
 * @return null|string
 * @throws \Exception
 */
function _sales_insider_contacts_page() {
  $content = variable_get('extranet_instructions_contacts', '');
  $items = ['items' => _sales_insider_submenu_page_items('extranet/contacts')];
  try {
    $content .= theme('sales_insider_default_page_menu_item', $items);
  }
  catch (Exception $e) {
    watchdog('Sales Insider', $e->getMessage());
  }
  return $content;
}

/**
 * Gets the menu items in the hierarchy below and returns them themed.
 *
 * TODO: Scott Melton wrote this hack.
 *
 * @param $path
 *
 * @return array
 */
function _sales_insider_submenu_page_items($path) {
  // Stop and return an empty array if node path is empty.
  if (empty($path)) {
    return [];
  }

  // Init empty array to hold the results.
  $pages = [];

  // Init parent keys. Check 'foreach' loop on parent keys for more info.
  $parent_keys = [
    'plid',
    'p1',
    'p2',
    'p3',
    'p4',
    'p5',
    'p6',
    'p7',
    'p8',
    'p9',
  ];

  // Collect menu item corresponding to this path to begin updates.
  // Reference: http://stackoverflow.com/a/11615338/136696
  // Note: we couldn't find a way to get the sub-tree starting from this item
  // only and hence we had to get the whole menu tree built and then loop on
  // the current item part only. Not so bad considering that Drupal will
  // most probably have the whole menu cached anyway.
  $parent_menu_item = menu_link_get_preferred($path);

  // Stop and return empty array if proper current menu item couldn't be found.
  if (empty($parent_menu_item['menu_name']) || empty($parent_menu_item['mlid'])) {
    return [];
  }

  // Init parent item mlid for easier usage since now we know it's not empty.
  $parent_menu_item_mlid = $parent_menu_item['mlid'];

  // Build whole menu based on the preferred menu_name gotten from this item.
  $menu = menu_build_tree($parent_menu_item['menu_name']);

  // Reset menu cache since 'menu_build_tree' will cause trouble later on after
  // you call pathauto to update paths as it can only be called once.
  // Check: https://www.drupal.org/node/1697570
  menu_reset_static_cache();

  // Init processing array. This will hold menu items as we process them.
  $menu_items_to_process = [];

  // First run to fill up the processing array with the top level items.
  foreach ($menu as $top_level_menu_item) {
    $menu_items_to_process[] = $top_level_menu_item;
  }

  // While the processing array is not empty, keep looping into lower
  // menu items levels until all are processed.
  while (count($menu_items_to_process) > 0) {
    // Pop the top item from the processing array.
    $mi = array_pop($menu_items_to_process);

    // Get its node id and add it to $nids if it's a current item child
    // Note that $parent_keys contains all keys that drupal uses to
    // set a menu item inside a tree up to 9 levels.
    foreach ($parent_keys as $parent_key) {
      // First, ensure the current parent key is set and also mlid is set.
      if (!empty($mi['link']['mlid']) && !empty($mi['link'][$parent_key])) {
        // If the link we're at is the parent one, don't add it to $nids
        // We need this check cause Drupal sets p1 to p9 in a way you
        // can easily use to generate breadcrumbs which means we will
        // also match the current parent, but here we only want children.
        if ($mi['link']['mlid'] != $parent_menu_item_mlid) {
          // Try to match the link to the parent menu item.
          if ($mi['link'][$parent_key] == $parent_menu_item_mlid) {
            // It's a child, add it to $pages and stop foreach loop.
            // Link_path has the path to the node. Example: node/63.
            if (!empty($mi['link']['link_path'])) {
              $pages[] = [
                'path' => $mi['link']['link_path'],
                'title' => $mi['link']['link_title'],
                'description' => $mi['link']['description'],
              ];
            }
            break;
          }
        }
      }
    }

    // Add its child items, if any, to the processing array.
    if (!empty($mi['below']) && is_array($mi['below'])) {
      foreach ($mi['below'] as $child_menu_item) {
        // Add child item at the beginning of the array so that when
        // we get the list of node ids it's sorted by level with
        // the top level elements first; which is easy to attain
        // and also useful for some applications; why not do it.
        array_unshift($menu_items_to_process, $child_menu_item);
      }
    }
  }
  return $pages;
}

/**
 * Implements hook_views_api().
 */
function sales_insider_views_api() {
  return [
    'api' => 3.0,
    'path' => drupal_get_path('module', 'sales_insider') . '/views',
  ];
}

/**
 * Wrappers to Group functions.
 */

/**
 * Group Access wrapper.
 *
 * @param $gid
 * @return bool
 */
function _sales_insider_group_access($gid) {
  $group = group_load($gid);
  if ($group) {
    return group_access('access member overview', $group);
  }
  return FALSE;
}

/**
 * Helper function.
 *
 * @param $gid
 * @param $node_type
 * @return array|bool
 */
function _sales_insider_gnode_node_add($gid, $node_type) {
  $group = group_load($gid);
  if ($group) {
    return gnode_node_add($group, $node_type);
  }
  return FALSE;
}

/**
 * Helper Function.
 *
 * @param $gid
 * @param $node_type
 * @return bool
 */
function _sales_insider_gnode_add_node_access($gid, $node_type) {
  $group = group_load($gid);
  if ($group) {
    return gnode_add_node_access($group, $node_type);
  }
  return FALSE;
}

/**
 * Helper function: Find which Sales Insider Region group is assigned.
 *
 * Assumes a country is only in 1 group.
 *
 * TODO: Returns the newest/highest gid if multiple. This can cause issues.
 * Needs fixing.
 *
 * @param $country
 * @return bool|\Group
 */
function _sales_insider_get_group_by_country($country) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'group')
    ->fieldCondition('field_extranet_group_countries', 'value', $country, '=');
  $query->propertyOrderBy('gid', 'DESC');
  $query->range(0, 1);
  $entity_array = $query->execute();

  if ($entity_array) {
    $group_num = key($entity_array['group']);
    $group = group_load($group_num);
    return $group;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_variable_group_info().
 *
 * Defines the variable group.
 */
function sales_insider_variable_group_info() {
  $groups = [];
  $groups['sales_insider'] = [
    'title' => t('Sales Insider Extranet'),
    'description' => t('Extranet variables'),
    'access' => 'administer extranet',
  ];

  return $groups;
}

/**
 * Implements hook_variable_info().
 */
function sales_insider_variable_info($options) {
  $variable = [];

  $variable['extranet_instructions_main'] = [
    'type' => 'string',
    'title' => t('Extranet Main Instructions', [], $options),
    'description' => t('Instructions given to users on the main Sales Insider page.'),
    'group' => 'sales_insider',
    'default' => '',
  ];

  $variable['extranet_instructions_sales_tools'] = [
    'type' => 'string',
    'title' => t('Extranet Sales Tools Instructions', [], $options),
    'description' => t('Instructions given to users on the Sales Insider Extranet Sales Tools page.'),
    'group' => 'sales_insider',
    'default' => '',
  ];

  $variable['extranet_instructions_services'] = [
    'type' => 'string',
    'title' => t('Extranet Services Instructions', [], $options),
    'description' => t('Instructions given to users on the Sales Insider Services page.'),
    'group' => 'sales_insider',
    'default' => '',
  ];

  $variable['extranet_instructions_access_denied'] = [
    'type' => 'string',
    'title' => t('Extranet Access Denied', [], $options),
    'description' => t('Message given when user is denied access to the Sales Insider section.'),
    'group' => 'sales_insider',
    'default' => '',
  ];

  $variable['extranet_instructions_request_access'] = [
    'type' => 'string',
    'title' => t('Extranet Request Access', [], $options),
    'description' => t('Message given when user needs to request access to the Sales Insider section.'),
    'group' => 'sales_insider',
    'default' => '',
  ];

  return $variable;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter views exposed forms for collapsible filters.
 */
function sales_insider_form_views_exposed_form_alter(&$form, &$form_state) {
  if (empty($form_state['view']) || !in_array($form_state['view']->name, [
    'sales_insider_products',
    'product_page',
  ])) {
    // We alter the exposed form of a single views display, so return if this
    // is not the expected view.
    return;
  }
  if (isset($form['field_asset_type_value'])) {
    // Add option to select all items (equals to resetting the filter).
    $options = [
      'All' => variable_get('views_exposed_filter_any_label', 'new_any') == 'old_any' ? t('<Any>') : t('- Any -'),
    ];
    $options += $form['field_dam_asset_type_value']['#options'];
    // Change size of field based on number of options (max: 5 items).
    $form['field_dam_asset_type_value']['#size'] = min([
      count($options),
      5,
    ]);
    if (count($options) <= 2) {
      // Hide filter if there is only one option available (additional
      // to "All").
      $form['field_dam_asset_type_value']['#access'] = FALSE;
    }
    $form['field_dam_asset_type_value']['#options'] = $options;
  }

  // Alter multi-value dropdowns.
  $form_multiple_selects = [];
  foreach (element_children($form) as $element_name) {
    if (isset($form[$element_name]['#type']) && $form[$element_name]['#type'] == 'select' && !empty($form[$element_name]['#multiple'])) {
      $form_multiple_selects[$element_name] = [
        'size' => isset($form[$element_name]['#size']) ? $form[$element_name]['#size'] : 5,
      ];
    }
  }
  if (count($form_multiple_selects)) {
    if (isset($form['#attached'])) {
      $form['#attached'] += [
        'js' => [],
        'css' => [],
      ];
    }
    else {
      $form['#attached'] = [
        'js' => [],
        'css' => [],
      ];
    }

    // Attach custom javascript to the form.
    $form['#attached']['js'][] = drupal_get_path('module', 'sales_insider') . '/js/sales_insider.admin.js';
    $form['#attached']['js'][] = [
      'data' => [
        'fextranet' => [
          'multiple_selects' => $form_multiple_selects,
        ],
      ],
      'type' => 'setting',
    ];
  }
}

/**
 * Implements hook_default_search_api_index().
 */
function sales_insider_default_search_api_index() {
  $items = [];
  $items['extranet_index'] = entity_import('search_api_index', '{
    "name" : "Extranet Index",
    "machine_name" : "extranet_index",
    "description" : "A search index specifically for the Extranet search box.",
    "server" : "local_search",
    "item_type" : "node",
    "options" : {
      "datasource" : { "bundles" : [
          "digital_asset",
          "extranet_news",
          "extranet_page",
          "extranet_promotion"
        ]
      },
      "index_directly" : 0,
      "cron_limit" : "100",
      "fields" : {
        "author" : { "type" : "integer", "entity_type" : "user" },
        "body:value" : { "type" : "text" },
        "field_business_entity" : { "type" : "integer", "entity_type" : "taxonomy_term" },
        "field_dam_asset_type" : { "type" : "string" },
        "field_dam_document_id" : { "type" : "text" },
        "field_dam_industry" : { "type" : "list\\u003Cstring\\u003E" },
        "field_dam_language" : { "type" : "string" },
        "field_dam_parent" : { "type" : "integer", "entity_type" : "node" },
        "field_dam_related_product" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "node" },
        "field_digital_assets" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "node" },
        "field_edoc_subtitle" : { "type" : "text" },
        "field_media_gallery" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "node" },
        "field_related_products" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "node" },
        "group" : { "type" : "list\\u003Cinteger\\u003E", "entity_type" : "group" },
        "search_api_access_node" : { "type" : "list\\u003Cstring\\u003E" },
        "search_api_language" : { "type" : "string" },
        "search_api_viewed" : { "type" : "text" },
        "status" : { "type" : "integer" },
        "title" : { "type" : "text", "boost" : "2.0" }
      },
      "data_alter_callbacks" : {
        "search_api_alter_bundle_filter" : {
          "status" : 1,
          "weight" : "-10",
          "settings" : { "default" : "1", "bundles" : [] }
        },
        "search_api_alter_language_control" : {
          "status" : 0,
          "weight" : "0",
          "settings" : { "lang_field" : "", "languages" : [] }
        },
        "search_api_alter_node_access" : { "status" : 1, "weight" : "0", "settings" : [] },
        "search_api_alter_node_status" : { "status" : 1, "weight" : "0", "settings" : [] },
        "search_api_alter_add_hierarchy" : {
          "status" : 1,
          "weight" : "0",
          "settings" : { "fields" : {
              "source:field_edoc_prod" : "source:field_edoc_prod",
              "source:field_dam_parent" : "source:field_dam_parent",
              "source:field_dam_related_product" : "source:field_dam_related_product"
            }
          }
        },
        "search_api_alter_add_viewed_entity" : {
          "status" : 1,
          "weight" : "0",
          "settings" : { "mode" : "search_result" }
        },
        "search_api_alter_add_url" : { "status" : 0, "weight" : "0", "settings" : [] },
        "search_api_alter_add_aggregation" : { "status" : 0, "weight" : "0", "settings" : [] },
        "search_api_metatag_alter_callback" : { "status" : 0, "weight" : "0", "settings" : [] }
      },
      "processors" : {
        "search_api_case_ignore" : {
          "status" : 1,
          "weight" : "0",
          "settings" : { "fields" : {
              "title" : true,
              "field_dam_asset_type" : true,
              "field_media_gallery" : true,
              "field_digital_assets" : true,
              "search_api_viewed" : true,
              "body:value" : true
            }
          }
        },
        "search_api_html_filter" : {
          "status" : 1,
          "weight" : "10",
          "settings" : {
            "fields" : { "title" : true, "search_api_viewed" : true, "body:value" : true },
            "title" : 0,
            "alt" : 1,
            "tags" : "h1 = 5\\r\\nh2 = 3\\r\\nh3 = 2\\r\\nstrong = 2\\r\\nb = 2\\r\\nem = 1.5\\r\\nu = 1.5"
          }
        },
        "search_api_tokenizer" : {
          "status" : 1,
          "weight" : "20",
          "settings" : {
            "fields" : { "title" : true, "search_api_viewed" : true, "body:value" : true },
            "spaces" : "[^[:alnum:]]",
            "ignorable" : "[\\u0027]"
          }
        },
        "search_api_stopwords" : {
          "status" : 0,
          "weight" : "30",
          "settings" : {
            "fields" : { "title" : true },
            "file" : "",
            "stopwords" : "but\\r\\ndid\\r\\nthe this that those\\r\\netc"
          }
        },
        "search_api_highlighting" : {
          "status" : 0,
          "weight" : "35",
          "settings" : {
            "prefix" : "\\u003Cstrong\\u003E",
            "suffix" : "\\u003C\\/strong\\u003E",
            "excerpt" : 1,
            "excerpt_length" : "256",
            "exclude_fields" : [],
            "highlight" : "always"
          }
        }
      }
    },
    "enabled" : "1",
    "read_only" : "0",
    "rdf_mapping" : []
  }');
  return $items;
}
