<?php

/**
 * @file
 * Provides Product Assets integration functionality.
 */

include_once 'product_assets.features.inc';

/**
 * Implements hook_help().
 */
function product_assets_help() {

}

/**
 * Implements hook_menu().
 */
function product_assets_menu() {
  // TODO: Create as a view! Move to product_assets module.
  // Support homepage.
  $items['support'] = [
    'title' => 'Support',
    'page callback' => 'support_page_page',
    'access callback' => TRUE,
    'access arguments' => [],
    'type' => MENU_CALLBACK,
  ];

  // TODO: Build an Admin page for settings! - rositis 12/11/2017
  /*
    // Software downloads
    $items['support/downloads'] = array(
      'title' => 'Downloads',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('product_assets_download_form', 2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );

    // TODO: Move to View. Get rid of title thingy.
    $items['support/downloads/%/%'] = array(
      'title callback' => 'product_assets_title_generator',
      'title arguments' => array('downloads', 3),  // TODO: This is not acceptable!!
      'page callback' => 'product_assets_download_results_page',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  */
  // Manuals.
  $items['support/manuals'] = [
    'title' => 'Product Manuals',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['product_assets_manuals_form', 2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];
  // TODO: Move to View. Get rid of title thingy.
  $items['support/manuals/%/%'] = [
    'title callback' => 'product_assets_title_generator',
    'title arguments' => ['Product Manuals', 3],
    'page callback' => 'product_assets_manuals_results_page',
    'page arguments' => [2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  // Training videos.
  $items['support/training'] = [
    'title' => 'Training Videos',
    'page callback' => 'product_assets_training_results_page',
    'page arguments' => NULL,
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];
  // TODO: Move to View. Get rid of title thingy.
  $items['support/training/%/%'] = [
    'title callback' => 'product_assets_title_generator',
    'title arguments' => ['Training Videos', 3],
    'page callback' => 'product_assets_training_results_page',
    'page arguments' => [2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  // TODO: Move to View. Get rid of title thingy.
  $items['expertise/whitepapers/%/%'] = [
    'title' => '',
    'title callback' => 'product_assets_title_generator',
    'title arguments' => [1, 3],
    'page callback' => 'product_assets_technical_docs_page',
    'page arguments' => [1, 2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  // Technical docs: Application notes.
  $items['support/application-notes'] = [
    'title' => '',
    'title callback' => 'product_assets_title_generator',
    'title arguments' => ['Application Notes'],
    'page callback' => 'product_assets_technical_docs_page',
    'page arguments' => [1],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  // TODO: Move to View. Get rid of title thingy.
  $items['support/application-notes/%/%'] = [
    'title' => '',
    'title callback' => 'product_assets_title_generator',
    'title arguments' => ['Application Notes', 3],
    'page callback' => 'product_assets_technical_docs_page',
    'page arguments' => [1, 2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  // Technical docs: Datasheets.
  $items['support/datasheets'] = [
    'title' => '',
    'title callback' => 'product_assets_title_generator',
    'title arguments' => [1],
    'page callback' => 'product_assets_technical_docs_page',
    'page arguments' => [1],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  // TODO: Move to View. Get rid of title thingy.
  $items['support/datasheets/%/%'] = [
    'title' => '',
    'title callback' => 'product_assets_title_generator',
    'title arguments' => [1, 3],
    'page callback' => 'product_assets_technical_docs_page',
    'page arguments' => [1, 2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_theme().
 */
function product_assets_theme() {
  $base = [
    'path' => drupal_get_path('module', 'product_assets') . '/theme',
  ];
  return [
    'assets_listing' => $base + [
      'template' => 'assets_listing',
      'variables' => [
        'assets' => [],
      ],
    ],
    'assets_webcasts_listing' => $base + [
      'template' => 'assets_webcasts_listing',
      'variables' => [
        'assets' => [],
      ],
    ],
    'support_page' => $base + [
      'template' => 'support_page',
      'variables' => [
        'support' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_views_api().
 */
function product_assets_views_api() {
  return [
    'api' => 3.0,
    'path' => drupal_get_path('module', 'product_assets') . '/views',
    'template path' => drupal_get_path('module', 'product_assets') . '/theme',
  ];
}

/**
 * Title pre-processor for technical document page view.
 *
 * @param $title
 * @param null $subtitle
 * @return string
 */
function product_assets_title_generator($title, $subtitle = NULL) {
  return ucwords($title);
}

/**
 * Helper: List products with downloadable items depending on assets type.
 *
 * @param null $type
 * @return array
 */
function product_assets_get_valid_products($type = NULL) {
  if ($type) {
    $products = [t('Select a Product')];
    if (function_exists('digital_asset_get_products_with_assets')) {
      $products += digital_asset_get_products_with_assets($type);
    }
    return $products;
  }
}

/**
 * Generate base form for product assets.
 *
 * @param int $product_id
 * @param null $asset_type
 * @param null $title
 * @return array
 */
function product_assets_form_generator($product_id = 0, $asset_type = NULL, $title = NULL) {
  drupal_add_css(drupal_get_path('module', 'product_assets') . '/css/product_assets.css');
  $form = [];
  if (!empty($title)) {
    $form['title'] = [
      '#markup' => "<h2>$title</h2>",
    ];
  }
  $form['product'] = [
    '#type' => 'select',
    '#prefix' => '<div id="product-assets-form-wrapper">',
    '#title' => t('Select a product'),
    '#default_value' => $product_id,
    '#options' => product_assets_get_valid_products($asset_type),
    '#post_render' => ['_product_assets_trademark_decode'],
  ];
  $form['save'] = [
    '#type' => 'submit',
    '#value' => t('Go'),
    '#suffix' => '</div>',
  ];
  return $form;
}

function _product_assets_trademark_decode($element, $children) {
  $source = ['&lt;sup&gt;TM&lt;/sup&gt;', '&#0153;'];
  $replacement = ['&trade;', '&trade;'];
  return html_entity_decode(str_replace($source, $replacement, $element));
}

/**
 * Software download form for Products.
 *
 * @param $form
 * @param $form_state
 * @param null $product_id
 * @return array
 */
function product_assets_download_form($form, $form_state, $product_id = NULL) {
  $form = product_assets_form_generator($product_id, [
    'product_software',
    'product_software_release_notes',
  ], 'Downloads');
  return $form;
}

/**
 * Process a Product Assets block search form submission.
 *
 * @param $form
 * @param $form_state
 */
function product_assets_download_form_submit($form, &$form_state) {
  $product_id = $form_state['values']['product'];
  if ($product_id != '' && $product_id != 0) {
    $form_state['redirect'] = 'support/downloads/' . urlencode($product_id) . '/' . urlencode($form['product']['#options'][$product_id]);
  }
  else {
    drupal_set_message(t('You must select a product.'), 'error');
  }
}

/**
 * Implementations of Search results page view.
 *
 * @param null $product_id
 * @return string
 */
function product_assets_download_results_page($product_id = NULL) {
  $siteReg = module_invoke('fnet_helper', 'site_region');
  $language = $siteReg["lang"];
  $product_id = (int) check_plain(urldecode($product_id));
  $digital_asset_type = [
    'product_software',
    'product_software_release_notes',
  ];
  $download_link_base = '/findit/';
  $download_form = drupal_get_form('product_assets_download_form', $product_id);
  $output = drupal_render($download_form);

  if (function_exists('digital_asset_list_by_product')) {
    $assets = digital_asset_list_by_product($product_id, $language, $digital_asset_type);
  }

  if (!$assets) {
    $output .= '<div id="product-assets-download-wrapper">' . t('No software available for download.') . '</div>';
  }
  else {
    // Create theme.
    try {
      $output .= theme('assets_listing', ['assets' => _product_assets_get_asset_list($assets, $download_link_base)]);
    }
    catch (Exception $e) {
      watchdog('Product Assets', $e->getMessage());
    }
  }

  return $output;
}

/* Assets: Manuals. */

/**
 * Manual download form for Products.
 *
 * @param $form
 * @param $form_state
 * @param null $product_id
 * @return array
 */
function product_assets_manuals_form($form, $form_state, $product_id = NULL) {
  $form = product_assets_form_generator($product_id, 'manual', 'Manuals');
  return $form;
}

/**
 * Process a Product Assets block search form submission.
 *
 * @param $form
 * @param $form_state
 */
function product_assets_manuals_form_submit($form, &$form_state) {
  $product_id = $form_state['values']['product'];

  if ($product_id != '') {
    $form_state['redirect'] = 'support/manuals/' . urlencode($product_id) . '/' . urlencode($form['product']['#options'][$product_id]);
  }
}

/**
 * Implementations of Search results page view.
 *
 * @param null $product_id
 * @return string
 */
function product_assets_manuals_results_page($product_id = NULL) {

  $siteReg = module_invoke('fnet_helper', 'site_region');
  $language = $siteReg["lang"];
  $product_id = (int) check_plain(urldecode($product_id));
  $digital_asset_type = ['manual', 'product_software_release_notes'];
  $download_link_base = '/findit/';
  $output = drupal_render(drupal_get_form('product_assets_manuals_form', $product_id));

  if (function_exists('digital_asset_list_by_product')) {
    $assets = digital_asset_list_by_product($product_id, $language, $digital_asset_type);
  }
  if (!$assets) {
    $output .= '<div id="product-assets-download-wrapper">' . t('No manuals available for download.') . '</div>';
  }
  else {
    // Create theme.
    try {
      $output .= theme('assets_listing', ['assets' => _product_assets_get_asset_list($assets, $download_link_base)]);
    }
    catch (Exception $e) {
      watchdog('Product Assets', $e->getMessage());
    }
  }
  return $output;
}

/* Assets: Training videos. */

/**
 * Training videos download form for Products.
 *
 * @param $form
 * @param $form_state
 * @param null $product_id
 * @return array
 */
function product_assets_training_form($form, $form_state, $product_id = NULL) {
  $form = product_assets_form_generator($product_id, 'gold_training');
  return $form;
}

/**
 * Process a Training videos search form submission.
 *
 * @param $form
 * @param $form_state
 */
function product_assets_training_form_submit($form, &$form_state) {
  $product_id = $form_state['values']['product'];
  if ($product_id != '') {
    $form_state['redirect'] = 'support/training/' . urlencode($product_id) . '/' . urlencode($form['product']['#options'][$product_id]);
  }
}

/**
 * Implementations of Training videos Search results page view.
 *
 * @param null $product_id
 * @return string
 * @throws \Exception
 */
function product_assets_training_results_page($product_id = NULL) {
  $siteReg = module_invoke('fnet_helper', 'site_region');
  $language = $siteReg["lang"];
  $product_id = (int) check_plain(urldecode($product_id));
  $digital_asset_type = 'gold_training';
  $download_link_base = '/findit/';
  $form = drupal_get_form('product_assets_training_form', $product_id);
  $output = drupal_render($form);

  if (function_exists('digital_asset_list_by_product')) {
    $assets = digital_asset_list_by_product($product_id, $language, $digital_asset_type);
  }
  if (!$assets) {
    // $output .= '<div id="product-assets-download-wrapper">' . t('No training videos available for download.') . '</div>';
  }
  else {
    // Create theme.
    $output .= theme('assets_webcasts_listing', [
      'assets' => _product_assets_get_asset_list($assets, $download_link_base, 'webcast'),
    ]);
  }
  return $output;
}

/**
 * Generate base form for product assets - Technical documents.
 *
 * @param $form
 * @return array
 */
function product_assets_technical_documents_form($form) {
  // drupal_add_css(drupal_get_path('module', 'product_assets') . '/product_assets.css');
  $form = [];
  // Todo: link this into either the taxonomy or Category field.
  $industries = [
    -1 => t('Show all'),
    1 => t('Cabling Certification'),
    2 => t('Installation and Test'),
    3 => t('Telecom Test'),
  ];

  if (arg(2)) {
    $industry_id = (int) arg(2);
  }
  else {
    // 0, for now defaulted to Datacom cabling.
    $industry_id = -1;
  }

  $form['industry'] = [
    '#type' => 'select',
    '#title' => t('Filter by industry'),
    '#default_value' => (int) $industry_id,
    '#options' => $industries,
    '#prefix' => '<div id="product-assets-form-wrapper">',
  ];

  $form['save'] = [
    '#type' => 'submit',
    '#value' => t('Go'),
    '#suffix' => '</div>',
  ];
  return $form;
}

/**
 * Process a Product Assets Technical docs filter form submission.
 *
 * Redirect to a detail page.
 *
 * @param $form
 * @param $form_state
 */
function product_assets_technical_documents_form_submit($form, &$form_state) {
  $industry = $form_state['values']['industry'];
  $form_state['redirect'] = arg(0) . '/' . arg(1) . '/' . $industry;
}

/**
 * Page view generator for technical documents.
 *
 * @param $op
 * @param int $industry
 * @return string
 * @throws \Exception
 */
function product_assets_technical_docs_page($op, $industry = -1) {
  $siteReg = module_invoke('fnet_helper', 'site_region');
  $language = $siteReg["lang"];
  switch ($op) {
    case 'whitepapers':
      $digital_asset_type = 'white_paper';
      break;

    case 'application-notes':
      $digital_asset_type = 'application_notes';
      break;

    case 'datasheets':
      $digital_asset_type = 'data_sheet';
      break;

    case 'webcasts':
      $digital_asset_type = 'webcast';
      break;

    default:
      drupal_set_message(t('Invalid document type encountered!'), 'error');
  }

  $download_link_base = '/findit/';
  if (function_exists('digital_asset_list_assets_by_type')) {
    $assets = digital_asset_list_assets_by_type($digital_asset_type, $language, $industry);
  }
  $output = '<h2>' . ucwords($digital_asset_type) . "</h2>\n";
  $form = drupal_get_form('product_assets_technical_documents_form');
  $output .= drupal_render($form);
  if (!$assets) {
    $asset_name_arr = explode(':', drupal_get_title());
    $output .= '<div id="product-assets-download-wrapper">' . t('No %asset available for download.', ['%asset' => strtolower($asset_name_arr[0])]) . '</div>';
  }
  else {
    // Create theme.
    if ($op == 'webcasts') {
      $output .= theme('assets_webcasts_listing', [
        'assets' => _product_assets_get_asset_list($assets, $download_link_base, 'webcast'),
      ]);
    }
    else {
      $output .= theme('assets_listing', ['assets' => _product_assets_get_asset_list($assets, $download_link_base)]);
    }
  }
  return $output;
}

/**
 * Takes the XML object and returns the asset list.
 */
function _product_assets_get_asset_list($xmlObj, $download_link_base, $list_type = 'asset') {
  global $user;
  $asset_list = [];
  $i = 0;
  $locked_image = base_path() . path_to_theme() . '/images/lock.gif';
  $unlocked_image = base_path() . path_to_theme() . '/images/unlock.gif';
  $link_text = ($list_type == 'asset') ? 'Download' : 'View';
  foreach ($xmlObj->Asset as $asset) {
    $asset_list[$i]['title'] = $asset->AssetTitle;
    $asset_list[$i]['desc'] = $asset->AssetDescription;
    switch (strtolower($asset->Locked)) {
      case 'true':
        // Fluke and Fluke Networks employees have full access.
        // TODO: This should be a permission-based check.
        // Roles are important, donchaknow?
        if (preg_match('/.*(?:@flukenetworks|@fluke)\.com/i', $user->mail)) {
          // TODO: Seriously? A hard-coded URL for the server?
          // BAD DOG. Change that.
          $asset_list[$i]['file_link'] = l($link_text, 'http://www.flukenetworks.com' . $download_link_base . $asset->AssetID);
        }
        else {
          $asset_list[$i]['file_link'] = 'Valid Gold Contract Required';
        }
        $asset_list[$i]['file_size'] = ($asset->FileSize) ? format_size($asset->FileSize) : '';
        $asset_list[$i]['lock_status'] = $locked_image;
        break;

      case 'unlocked':
        $asset_list[$i]['file_link'] = l($link_text, 'http://www.flukenetworks.com' . $download_link_base . $asset->AssetID);
        $asset_list[$i]['file_size'] = ($asset->FileSize) ? format_size($asset->FileSize) : '';
        $asset_list[$i]['lock_status'] = $unlocked_image;
        break;

      default:
        $asset_list[$i]['lock_status'] = NULL;
        break;
    }
    $i++;
  }
  return $asset_list;
}

/**
 * Supplementary function providing CuRL implementation.
 *
 * @param $url
 * @return bool|mixed
 */
function do_curl_request($url) {

  if (function_exists('curl_init')) {
    // Open connection.
    $ch = curl_init();

    // Set the url, number of POST vars, POST data.
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

    // Execute post.
    $result = curl_exec($ch);

    // Close connection.
    curl_close($ch);

    // Return CuRL response.
    return $result;
  }
  else {
    drupal_set_message(t('CuRL library is missing. Please contact the administrator'), 'error');
    return FALSE;
  }
}

/**
 * Implementation of preprocess hook.
 */
/*
function custom_pages_preprocess_page(&$variables) {
  if ($variables['theme_hook_suggestions'][0] == 'page__expertise') {  //$variables['template_files'][0] == 'page-expertise'
    $expertise = variable_get('expertise_page_settings', array());
    switch ($variables['template_files'][1]) {
      case "page-expertise-topics":
        $variables['head_title'] = $expertise['tpc_head_title']; // 'Expertise Topics - Network Monitoring and Testing | Fluke Networks';
        $data = array(
          '#type' => 'html_tag',
          '#tag' => 'meta',
          '#attributes' => array(
            'name' => 'description',
            'content' => $expertise['tpc_meta_description'],
          ),
        );
        drupal_add_html_head($data, "meta_description");
        break;
      case "page-expertise-roles":
        $variables['head_title'] = $expertise['rle_head_title']; // 'Expertise Roles - Network Monitoring and Testing | Fluke Networks';
        $data = array(
          '#type' => 'html_tag',
          '#tag' => 'meta',
          '#attributes' => array(
            'name' => 'description',
            'content' => $expertise['rle_meta_description'],
          ),
        );
        drupal_add_html_head($data, "meta_description");
        break;
      case "page-expertise-industries":
        $variables['head_title'] = $expertise['ind_head_title']; // 'Expertise Industries - Network Monitoring and Testing | Fluke Networks';
        $data = array(
          '#type' => 'html_tag',
          '#tag' => 'meta',
          '#attributes' => array(
            'name' => 'description',
            'content' => $expertise['ind_meta_description'],
          ),
        );
        drupal_add_html_head($data, "meta_description");
        break;
      default:
        $variables['head_title'] = $expertise['head_title']; //'Expertise - Network Monitoring and Testing | Fluke Networks';
        $data = array(
          '#type' => 'html_tag',
          '#tag' => 'meta',
          '#attributes' => array(
            'name' => 'description',
            'content' => $expertise['meta_description'],
          ),
        );
        drupal_add_html_head($data, "meta_description");
    }
  }
}
*/

/**
 * Implementation of Support page view.
 */
function support_page_page() {
  drupal_add_css(drupal_get_path('module', 'product_assets') . '/css/support_page.css');
  drupal_add_js(drupal_get_path('module', 'product_assets') . '/js/support_page.js');
  $output = '';
  // TODO: What the hell is this doing here? There is no longer a settings page.
  $support = variable_get('support_page_settings', []);
  try {
    $output .= theme('support_page', ['support' => $support]);
  }
  catch (Exception $e) {
    watchdog('Product Assets', $e->getMessage());
  }
  return $output;
}

/**
 * Implementation of Expertise page view.
 */
function expertise_page_page() {
  drupal_add_css(drupal_get_path('module', 'product_assets') . '/css/expertise_page.css');
  drupal_add_js(drupal_get_path('module', 'product_assets') . '/js/expertise_page.js');

  $output                       = '';
  $expertise                    = variable_get('expertise_page_settings', []);
  $expertise['casestudies']     = get_top_expertise_items('cs', 3);
  $expertise['learn_about']     = get_top_expertise_items('la', 3);
  try {
    $output .= theme('expertise_page', ['expertise' => $expertise]);
  }
  catch (Exception $e) {
    watchdog('Product Assets', $e->getMessage());
  }
  return $output;
}
