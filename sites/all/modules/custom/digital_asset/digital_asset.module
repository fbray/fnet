<?php

/**
 * @file
 * digital_asset.module
 */

include_once 'digital_asset.features.inc';

define('DA_CCS_ADD', 'Add - New Asset');
define('DA_CCS_UPDATE', 'Update - Asset Attributes');
define('DA_CCS_UPDATE_CATALOG', 'Update catalog assignment');
define('DA_CCS_REMOVE', 'Remove - Existing Asset');

/**
 * Implements hook_menu().
 */
function digital_asset_menu() {
  $items = [];
  $items['admin/content/digital_assets'] = [
    'title' => 'Asset Management System',
    'description' => 'Digital Asset Management System Menu',
    'page callback' => 'digital_asset_main_menu',
    'access arguments' => ['access digital asset system'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'digital_asset.pages.inc',
  ];
  $items['digital_asset/add'] = [
    'title' => 'Add a digital asset',
    'description' => 'Add an asset',
    'page callback' => 'digital_asset_add',
    'access arguments' => ['access digital asset system'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'digital_asset.pages.inc',
  ];
  $items['digital_asset/%node'] = [
    'title' => 'Asset Management System',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_page_view_form', 1],
    'access arguments' => ['access digital asset system'],
    'file' => 'digital_asset.pages.inc',
    'type' => MENU_CALLBACK,
  ];
  $items['digital_asset/%node/view'] = [
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ];
  // TODO: move to drupal_goto.
  $items['digital_asset/%node/edit'] = [
    'title' => 'Edit',
    'page callback' => 'digital_asset_edit',
    'page arguments' => [1],
    'access arguments' => ['access digital asset system'],
    'weight' => 0,
    'file' => 'digital_asset.pages.inc',
    'type' => MENU_LOCAL_TASK,
  ];
  $items['digital_asset/%node/delete'] = [
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_delete_confirm', 1],
    'access arguments' => ['access digital asset system'],
    'weight' => 1,
    'type' => MENU_CALLBACK,
  ];
  $items['digital_asset/%node/add_child'] = [
    'title' => 'Add child asset',
    'description' => 'Add a child asset',
    'page callback' => 'digital_asset_add',
    'page arguments' => [1],
    'access arguments' => ['access digital asset system'],
    'type' => MENU_CALLBACK,
    'file' => 'digital_asset.pages.inc',
  ];
  $items['digital_asset/%/children/%/view'] = [
    'title' => 'children',
    'page callback' => 'digital_asset_show_children',
    'page arguments' => [1, 3],
    'access arguments' => ['access digital asset system'],
    'weight' => 0,
    'file' => 'digital_asset.pages.inc',
    'type' => MENU_CALLBACK,
  ];
  $items['digital_asset/%/children/%/delete'] = [
    'title' => 'Delete child',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_child_delete_confirm', 1, 3],
    'access arguments' => ['access digital asset system'],
    'file' => 'digital_asset.pages.inc',
    'type' => MENU_CALLBACK,
  ];
  $items['digital_asset/ccs_categories_js/%'] = [
    'title' => 'CCS Printing categories',
    'page callback' => 'digital_asset_ccs_categories_callback',
    'page arguments' => [2],
    'access arguments' => ['access digital asset system'],
    'type' => MENU_CALLBACK,
    'file' => 'digital_asset.pages.inc',
  ];
  $items['admin/fnet/digital_asset'] = [
    'title' => 'Asset Management System',
    'description' => 'Asset Management System Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_admin_form'],
    'access arguments' => ['administer digital asset system'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'digital_asset.admin.inc',
  ];
  $items['admin/fnet/digital_asset/settings'] = [
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  ];
  $items['admin/fnet/digital_asset/ccs'] = [
    'title' => 'Print Vendor',
    'description' => 'AMS print vendor settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_admin_ccs_form'],
    'access arguments' => ['administer digital asset system'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'digital_asset.admin.inc',
    'weight' => 2,
  ];
  $items['admin/fnet/digital_asset/ccs/settings'] = [
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  ];
  $items['admin/fnet/digital_asset/ccs/import_categories'] = [
    'title' => 'Import Categories',
    'description' => 'Import catalog categories',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_admin_ccs_import_form'],
    'access arguments' => ['administer digital asset system'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'digital_asset.admin.inc',
    'weight' => 2,
  ];
  $items['admin/fnet/digital_asset/ccs/export_categories'] = [
    'title' => 'Export Categories',
    'description' => 'Export catalog categories',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_admin_ccs_export_categories_form'],
    'access arguments' => ['administer digital asset system'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'digital_asset.admin.inc',
    'weight' => 3,
  ];
  $items['admin/fnet/digital_asset/cdn'] = [
    'title' => 'CDN',
    'description' => 'AMS CDN settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_admin_cdn_form'],
    'access arguments' => ['administer digital asset system'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'digital_asset.admin.inc',
    'weight' => 3,
  ];
  $items['admin/fnet/digital_asset/cdn/settings'] = [
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  ];
  $items['admin/fnet/digital_asset/cdn/ftp_queue'] = [
    'title' => 'FTP Queue',
    'description' => 'AMS CDN settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_admin_cdn_ftp_form'],
    'access arguments' => ['administer digital asset system'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'digital_asset.admin.inc',
    'weight' => 2,
  ];
  $items['digital_asset/export_ccs'] = [
    'title' => 'Export CCS spreadsheet',
    'description' => 'Export asset spreadsheet for CCS Printing',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_ccs_export_form'],
    'access arguments' => ['access digital asset system'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'digital_asset.pages.inc',
  ];
  $items['digital_asset/list'] = [
    'title' => 'Digital asset query/list',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_asset_query_form'],
    'access arguments' => ['access digital asset system'],
    'type' => MENU_CALLBACK,
    'file' => 'digital_asset.pages.inc',
  ];
  $items['digital_asset/product_query'] = [
    'title' => 'Digital asset product query',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['digital_asset_query_by_product_form'],
    'access arguments' => ['access digital asset system'],
    'type' => MENU_CALLBACK,
    'file' => 'digital_asset.pages.inc',
  ];
  return $items;
}

/**
 * Implements hook_permission().
 */
function digital_asset_permission() {
  $perms = [
    'access digital asset system' => [
      'title' => t('access digital asset system'),
      'description' => t('Use the digital asset system to add, edit and delete digital assets'),
    ],
    'administer digital asset system' => [
      'title' => t('administer digital asset system'),
      'description' => t('Perform administrative functions for digital asset system'),
    ],
  ];
  return $perms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function digital_asset_form_digital_asset_node_form_alter(&$form, &$form_state) {
  global $user;
  /* For testing
  if (module_exists('devel')) {
    dpm($form);
  }
  */
  $form['#after_build'][] = 'digital_asset_node_form_after_build';
  $form['#cache'] = TRUE;

  $form['#validate'][] = 'digital_asset_node_form_validate';
  $form['body_field']['body']['#rows'] = 5;
  $form['body_field']['format'] = NULL;
  $form['options']['status'] = [
    '#type' => 'value',
    '#value' => TRUE,
  ];
  $node = $form['#node'];
  $form['storage_file_folder'] = [
    '#type' => 'value',
    '#value' => fnet_common_get_field_value('digital_asset', $node, 'field_dam_storage_file_folder'),
  ];
  $form['storage_filename'] = [
    '#type' => 'value',
    '#value' => fnet_common_get_field_value('digital_asset', $node, 'field_dam_storage_filename'),
  ];
  $form['storage_file_folder_pod'] = [
    '#type' => 'value',
    '#value' => fnet_common_get_field_value('digital_asset', $node, 'field_dam_storage_file_folder_po'),
  ];
  $form['storage_filename_pod'] = [
    '#type' => 'value',
    '#value' => fnet_common_get_field_value('digital_asset', $node, 'field_dam_storage_filename_pod'),
  ];

  $form['field_dam_storage_filename']['#default_value'] = fnet_common_get_field_value('digital_asset', $node, 'field_dam_storage_filename');
  if (isset($node->field_dam_parent[LANGUAGE_NONE][0]['nid'])) {
    $parent_node = node_load(fnet_common_get_field_value('digital_asset', $node, 'field_dam_parent', 'nid'));
    $form['title']['#default_value'] = (empty($node->title)) ? $parent_node->title : $node->title;
    $form['body_field']['body']['#default_value'] = (empty($node->body)) ? $parent_node->body : $node->body;
    $form['field_dam_asset_type'][LANGUAGE_NONE]['#default_value'][0] = (empty($node->field_dam_asset_type[LANGUAGE_NONE][0]['value'])) ? fnet_common_get_field_value('node', $parent_node, 'field_dam_asset_type', 'value') : fnet_common_get_field_value('node', $node, 'field_dam_asset_type', 'value');
    $form['field_dam_entitlement_level'][LANGUAGE_NONE]['#default_value'][0] = (empty($node->field_dam_entitlement_level[LANGUAGE_NONE][0]['value'])) ? fnet_common_get_field_value('node', $parent_node, 'field_dam_entitlement_level', 'value') : fnet_common_get_field_value('node', $node, 'field_dam_entitlement_level', 'value');
    $form['field_dam_access_groups'][LANGUAGE_NONE]['#default_value'][0] = (empty($node->field_dam_access_groups[LANGUAGE_NONE][0]['value'])) ? fnet_common_get_field_value('node', $parent_node, 'field_dam_access_groups', 'value') : fnet_common_get_field_value('node', $node, 'field_dam_access_groups', 'value');
    $form['field_dam_industry'][LANGUAGE_NONE]['#default_value'][0] = (empty($node->field_dam_industry[LANGUAGE_NONE][0]['value'])) ? fnet_common_get_field_value('node', $parent_node, 'field_dam_industry', 'value') : fnet_common_get_field_value('node', $node, 'field_dam_industry', 'value');
    if (empty($node->field_dam_related_product[LANGUAGE_NONE])) {
      if (!empty($parent_node->field_dam_related_product[LANGUAGE_NONE])) {
        foreach ($parent_node->field_dam_related_product[LANGUAGE_NONE] as $value) {
          $form['field_dam_related_product'][LANGUAGE_NONE]['#default_value'][] = $value['nid'];
        }
      }
    }
    $form['field_dam_business_entity'][LANGUAGE_NONE]['#default_value'][0] = (empty($node->field_dam_business_entity[LANGUAGE_NONE][0]['value'])) ? fnet_common_get_field_value('node', $parent_node, 'field_dam_business_entity', 'value') : fnet_common_get_field_value('node', $node, 'field_dam_business_entity', 'value');
  }

  unset($form['actions']['submit']['#submit']);
  unset($form['actions']['preview']);
  $form['actions']['delete']['#submit'] = ['digital_asset_node_form_delete_submit'];

  // Taken from the bad function digital_asset_node_form()
  // Find if this is a child node.
  /*
  if (fnet_common_get_field_value('digital_asset', $node, 'field_dam_parent', 'nid')) {
    $form['#theme'] = array('digital_asset_child_node_form');
  }
  drupal_set_title(digital_asset_page_title($node));
  if (!empty($form['#submit']) && is_array($form['#submit'])) {
    if (!in_array('digital_asset_node_form_submit', $form['#submit'])) {
      $form['#submit'][] = 'digital_asset_node_form_submit';
    }
  }
  else {
    $form['#submit'] = array('digital_asset_node_form_submit');
  }
  */
}

/**
 * Implements hook_node_form_after_build().
 */
function digital_asset_node_form_after_build($form, &$form_state) {
  unset($form['group_dam_ccs_printing']['field_dam_cdn_status_pod']);
  return $form;
}

/**
 * Implements hook_theme().
 */
function digital_asset_theme() {
  $hooks = [];
  $base = [
    'path' => drupal_get_path('module', 'digital_asset') . '/theme',
  ];
  $hooks['digital_asset_node_form'] = $base + [
    'template' => 'digital_asset_node_form',
    'render element' => 'form',
  ];
  $hooks['digital_asset_child_node_form'] = $base + [
    'template' => 'digital_asset_child_node_form',
    'render element' => 'form',
  ];
  $hooks['digital_asset_main_menu'] = $base + [
    'template' => 'digital_asset_main_menu',
    'variables' => [
      'menu_items' => NULL,
    ],
  ];
  $hooks['digital_asset'] = $base + [
    'template' => 'digital_asset',
    'variables' => [
      'node' => NULL,
    ],
  ];
  $hooks['digital_asset_page_view_form'] = $base + [
    'template' => 'digital_asset_page_view_form',
    'render element' => 'form',
  ];
  $hooks['digital_asset_asset_query_form'] = $base + [
    'template' => 'digital_asset_asset_query_form',
    'render element' => 'form',
  ];
  $hooks['digital_asset_query_by_product_form'] = $base + [
    'template' => 'digital_asset_query_by_product_form',
    'render element' => 'form',
  ];
  return $hooks;
}

/**
 * Implements hook_node_form().
 */
function digital_asset_node_form($form, &$form_state, $node, $is_child = FALSE) {
  form_load_include($form_state, 'inc', 'node', 'node.pages');
  $form = node_form($form, $form_state, $node);
  /* For Testing
  if (module_exists('devel')) {
    dpm($form);
  }
  */
  if (!empty($form['#submit']) && is_array($form['#submit'])) {
    if (!in_array('digital_asset_node_form_submit', $form['#submit'])) {
      $form['#submit'][] = 'digital_asset_node_form_submit';
    }
  }
  else {
    $form['#submit'] = ['digital_asset_node_form_submit'];
  }
  if ($is_child) {
    $form['#theme'] = ['digital_asset_child_node_form'];
  }

  return $form;
}

/*
if (fnet_common_get_field_value('digital_asset', $node, 'field_dam_parent', 'nid')) {
    $form['#theme'] = array('digital_asset_child_node_form');
  }
  drupal_set_title(digital_asset_page_title($node));
  if (!empty($form['#submit']) && is_array($form['#submit'])) {
    if (!in_array('digital_asset_node_form_submit', $form['#submit'])) {
      $form['#submit'][] = 'digital_asset_node_form_submit';
    }
  }
  else {
    $form['#submit'] = array('digital_asset_node_form_submit');
  }
 */

/**
 * Implements hook_node_form_validate().
 */
function digital_asset_node_form_validate($form, &$form_state) {
  $values = &$form_state['values'];
  $is_insert = empty($form['#node']->nid);
  $is_update = !$is_insert;
  if (!empty($values['field_dam_asset_file'][LANGUAGE_NONE][0]['fid'])) {
    $query = db_select('file_managed', 'f')
      ->fields('f', ['filename'])
      ->condition('fid', $values['field_dam_asset_file'][LANGUAGE_NONE][0]['fid']);
    $filename = $query->execute()->fetchField();
  }
  else {
    $filename = '';
  }
  if (!empty($values['field_dam_asset_file_pod'][LANGUAGE_NONE][0]['fid'])) {
    $query = db_select('file_managed', 'f')
      ->fields('f', ['filename'])
      ->condition('fid', $values['field_dam_asset_file_pod'][LANGUAGE_NONE][0]['fid']);
    $pod_filename = $query->execute()->fetchField();
  }
  else {
    $pod_filename = '';
  }
  if ($is_update) {
    if ($values['field_dam_document_id'][LANGUAGE_NONE][0]['value'] != $form['#node']->field_dam_document_id[LANGUAGE_NONE][0]['value']) {
      form_set_error('field_dam_document_id', "You can't change the Document Id of an existing asset");
    }
  }
  else {
    // If the document id field is empty assign a number.
    if (empty($values['field_dam_document_id'][LANGUAGE_NONE][0]['value'])) {
      $values['field_dam_document_id'][LANGUAGE_NONE][0]['value'] = variable_get('digital_asset_next_document_id', 7000000);
      variable_set('digital_asset_next_document_id', $values['field_dam_document_id'][LANGUAGE_NONE][0]['value'] + 1);
    }
    else {
      if (digital_asset_is_duplicate_document_id($values['field_dam_document_id'][LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_dam_document_id', 'Duplicate Document Id');
      }
    }
  }
  if ((empty($values['field_dam_original_filename'][LANGUAGE_NONE][0]['value']) && (!empty($filename)))) {
    $values['field_dam_original_filename'][LANGUAGE_NONE][0]['value'] = $filename;
  }
  if (empty($values['field_dam_storage_file_folder'][LANGUAGE_NONE][0]['value'])) {
    $values['field_dam_storage_file_folder'][LANGUAGE_NONE][0]['value'] = trim(variable_get('digital_asset_cdn_download_folder', ''));
  }
  if (empty($values['field_dam_storage_file_folder_po'][LANGUAGE_NONE][0]['value'])) {
    $values['field_dam_storage_file_folder_po'][LANGUAGE_NONE][0]['value'] = trim(variable_get('digital_asset_cdn_download_folder_pod', ''));
  }
  if (!empty($filename)) {
    if ($values['field_dam_keep_original_filename'][LANGUAGE_NONE][0]['value']) {
      $storage_filename = $filename;
      $values['field_dam_storage_filename'][LANGUAGE_NONE][0]['value'] = $storage_filename;
    }
    else {
      if (!empty($filename)) {
        $ext = pathinfo($filename, PATHINFO_EXTENSION);
        $storage_filename = $values['field_dam_document_id'][LANGUAGE_NONE][0]['value'] . '-';
        $storage_filename .= $values['field_dam_revision_letter'][LANGUAGE_NONE][0]['value'] . '-';
        $storage_filename .= $values['field_dam_language'][LANGUAGE_NONE][0]['value'] . '.' . $ext;
        $storage_filename = strtolower($storage_filename);
        $values['field_dam_storage_filename'][LANGUAGE_NONE][0]['value'] = $storage_filename;
      }
      if (!empty($pod_filename)) {
        $ext = pathinfo($pod_filename, PATHINFO_EXTENSION);
        $pod_storage_filename = $values['field_dam_document_id'][LANGUAGE_NONE][0]['value'] . '-';
        $pod_storage_filename .= $values['field_dam_revision_letter'][LANGUAGE_NONE][0]['value'] . '-';
        $pod_storage_filename .= $values['field_dam_language'][LANGUAGE_NONE][0]['value'] . '-pod.' . $ext;
        $pod_storage_filename = strtolower($pod_storage_filename);
        $values['field_dam_storage_filename_pod'][LANGUAGE_NONE][0]['value'] = $pod_storage_filename;
      }
    }
  }
  if ($is_insert) {
    if (!empty($values['field_dam_asset_file'][LANGUAGE_NONE][0]['fid'])) {
      $values['field_dam_cdn_status'][LANGUAGE_NONE][0]['value'] = 'Pending';
    }
    else {
      if (!empty($values['field_dam_edoc_url'][LANGUAGE_NONE][0]['value'])) {
        $values['field_dam_cdn_status'][LANGUAGE_NONE][0]['value'] = 'eDoc';
      }
    }
    if (!empty($values['field_dam_asset_file_pod'][LANGUAGE_NONE][0]['fid'])) {
      $values['field_dam_cdn_status_pod'][LANGUAGE_NONE][0]['value'] = 'Pending';
    }
  }
  else {
    if (!empty($values['field_dam_asset_file'][LANGUAGE_NONE][0]['fid'])) {
      $values['field_dam_cdn_status'][LANGUAGE_NONE][0]['value'] = 'Pending';
    }
    if (!empty($values['field_dam_asset_file_pod'][LANGUAGE_NONE][0]['fid'])) {
      $values['field_dam_cdn_status_pod'][LANGUAGE_NONE][0]['value'] = 'Pending';
    }
  }

  $start_date = $values['field_dam_availability_date'][LANGUAGE_NONE][0]['value'];

  $end_date = $values['field_dam_availability_date'][LANGUAGE_NONE][0]['value2'];
  if (($end_date == $start_date) || empty($end_date)) {
    $start = strtotime($start_date);
    // Twenty years.
    $end = $start + (20 * 365.25 * 24 * 60 * 60);
    $values['field_dam_availability_date'][LANGUAGE_NONE][0]['value2'] = date('Y-m-d\TH:i:s', $end);
  }
  if (strtolower($values['field_dam_asset_type'][LANGUAGE_NONE][0]['value']) == 'product software') {
    $values['field_dam_export_controlled'][LANGUAGE_NONE][0]['value'] = TRUE;
  }
  if (((strtolower($values['field_dam_asset_type'][LANGUAGE_NONE][0]['value']) == 'webcasts') || (strtolower($values['field_dam_asset_type'][LANGUAGE_NONE][0]['value']) == 'white papers')) && (empty($values['field_dam_industry'][LANGUAGE_NONE][0]['value']))) {
    form_set_error('field_dam_industry', 'Industry must be selected for Webcasts and White Papers.');
  }
}

/**
 * Implements hook_node_form_submit().
 */
function digital_asset_node_form_submit($form, &$form_state) {

  $node = (object) $form_state['values'];

  // These need INT values, will error on empty strings (''), so removing.
  if (fnet_common_get_field_value('node', $node, 'field_dam_order_quantity_max') == '') {
    unset($node->field_dam_order_quantity_max);
  }
  if (fnet_common_get_field_value('node', $node, 'field_dam_uom_quantity') == '') {
    unset($node->field_dam_uom_quantity);
  }
  if (fnet_common_get_field_value('node', $node, 'field_dam_file_size') == '') {
    unset($node->field_dam_file_size);
  }

  $node = node_submit($node);
  $form_state['node'] = $node;
  $form_state['rebuild'] = TRUE;
  $insert = empty($node->nid);
  try {
    node_save($node);
  }
  catch (Exception $e) {
    watchdog('Digital Asset', $e->getMessage());
  }

  $node_link = l(t('view'), 'digital_asset/' . $node->nid);
  $watchdog_args = [
    '@type' => $node->type,
    '%title' => $node->title,
  ];
  $t_args = [
    '@type' => node_type_get_name($node),
    '%title' => $node->title,
  ];

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been updated.', $t_args));
  }
  if ($node->nid) {
    unset($form_state['rebuild']);
    $form_state['nid'] = $node->nid;
    $form_state['redirect'] = 'digital_asset/' . $form_state['nid'] . '/view';
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The asset could not be saved.'), 'error');
  }
  // Change ccs spreadsheet records as necessary.
  $node_before = $form['#node'];
  digital_asset_ccs_spreadsheet_update($node_before, $node);

  // Queue for upload to cdn.
  if (!empty($node->field_dam_asset_file[LANGUAGE_NONE][0]['fid'])) {
    digital_asset_queue_for_ftp($node);
  }
  if (!empty($node->field_dam_asset_file_pod[LANGUAGE_NONE][0]['fid'])) {
    digital_asset_queue_for_ftp($node, 'put', $pod = TRUE);
  }
}

/**
 * Implements hook_node_delete().
 */
function digital_asset_node_delete($node) {
  if ($node->type == 'digital_asset') {
    if (!empty($node->field_dam_storage_filename[LANGUAGE_NONE][0]['value'])) {
      digital_asset_queue_for_ftp($node, 'delete', $pod = FALSE);
    }
    if (!empty($node->field_dam_storage_filename_pod[LANGUAGE_NONE][0]['value'])) {
      digital_asset_queue_for_ftp($node, 'delete', $pod = TRUE);
    }
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * TODO: this is a hack because we are not using any node access restrictions.
 */
function digital_asset_preprocess_page(&$variables) {
  if (isset($variables['node']) && $variables['node']->type == 'digital_asset') {
    if (!user_access('access digital asset system')) {
      drupal_goto();
    }
  }
}

/**
 * Implements hook_init().
 */
function digital_asset_init() {
  drupal_add_css(drupal_get_path('module', 'digital_asset') . '/digital_asset.css');
}

/**
 * Node delete confirm form.
 *
 * @param $form
 * @param $form_state
 * @param $node
 * @return mixed
 */
function digital_asset_delete_confirm($form, &$form_state, $node) {
  $form['nid'] = [
    '#type' => 'value',
    '#value' => $node->nid,
  ];
  $text = t('Are you sure you want to delete %title?', ['%title' => $node->title]);
  return confirm_form($form, $text, isset($_GET['destination']) ? $_GET['destination'] : 'digital_asset/' . $node->nid, t('This action cannot be undone. Deleting the asset removes it completely and deletes it from the CDN.  Consider changing the Document Status to Archive instead.'), t('Delete'), t('Cancel'));
}

/**
 * Implements hook_node_form_delete_submit().
 */
function digital_asset_node_form_delete_submit($form, &$form_state) {
  $destination = '';
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $node = $form['#node'];
  $form_state['redirect'] = [
    'digital_asset/' . $node->nid . '/delete',
  ];
}

/**
 * Node delete submit.
 *
 * @param $form
 * @param $form_state
 */
function digital_asset_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    node_delete($form_state['values']['nid']);
  }
  $form_state['redirect'] = 'digital_asset/list';
}

/**
 * Construct page title string.
 *
 * @param $node
 * @return string
 */
function digital_asset_page_title($node) {
  return fnet_common_get_field_value('node', $node, 'field_dam_document_id', 'value') . ' - ' . $node->title;
}

/**
 * Queue file for ftp to CDN.
 *
 * @param $node
 * @param string $operation
 * @param bool $pod
 * @return bool|int
 */
function digital_asset_queue_for_ftp($node, $operation = 'put', $pod = FALSE) {
  if ($operation == 'put') {
    if (($pod && empty($node->field_dam_asset_file_pod[LANGUAGE_NONE][0]['fid'])) || (!$pod && empty($node->field_dam_asset_file[LANGUAGE_NONE][0]['fid']))) {
      return FALSE;
    }
  }
  $record = new stdClass();
  $record->nid = $node->nid;
  $record->pod = $pod;
  if ($pod) {
    $remote_file_folder = variable_get('digital_asset_cdn_upload_folder_pod', '');
    $remote_filename = fnet_common_get_field_value('node', $node, 'field_dam_storage_filename_pod', 'value');
    if (!empty($node->field_dam_asset_file_pod[LANGUAGE_NONE][0]['fid'])) {
      $query = db_select('file_managed', 'f')
        ->fields('f', [
          'uri',
          'filesize',
        ])
        ->condition('fid', fnet_common_get_field_value('node', $node, 'field_dam_asset_file_pod', 'fid'));
      $result = $query->execute();
      foreach ($result as $row) {
        $record->local_file_path = $row->uri;
        $record->local_file_size = $row->filesize;
      }
    }
  }
  else {
    $remote_file_folder = variable_get('digital_asset_cdn_upload_folder', '');
    $remote_filename = fnet_common_get_field_value('node', $node, 'field_dam_storage_filename', 'value');
    if (!empty($node->field_dam_asset_file[LANGUAGE_NONE][0]['fid'])) {
      $query = db_select('file_managed', 'f')
        ->fields('f', [
          'uri',
          'filesize',
        ])
        ->condition('fid', fnet_common_get_field_value('node', $node, 'field_dam_asset_file', 'fid'));
      $result = $query->execute();
      foreach ($result as $row) {
        $record->local_file_path = $row->uri;
        $record->local_file_size = $row->filesize;
      }
    }
  }
  $record->remote_file_folder = $remote_file_folder;
  $record->remote_file_name = $remote_filename;
  $record->remote_file_size = 0;
  $record->ftp_operation = strtolower($operation);
  $record->operation_status = FALSE;
  $record->updated = REQUEST_TIME;

  $query = db_select('digital_asset_ftp', 'd')->fields('d', ['ftpid']);
  $query->condition('remote_file_name', $remote_filename);
  $query->condition('remote_file_folder', $remote_file_folder);
  $query->condition('ftp_operation', $operation);
  $query->condition('operation_status', FALSE);
  $ftpid = $query->execute()->fetchField();

  if ($ftpid) {
    $record->ftpid = $ftpid;
    $update = ['ftpid'];
  }
  else {
    $record->created = $record->updated;
    $update = [];
  }
  $result = drupal_write_record('digital_asset_ftp', $record, $update);
  if (($result != SAVED_NEW) && ($result != SAVED_UPDATED)) {
    watchdog('digital_asset', 'Error writing digital_asset_ftp %operation record for %file', [
      '%operation' => $operation,
      '%file' => $record->local_file_path,
    ], WATCHDOG_ERROR);
  }
  return $result;
}

/**
 * Delete local file after ftp to CDN.
 *
 * @param $nid
 * @param bool $pod
 * @throws \Exception
 */
function digital_asset_delete_local_file($nid, $pod = FALSE) {
  $node = node_load($nid);
  if ($pod) {
    $fid = fnet_common_get_field_value('node', $node, 'field_dam_asset_file_pod', 'fid');
    $node->field_dam_asset_file_pod[LANGUAGE_NONE][0]['fid'] = NULL;
    $node->field_dam_asset_file_pod[LANGUAGE_NONE][0]['list'] = NULL;
    $node->field_dam_asset_file_pod[LANGUAGE_NONE][0]['data'] = NULL;
  }
  else {
    $fid = fnet_common_get_field_value('node', $node, 'field_dam_asset_file', 'fid');
    $node->field_dam_asset_file[LANGUAGE_NONE][0]['fid'] = NULL;
    $node->field_dam_asset_file[LANGUAGE_NONE][0]['list'] = NULL;
    $node->field_dam_asset_file[LANGUAGE_NONE][0]['data'] = NULL;
  }
  node_save($node);
  $file = file_load($fid);
  if ($file) {
    file_delete($file);
  }
}

/**
 * Process operations on FTP queue.
 *
 * @return bool|int
 * @throws \Exception
 */
function digital_asset_ftp_upload() {
  $file_count = 0;
  $ftp_folder = '';
  $connection = FALSE;
  $result = db_query('SELECT * FROM {digital_asset_ftp} WHERE operation_status = :operation_status AND retries < :retries ORDER BY created', [
    ':operation_status' => 0,
    ':retries' => variable_get('digital_asset_cdn_ftp_retries', 3),
  ]);
  if ($result) {
    if (!($connection = digital_asset_ftp_connect())) {
      return FALSE;
    }
  }
  foreach ($result as $record) {
    if ($ftp_folder != $record->remote_file_folder) {
      if (!ftp_chdir($connection, $record->remote_file_folder)) {
        watchdog('digital_asset', "Couldn't ftp chdir to folder %folder", ['%folder' => $record->remote_file_folder], WATCHDOG_ERROR);
        continue;
      }
      $ftp_folder = $record->remote_file_folder;
    }
    switch ($record->ftp_operation) {
      case 'put':
        $record->operation_status = digital_asset_ftp_put($connection, $record->local_file_path, $record->remote_file_name);
        if ($record->operation_status) {
          $record->remote_file_size = ftp_size($connection, $record->remote_file_name);
          $node = node_load($record->nid);
          if ($node) {
            $node->field_dam_cdn_status[LANGUAGE_NONE][0]['value'] = 'Uploaded';
            $node->field_dam_file_size[LANGUAGE_NONE][0]['value'] = $record->remote_file_size;
            node_save($node);
          }
          digital_asset_delete_local_file($record->nid, $record->pod);
          $file_count++;
        }
        else {
          $record->retries++;
        }
        break;

      case 'delete':
        $record->operation_status = digital_asset_ftp_delete($connection, $record->remote_file_name);
        if ($record->operation_status) {
          $file_count++;
        }
        else {
          $record->retries++;
        }
        break;
    }
    $record->updated = REQUEST_TIME;
    if (drupal_write_record('digital_asset_ftp', $record, ['ftpid']) != SAVED_UPDATED) {
      watchdog('digital_asset', 'Error writing digital_asset_ftp record. ftpid:%ftpid', ['%ftpid' => $record->ftpid], WATCHDOG_ERROR);
    }
  }
  ftp_close($connection);
  return $file_count;
}

/**
 * Helper function for FTP processing.
 *
 * @return bool|resource
 */
function digital_asset_ftp_connect() {
  $ftp_server = variable_get('digital_asset_cdn_upload_server', '');
  $connection = ftp_connect($ftp_server);
  // Login with username and password.
  $ftp_user_name = variable_get('digital_asset_cdn_username', '');
  $ftp_user_pass = variable_get('digital_asset_cdn_password', '');
  $login_result = ftp_login($connection, $ftp_user_name, $ftp_user_pass);
  ftp_pasv($connection, TRUE);
  // Check connection.
  if ((!$connection) || (!$login_result)) {
    watchdog('digital_asset', 'FTP connection failed.', [], WATCHDOG_ERROR);
    ftp_close($connection);
    return FALSE;
  }
  return $connection;
}

/**
 * Helper function for FTP processing.
 *
 * @param $connection
 * @param $file_path
 * @param $remote_filename
 * @return bool
 */
function digital_asset_ftp_put($connection, $file_path, $remote_filename) {
  if (!file_exists($file_path)) {
    watchdog('digital_asset', "CDN FTP upload failed, upload file %file doesn't exist.", ['%file' => $file_path], WATCHDOG_ERROR);
    return FALSE;
  }
  if (ftp_put($connection, $remote_filename, $file_path, FTP_BINARY)) {
    watchdog('digital_asset', 'File %file uploaded to CDN as %remote', [
      '%file' => $file_path,
      '%remote' => $remote_filename,
    ], WATCHDOG_INFO);
    return TRUE;
  }
  else {
    watchdog('digital_asset', 'CDN FTP upload of %file failed, FTP error.', ['%file' => $file_path], WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Helper function for FTP processing.
 *
 * @param $connection
 * @param $filename
 * @return bool
 */
function digital_asset_ftp_delete($connection, $filename) {
  $size = ftp_size($connection, $filename);
  if ($size <= 0) {
    watchdog('digital_asset', "CDN FTP delete failed, file %file doesn't exist on server.", ['%file' => $filename], WATCHDOG_ERROR);
    return FALSE;
  }
  $deleted = ftp_delete($connection, $filename);
  if (!$deleted) {
    watchdog('digital_asset', 'CDN FTP delete of file %file failed, FTP error.', ['%file' => $filename], WATCHDOG_ERROR);
    return FALSE;
  }
  else {
    watchdog('digital_asset', 'File %file deleted from CDN server.', ['%file' => $filename], WATCHDOG_INFO);
    return TRUE;
  }

}

/**
 * Build CCS record from node.
 *
 * @param $node
 * @param $action_code
 * @return \stdClass
 */
function digital_asset_ccs_record($node, $action_code) {
  $record = new stdClass();
  $record->document_id = fnet_common_get_field_value('node', $node, 'field_dam_document_id', 'value');
  $record->version = fnet_common_get_field_value('node', $node, 'field_dam_revision_letter', 'value');
  $record->status = (strtolower(fnet_common_get_field_value('node', $node, 'field_dam_document_status', 'value')) == 'live') ? 'Active' : 'Inactive';
  $record->name = $node->title;
  $record->language = fnet_helper_iso_language_to_english(fnet_common_get_field_value('node', $node, 'field_dam_language', 'value'));
  $record->cost_center = fnet_common_get_field_value('node', $node, 'field_dam_cost_center', 'value');
  $record->owner = digital_asset_get_document_owner($node->nid);
  $record->print_on_demand = fnet_common_get_field_value('node', $node, 'field_dam_print_on_demand', 'value');
  $record->unit_of_measure = fnet_common_get_field_value('node', $node, 'field_dam_unit_of_measure', 'value');
  $record->uom_quantity = fnet_common_get_field_value('node', $node, 'field_dam_uom_quantity', 'value');
  $record->order_qty_max = fnet_common_get_field_value('node', $node, 'field_dam_order_quantity_max', 'value');
  $record->level_1_entity = fnet_common_get_field_value('node', $node, 'field_dam_l1_category', 'value');
  $record->level_2_catalog = fnet_common_get_field_value('node', $node, 'field_dam_l2_category', 'value');
  $record->level_3_group = fnet_common_get_field_value('node', $node, 'field_dam_l3_category', 'value');
  $record->level_4_sub_group = fnet_common_get_field_value('node', $node, 'field_dam_l4_category', 'value');
  $record->level_5_end_group = '';
  $record->ccs_action_code = $action_code;
  return $record;
}

/**
 * Write CCS record.
 *
 * @param $record
 * @return bool|int
 */
function digital_asset_ccs_record_write(&$record) {
  $query = db_select('digital_asset_ccs', 'c')->fields('c', ['dacid'])
    ->condition('document_id', $record->document_id)
    ->condition('version', $record->version)
    ->condition('ccs_action_code', $record->ccs_action_code)
    ->isNull('exported');
  $dacid = $query->execute()->fetchField();
  if ($dacid) {
    $record->dacid = $dacid;
    $update = ['dacid'];
  }
  else {
    $update = [];
  }
  $record->updated = REQUEST_TIME;
  $result = drupal_write_record('digital_asset_ccs', $record, $update);
  return $result;
}

/**
 * Update the digital_asset_css table based on node insert or update.
 *
 * @param $node_before
 * @param $node
 */
function digital_asset_ccs_spreadsheet_update($node_before, $node) {
  // Update ccs attribute.
  if ((fnet_common_get_field_value('node', $node_before, 'field_dam_bulk_fulfillment', 'value')) && (fnet_common_get_field_value('node', $node, 'field_dam_bulk_fulfillment', 'value'))) {
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_revision', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_revision', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'replace');
    }
    if ($node_before->title != $node->title) {
      digital_asset_ccs_change($node_before, $node, 'update');
    }
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_cost_center', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_cost_center', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'update');
    }
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_owner', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_owner', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'update');
    }
    if ((fnet_common_get_field_value('node', $node_before, 'field_dam_document_status', 'value') == 'live') && (fnet_common_get_field_value('node', $node, 'field_dam_document_status', 'value') != 'live')) {
      digital_asset_ccs_change($node_before, $node, 'remove');
    }
    if ((fnet_common_get_field_value('node', $node_before, 'field_dam_document_status', 'value') != 'live') && (fnet_common_get_field_value('node', $node, 'field_dam_document_status', 'value') == 'live')) {
      digital_asset_ccs_change($node_before, $node, 'update');
    }
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_print_on_demand', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_print_on_demand', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'update');
    }
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_unit_of_measure', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_unit_of_measure', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'update');
    }
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_uom_quantity', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_uom_quantity', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'update');
    }
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_order_quantity_max', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_order_quantity_max', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'update');
    }
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_l1_category', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_l1_category', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'update catalog');
    }
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_l2_category', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_l2_category', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'update catalog');
    }
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_l3_category', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_l3_category', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'update catalog');
    }
    if (fnet_common_get_field_value('node', $node_before, 'field_dam_l4_category', 'value') != fnet_common_get_field_value('node', $node, 'field_dam_l4_category', 'value')) {
      digital_asset_ccs_change($node_before, $node, 'update catalog');
    }
  }
  // Add to ccs spreadsheet.
  elseif (((empty($node_before->field_dam_bulk_fulfillment[LANGUAGE_NONE][0]['value'])) || (!fnet_common_get_field_value('node', $node_before, 'field_dam_bulk_fulfillment', 'value'))) && (fnet_common_get_field_value('node', $node, 'field_dam_bulk_fulfillment', 'value'))) {
    digital_asset_ccs_change($node_before, $node, 'add');
  }
  // Remove from ccs spreadsheet.
  elseif ((fnet_common_get_field_value('node', $node_before, 'field_dam_bulk_fulfillment', 'value')) && (fnet_common_get_field_value('node', $node, 'field_dam_bulk_fulfillment', 'value') == FALSE)) {
    digital_asset_ccs_change($node_before, $node, 'remove');
  }

}

/**
 * Get product related to a document.
 *
 * @param $document_nid
 * @return array
 */
function digital_asset_get_related_products($document_nid) {
  $products = [];
  $query = db_select('node', 'n')->condition('n.nid', $document_nid);
  $query->addJoin('INNER', 'field_data_field_dam_related_product', 'p', 'n.nid = p.entity_id');
  $query->addJoin('INNER', 'node', 'pn', 'p.field_dam_related_product_nid = pn.nid');
  $query->fields('p', ['field_dam_related_product_nid']);
  $query->fields('pn', ['title']);
  $result = $query->execute();
  if ($result) {
    foreach ($result as $row) {
      $products[] = [
        'nid' => $row->field_dam_related_product_nid,
        'title' => $row->title,
      ];
    }
  }
  return $products;
}

/**
 * Return a document id for a nid.
 *
 * @param $document_nid
 * @return mixed
 */
function digital_asset_get_document_id($document_nid) {
  $query = db_select('field_data_field_dam_document_id', 'd')
    ->fields('d', ['field_dam_document_id_value'])
    ->condition('entity_id', $document_nid);
  $document_id = $query->execute()->fetchField();
  return $document_id;
}

/**
 * Helper function for CCS spreadsheet processing.
 *
 * @param $node_before
 * @param $node_after
 * @param $operation
 */
function digital_asset_ccs_change($node_before, $node_after, $operation) {
  switch ($operation) {
    case 'replace':
      $record = digital_asset_ccs_record($node_before, DA_CCS_REMOVE);
      $result = digital_asset_ccs_record_write($record);
      if (!$result) {
        watchdog('digital_asset', 'Error writing CCS record for asset %asset', [
          '%asset' => fnet_common_get_field_value('node', $node_before, 'field_dam_document_id', 'value'),
        ], WATCHDOG_ERROR);
      }
      $record = digital_asset_ccs_record($node_after, DA_CCS_ADD);
      $result = digital_asset_ccs_record_write($record);
      if (!$result) {
        watchdog('digital_asset', 'Error writing CCS record for asset %asset', [
          '%asset' => fnet_common_get_field_value('node', $node_before, 'field_dam_document_id', 'value'),
        ], WATCHDOG_ERROR);
      }
      break;

    case 'add':
      $record = digital_asset_ccs_record($node_after, DA_CCS_ADD);
      $result = digital_asset_ccs_record_write($record);
      if (!$result) {
        watchdog('digital_asset', 'Error writing CCS record for asset %asset', [
          '%asset' => fnet_common_get_field_value('node', $node_before, 'field_dam_document_id', 'value'),
        ], WATCHDOG_ERROR);
      }
      break;

    case 'update':
      $record = digital_asset_ccs_record($node_after, DA_CCS_UPDATE);
      $result = digital_asset_ccs_record_write($record);
      if (!$result) {
        watchdog('digital_asset', 'Error writing CCS record for asset %asset', [
          '%asset' => fnet_common_get_field_value('node', $node_before, 'field_dam_document_id', 'value'),
        ], WATCHDOG_ERROR);
      }
      break;

    case 'update catalog':
      $record = digital_asset_ccs_record($node_after, DA_CCS_UPDATE_CATALOG);
      $result = digital_asset_ccs_record_write($record);
      if (!$result) {
        watchdog('digital_asset', 'Error writing CCS record for asset %asset', [
          '%asset' => fnet_common_get_field_value('node', $node_before, 'field_dam_document_id', 'value'),
        ], WATCHDOG_ERROR);
      }
      break;

    case 'remove':
      $record = digital_asset_ccs_record($node_before, DA_CCS_REMOVE);
      $result = digital_asset_ccs_record_write($record);
      if (!$result) {
        watchdog('digital_asset', 'Error writing CCS record for asset %asset', [
          '%asset' => fnet_common_get_field_value('node', $node_before, 'field_dam_document_id', 'value'),
        ], WATCHDOG_ERROR);
      }
      break;
  }
}

/**
 * Implements hook_cron().
 */
function digital_asset_cron() {
  if (strtolower(variable_get('digital_asset_cdn_enable_cron', 'no')) == 'yes') {
    if ($file_count = digital_asset_ftp_upload()) {
      watchdog('digital_asset', '%count files uploaded to CDN', ['%count' => $file_count], WATCHDOG_INFO);
    }
  }
  $daily_cron_last_run_age = REQUEST_TIME - variable_get('digital_asset_daily_cron_last_run', 0);
  $daily_cron_last_run_age = $daily_cron_last_run_age / 60;
  if ($daily_cron_last_run_age > (24 * 60)) {
    digital_asset_rebuild_owners_table();
    digital_asset_purge_ftp_queue();
    if (strtolower(variable_get('digital_asset_ccs_email_enable_cron', 'no')) == 'yes') {
      if (digital_asset_send_print_vendor_mail()) {
        db_query("UPDATE digital_asset_ccs SET exported=1 WHERE (exported IS NULL) OR (exported = 0)");
      }
    }
    variable_set('digital_asset_daily_cron_last_run', REQUEST_TIME);
    watchdog('digital_asset', 'Daily cron run');
  }
}

/**
 * Check to see if a document id would be a duplicate.
 *
 * @param $document_id
 * @return bool
 */
function digital_asset_is_duplicate_document_id($document_id) {
  $query = db_select('node', 'n');
  $query->addJoin('INNER', 'field_data_field_dam_document_id', 'd', 'n.nid=d.entity_id');
  $query->fields('d', ['field_dam_document_id_value']);
  $query->condition('field_dam_document_id_value', $document_id);
  $exists = $query->execute()->fetchField();
  return ($exists == $document_id);
}

/**
 * Return nid for a document id.
 *
 * @param $document_id
 * @return mixed
 */
function digital_asset_get_document_nid($document_id) {
  $query = db_select('node', 'n')->fields('n', ['n.nid']);
  $query->addJoin('INNER', 'field_data_field_dam_document_id', 'd', 'n.nid = d.entity_id');
  $query->condition('field_dam_document_id_value', $document_id);
  return $query->execute()->fetchField();
}

/**
 * Return array of asset types suitable for form select element options.
 *
 * @return array
 */
function digital_asset_asset_types() {
  $asset_type = field_info_field('field_asset_type');
  $allowed_values = list_allowed_values($asset_type);
  return $allowed_values;
}

/**
 * Mimic legacy function for support pages.
 *
 * @param $type
 * @param string $language
 * @param int $industry
 * @return bool|\stdClass
 */
function digital_asset_list_assets_by_type($type, $language = 'en', $industry = -1) {
  if (!array_key_exists($type, digital_asset_asset_types())) {
    return FALSE;
  }
  $is_gold_user = user_access('Fluke Networks My Account Gold Access');
  $result_set = [];
  $asset_type_id = [
    'white papers' => 16,
    'application notes' => 8,
    'data sheets' => 128,
    'webcasts' => 4194304,
  ];
  // TODO: OMG this sucks. It doesn't even hook into the Digital Asset CT.
  $industries = [
    -1 => '',
    1 => 'Cabling Certification',
    2 => 'Installation and Test',
    3 => 'Telecom Test',
  ];
  $query = db_select('node', 'n');
  $query->addJoin('LEFT', 'field_data_body', 'b', 'n.nid = b.entity_id');
  $query->fields('b', ['body_value']);
  $query->addJoin('INNER', 'field_data_field_dam_document_id', 'doc_id', 'n.nid = doc_id.entity_id');
  $query->fields('doc_id', ['field_dam_document_id_value']);
  $query->addJoin('INNER', 'node_revision', 'r', 'n.vid = r.vid');
  $query->fields('r', ['title']);
  $query->addJoin('INNER', 'field_data_field_dam_asset_type', 'type', 'n.nid = type.entity_id');
  $query->fields('type', ['field_dam_asset_type_value']);
  $query->addJoin('INNER', 'field_data_field_dam_language', 'lang', 'n.nid = lang.entity_id');
  $query->fields('lang', ['field_dam_language_value']);
  $query->addJoin('LEFT', 'field_data_field_dam_file_size', 'size', 'n.nid = size.entity_id');
  $query->fields('size', ['field_dam_file_size_value']);
  $query->addJoin('INNER', 'field_data_field_dam_entitlement_level', 'level', 'n.nid = level.entity_id');
  $query->fields('level', ['field_dam_entitlement_level_value']);
  $query->addJoin('INNER', 'field_data_field_dam_document_status', 'status', 'n.nid = status.entity_id');
  $query->fields('status', ['field_dam_document_status_value']);
  if ($type == 'webcasts') {
    $query->orderBy('r.timestamp', 'DESC');
  }
  else {
    $query->orderBy('r.title');
  }
  $query->condition('field_dam_asset_type_value', $type);
  $query->condition('field_dam_language_value', $language);
  $query->condition('field_dam_document_status_value', 'live');
  $query->condition('field_dam_entitlement_level_value', 'do_not_display', '<>');
  if ($industry > 0) {
    $query->addJoin('LEFT', 'field_data_field_dam_industry', 'industry', 'n.nid = industry.entity_id');
    $query->condition('field_dam_industry_value', $industries[$industry]);
  }
  $result = $query->execute();
  foreach ($result as $row) {
    $output = new stdClass();
    $output->Locked = ($row->field_dam_entitlement_level_value == 'gold') && (!$is_gold_user) ? 'True' : 'Unlocked';
    $output->AssetTypeID = (array_key_exists($row->field_dam_asset_type_value, $asset_type_id)) ? $asset_type_id[$row->field_dam_asset_type_value] : 0;
    $output->AssetID = $row->field_dam_document_id_value;
    $output->AssetTitle = $row->title;
    $output->AssetDescription = $row->body_value;
    $output->asset_type = $row->field_dam_asset_type_value;
    $output->language = $row->field_dam_language_value;
    $output->FileSize = $row->field_dam_file_size_value;
    $output->AssetSecurityLevel = $row->field_dam_entitlement_level_value;
    $result_set[] = $output;
  }
  $assets = new stdClass();
  $assets->Asset = $result_set;
  return $assets;
}

/**
 * Return products keyed by pcat id that have related products with assets.
 *
 * @param $type
 * @return array
 */
/*
SELECT
	p.field_pcatid_value,
	n.title
FROM field_data_field_pcatid AS p
INNER JOIN node n ON p.revision_id = n.vid
WHERE
	n.nid IN
(
  SELECT DISTINCT
				fp.field_related_products_target_id
			FROM
				field_data_field_asset_type a
			INNER JOIN node AS n ON a.revision_id = n.vid
			INNER JOIN field_data_field_related_products AS fp ON fp.revision_id = n.vid
			WHERE a.field_asset_type_value IN ('manual')
			ORDER BY
				fp.field_related_products_target_id ASC
		)
  AND p.field_pcatid_value IS NOT NULL
AND n.status = 1
ORDER BY n.title

fp.field_product_product_id IS NOT NULL
*/
function digital_asset_get_products_with_assets($type) {
  $result_set = [];
  $sql = "SELECT
	p.field_pcatid_value,
	n.title
FROM {field_data_field_pcatid} AS p
INNER JOIN {node} n ON p.revision_id = n.vid
WHERE
	n.nid IN
		(
			SELECT DISTINCT
				fp.field_related_products_target_id
			FROM
				field_data_field_asset_type a
			INNER JOIN node AS n ON a.revision_id = n.vid
			INNER JOIN field_data_field_related_products AS fp ON fp.revision_id = n.vid
			WHERE a.field_asset_type_value IN (:type)
			ORDER BY
				fp.field_related_products_target_id ASC
		)
  AND p.field_pcatid_value IS NOT NULL
	AND n.status = 1
ORDER BY n.title";
  $result = db_query($sql, [':type' => $type]);
  foreach ($result as $row) {
    $result_set[$row->field_pcatid_value] = $row->title;
  }
  return $result_set;
}

/**
 * Digital asset list by PCAT id.
 *
 * @param $pcat_id
 * @param string $language
 * @param null $asset_type
 * @return \stdClass
 */
function digital_asset_list_by_product($pcat_id, $language = 'en', $asset_type = NULL) {
  global $user;
  if (!empty($asset_type) && !is_array($asset_type)) {
    $asset_type = [$asset_type];
  }
  // TODO: Clean this up and test for results.

  $gold_number = check_plain(trim(fnet_common_get_field_value('user', $user, 'field_user_gold_number')));
  $gold_pin = check_plain(trim(fnet_common_get_field_value('user', $user, 'field_user_gold_pin')));
  $is_covered = fnet_sfdc_category_has_gold_coverage($gold_number, $gold_pin, $pcat_id);
  $result_set = [];
  $sql = "SELECT p.entity_id FROM field_data_field_pcatid AS p ";
  $sql .= "INNER JOIN node AS n ON p.revision_id = n.vid ";
  $sql .= "WHERE p.field_pcatid_value = :pcat_id LIMIT 1";
  $product_nid = db_query($sql, [':pcat_id' => $pcat_id])->fetchField();
  if ($product_nid) {
    $query = db_select('node', 'n');
    $query->addJoin('INNER', 'field_data_body', 'b', 'n.nid = b.entity_id');
    $query->fields('b', ['body_value']);
    $query->addJoin('INNER', 'field_data_field_dam_document_id', 'doc_id', 'n.nid = doc_id.entity_id');
    $query->fields('doc_id', ['field_dam_document_id_value']);
    $query->addJoin('INNER', 'node_revision', 'r', 'n.vid = r.vid');
    $query->fields('r', ['title']);
    $query->addJoin('INNER', 'field_data_field_related_products', 'rp', 'n.vid = rp.revision_id');
    $query->addJoin('INNER', 'field_data_field_asset_type', 'type', 'n.nid = type.entity_id');
    $query->fields('type', ['field_asset_type_value']);
    $query->addJoin('INNER', 'field_data_field_dam_language', 'lang', 'n.nid = lang.entity_id');
    $query->fields('lang', ['field_dam_language_value']);
    $query->addJoin('LEFT', 'field_data_field_dam_file_size', 'size', 'n.nid = size.entity_id');
    $query->fields('size', ['field_dam_file_size_value']);
    $query->addJoin('INNER', 'field_data_field_dam_entitlement_level', 'level', 'n.nid = level.entity_id');
    $query->fields('level', ['field_dam_entitlement_level_value']);
    $query->addJoin('INNER', 'field_data_field_dam_document_status', 'status', 'n.nid = status.entity_id');
    $query->fields('status', ['field_dam_document_status_value']);
    $query->addJoin('LEFT OUTER', 'weight_weights', 'weight', 'n.nid = weight.entity_id');
    $query->condition('field_related_products_target_id', $product_nid);
    $query->condition('field_dam_language_value', $language);
    $query->condition('field_dam_document_status_value', 'live');
    $query->condition('field_dam_entitlement_level_value', 'do_not_display', '<>');
    if (!empty($asset_type)) {
      $query->condition('field_asset_type_value', $asset_type, 'IN');
    }
    $query->orderBy('weight.weight', 'ASC');
    $query->orderBy('field_asset_type_value');
    $query->orderBy('r.title');
    $result = $query->distinct()->execute();

    foreach ($result as $row) {
      $output = new stdClass();
      $output->AssetID = $row->field_dam_document_id_value;
      $output->AssetTitle = $row->title;
      $output->AssetDescription = $row->body_value;
      $output->asset_type = $row->field_asset_type_value;
      $output->language = $row->field_dam_language_value;
      $output->FileSize = $row->field_dam_file_size_value;
      $output->AssetSecurityLevel = $row->field_dam_entitlement_level_value;
      $output->Locked = ($row->field_dam_entitlement_level_value == 'gold') && (!$is_covered) ? 'True' : 'Unlocked';
      $result_set[] = $output;
    }
    $assets = new stdClass();
    $assets->Asset = $result_set;
    return $assets;
  }
}

/**
 * Get a full name for an asset owner.
 *
 * @param $uid
 * @return string
 */
function digital_asset_get_document_owner($uid) {
  global $user;
  $account = ($user->uid == $uid) ? $user : user_load($uid);
  $full_name = fnet_common_get_field_value('user', $account, 'field_user_first_name') . ' ' . fnet_common_get_field_value('user', $account, 'field_user_last_name');
  return $full_name;
}

/**
 * Return an array of document owners suitable for form select element options.
 *
 * @return array
 */
function digital_asset_get_document_owners() {
  $result = db_query("SELECT uid, full_name FROM digital_asset_owners ORDER BY last_name");
  if ($result) {
    $options = [];
    foreach ($result as $row) {
      $options[$row->uid] = $row->full_name;
    }
    return $options;
  }
  return [];
}

/**
 * Rebuild the owners table in the database.
 *
 * @return bool
 * @throws \Exception
 */
function digital_asset_rebuild_owners_table() {
  db_query('TRUNCATE TABLE digital_asset_owners');
  $result = db_query("SELECT DISTINCT uid FROM node WHERE type = 'digital_asset'");
  foreach ($result as $row) {
    $account = user_load($row->uid);
    $first_name = $account->field_address[LANGUAGE_NONE][0]['first_name'];
    $last_name = $account->field_address[LANGUAGE_NONE][0]['last_name'];
    $full_name = $first_name . ' ' . $last_name;
    $query = db_insert('digital_asset_owners')
      ->fields([
        'uid',
        'first_name',
        'last_name',
        'full_name',
      ])
      ->values([$row->uid, $first_name, $last_name, $full_name])
      ->execute();
  }
  return TRUE;
}

/**
 * Output CCS printing spreadsheet file from table digital_asset_ccs.
 *
 * @param null $date
 * @return string
 */
function digital_asset_create_print_vendor_spreadsheet($date = NULL) {
  if (!empty($date)) {
    $start_date = strtotime($date);
    $date_where = 'OR updated > ' . $start_date;
  }
  else {
    $date_where = '';
  }
  $directory = 'public://ams';
  if (!is_dir($directory)) {
    file_prepare_directory($directory);
  }
  $output_file_path = $directory . '/digital_assets.csv';
  $output_file = fopen($output_file_path, 'w');
  fputcsv($output_file, [
    'document_id',
    'version',
    'status',
    'name',
    'cost_center',
    'owner',
    'language',
    'print_on_demand',
    'unit_of_measure',
    'uom_quantity',
    'order_qty_max',
    'level_1_entity',
    'level_2_catalog',
    'level_3_group',
    'level_4_sub_group',
    'level_5_end_group',
    'ccs_action_code',
    'updated',
  ]);
  $sql = <<<eot
SELECT
	da.document_id,
	da.version,
	da.`status`,
	da.`name`,
	da.cost_center,
	da.`owner`,
	da.`language`,
	da.print_on_demand,
	da.unit_of_measure,
	da.uom_quantity,
	da.order_qty_max,
	da.level_1_entity,
	da.level_2_catalog,
	da.level_3_group,
	da.level_4_sub_group,
	da.level_5_end_group,
	da.ccs_action_code,
	FROM_UNIXTIME(da.updated) AS updated
FROM
	digital_asset_ccs AS da
WHERE
	da.exported IS NULL
	$date_where
ORDER BY
	da.document_id ASC,
	da.version ASC,
	da.`status` ASC
eot;
  $result = db_query($sql);
  foreach ($result as $data) {
    fputcsv($output_file, (array) $data);
  }
  fclose($output_file);
  return $output_file_path;
}

/**
 * @return bool
 */
function digital_asset_send_print_vendor_mail() {
  $message = [];
  $message['id'] = 'print_vendor_spreadsheet';
  $message['from'] = variable_get('site_mail', '');
  $message['to'] = variable_get('digital_asset_ccs_email_to', '');
  $message['subject'] = variable_get('digital_asset_ccs_email_subject', '');
  $message['body'] = "<p>\n";
  $message['body'] .= "Digital asset status update.\n";
  $message['body'] .= "</p>\n";
  $headers = [
    'From' => $message['from'],
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html;charset=utf-8',
  ];
  $cc = variable_get('digital_asset_ccs_email_cc', '');
  if (!empty($cc)) {
    $headers['Cc'] = $cc;
  }
  $message['headers'] = $headers;
  $message['attachments'][] = digital_asset_create_print_vendor_spreadsheet();
  $resultSendMail = fnet_helper_mail_send($message, $html = TRUE);
  if ($resultSendMail != TRUE) {
    watchdog('digital_asset', 'Problem sending email to ' . $message['to'], [], WATCHDOG_ERROR);
  }
  return $resultSendMail;
}

/**
 * @return bool
 */
function digital_asset_purge_ftp_queue() {
  $retries = variable_get('digital_asset_cdn_ftp_retries', 3);
  $age = REQUEST_TIME - (60 * 60 * 24 * 3);
  $or = db_or()->condition('retries', $retries, '=')
    ->condition('operation_status', TRUE)
    ->condition('updated', $age, '<');
  $result = db_delete('digital_asset_ftp')->condition($or)->execute();
  return $result;
}

/**
 * TODO: This is hard-coded crap.
 *
 * @return array
 */
function digital_asset_languages() {
  $languages = [
    'ar' => 'Arabic',
    'bg' => 'Bulgarian',
    'zh' => 'Chinese',
    'tw' => 'Traditional Chinese',
    'cs' => 'Czech',
    'dt' => 'Dothraki',
    'en' => 'English',
    'et' => 'Estonian',
    'fr' => 'French',
    'de' => 'German',
    'el' => 'Greek',
    'hu' => 'Hungarian',
    'it' => 'Italian',
    'ja' => 'Japanese',
    'tlh' => 'Klingon',
    'ko' => 'Korean',
    'lv' => 'Latvian',
    'lt' => 'Lithuanian',
    'pl' => 'Polish',
    'pt' => 'Portuguese',
    'ro' => 'Romanian',
    'ru' => 'Russian',
    'sk' => 'Slovakian',
    'sl' => 'Slovenian',
    'es' => 'Spanish',
    'sv' => 'Swedish',
    'tm' => 'Thembrian',
    'tr' => 'Turkish',
    'vi' => 'Vietnamese',
  ];
  return $languages;
}

/**
 * Implements hook_views_api().
 */
function digital_asset_views_api() {
  return [
    'api' => 3.0,
    'path' => drupal_get_path('module', 'digital_asset') . '/views',
  ];
}
