<?php

/**
 * @file
 * A module that collects utility code and definitions that don't really belong
 * anywhere else, or rise to the level of having their own module.
 */

/**
 * Implementation of hook_menu().
 *
 * Just create FNET top-level menu
 */
function fnet_common_menu() {


$items['admin/fnet'] = array(
    'title' => 'FNET',
    'description' => "FNET Menu",
    'page callback' => 'fnet_common_admin_page',
    'access callback' => 'user_access',
    'access arguments' => array('access administration menu'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;

}



/**
 * Implementation of hook_menu_default_menu_links().
 *
 * Just create FNET top-level menu
 */
function fnet_common_menu_default_menu_links() {
  $menu_links = array();

  // Exported menu link: management_fnet:admin/fnet
  $menu_links['management_fnet:admin/fnet'] = array(
    'menu_name' => 'management',
    'link_path' => 'admin/fnet',
    'router_path' => 'admin/fnet',
    'link_title' => 'FNET',
    'options' => array(
      'attributes' => array(
        'title' => 'FNET',
      ),
      'identifier' => 'management_fnet:admin/fnet',
    ),
    'module' => 'system',
    'hidden' => 0,
    'external' => 0,
    'has_children' => 1,
    'expanded' => 0,
    'weight' => 0,
    'customized' => 0,
    'parent_identifier' => 'management_administration:admin',
  );

  return $menu_links;
}


/**
 * 
 *  Renders the admin/fnet blocks from sub-menu items  (admin/fnet/% )
 */
function fnet_common_admin_page() {

  $blocks = array();

  if ($admin = db_query("SELECT menu_name, mlid FROM {menu_links} WHERE link_path = 'admin/fnet' ")->fetchAssoc()) {

    $result = db_query("
      SELECT m.*, ml.*
      FROM {menu_links} ml
      INNER JOIN {menu_router} m ON ml.router_path = m.path
      WHERE ml.link_path <> 'admin/help' AND menu_name = :menu_name AND ml.plid = :mlid ", $admin, array('fetch' => PDO::FETCH_ASSOC));

    foreach ($result as $item) {

      if (! is_array($item) ) continue;

      _menu_link_translate($item);
      if (!$item ['access']) {
        continue;
      }
      // The link description, either derived from 'description' in hook_menu()
      // or customized via menu module is used as title attribute.
      if (!empty($item ['localized_options']['attributes']['title'])) {
        $item ['description'] = $item ['localized_options']['attributes']['title'];
        unset($item ['localized_options']['attributes']['title']);
      }
      $block = $item;
      $block ['content'] = '';

      $block['title'] = l( $item['title'] , $item['path']  );

      $block ['content'] .= $item['description'];

      if (!empty($block ['content'])) {
        $block ['show'] = TRUE;
      }

      // Prepare for sorting as in function _menu_tree_check_access().
      // The weight is offset so it is always positive, with a uniform 5-digits.
      $blocks [(50000 + $item ['weight']) . ' ' . $item ['title'] . ' ' . $item ['mlid']] = $block;
    }

} // end if admin

  if ($blocks) {
    ksort($blocks);
    return theme('admin_page', array('blocks' => $blocks));
  } else {
    return t('You do not have any administrative items.');
  }

}


/*
*   returns $some_field_name[0]['value'] type variables, prevents undefined index errors
*/

function fnet_common_safe_get($field, $delta = 0, $column = 'value') {

  if ( isset($field[$delta]) && isset($field[$delta][$column]) ) {
    return $field[$delta][$column];
  }else if ( isset($field[LANGUAGE_NONE][$delta]) && isset($field[LANGUAGE_NONE][$delta][$column]) ) {
    return $field[LANGUAGE_NONE][$delta][$column];
  }

  return NULL;

}


/**
 * Get a raw value for a field from an entity.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 * @param array/string $column
 *   Name of the field value column, e.g. 'value'.
 * @param integer $delta
 *   The item delta if there are multiple items.
 *
 * @return array
 *   A renderable array.
 */
function fnet_common_get_field_value($entity_type, $entity, $field_name, $column = 'value', $delta = 0) {
    $values = fnet_common_get_field_values($entity_type, $entity, $field_name);
    if (is_string($column) && isset($values[$delta][$column])) {
        return $values[$delta][$column];
    }
    else {
        return NULL;
    }
}

/**
 * Get the array of values for an entity field.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 *
 * @return array
 *   An indexed array of field values.
 */
function fnet_common_get_field_values($entity_type, $entity, $field_name) {
    if (isset($entity->{$field_name})) {
        $langcode = _fnet_common_get_field_langcode($entity_type, $entity, $field_name);
        if (isset($entity->{$field_name}[$langcode]) && is_array($entity->{$field_name}[$langcode])) {
            return $entity->{$field_name}[$langcode];
        }
    }
    return array();
}


/**
 * Returns the form field language
 *
 * @return string
 *   String of the form field language;
 *   Always returns 'und' as we're not currently using field level language settings
 */
function fnet_common_form_field_language($form) {
  return 'und';
}


/**
 * Helper function to centralize obtaining the language code for a field.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 *
 * @return string
 *   A language code.
 */
function _fnet_common_get_field_langcode($entity_type, $entity, $field_name) {
    // We should be calling field_language() here if doing it properly, but it is
    // unnecessary under the current rules, where all fields are LANGUAGE_NONE.
    //
    // Note that this has caused problems in practice: there are circumstances
    // under which field_language() will intermittently fail to return the right
    // value.
    //$langcode = field_language($entity_type, $entity, $field_name);
    $langcode = LANGUAGE_NONE;
    return $langcode;
}


/**
 * Remove a field value from an entity - removes the whole delta
 * value, even if it has multiple columns.
 *
 * Doesn't save the entity.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 * @param integer $delta
 *   The item delta of the item to remove.
 */
function fnet_common_remove_field_value($entity_type, $entity, $field_name, $delta = 0) {
  $langcode = _fnet_common_get_field_langcode($entity_type, $entity, $field_name);
  unset($entity->{$field_name}[$langcode][$delta]);
  // Reindex remaining fields.
  $entity->{$field_name}[$langcode] = array_values($entity->{$field_name}[$langcode]);
}


/**
 * Set a raw value for a field for an entity.
 *
 * Doesn't save the entity, just makes sure the right field gets set.
 *
 * @param string $value
 *   The value to set.
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 * @param array/string $column
 *   Name of the field value column, e.g. 'value'.
 * @param integer $delta
 *   The item delta if there are multiple items.
 */
function fnet_common_set_field_value($value, $entity_type, $entity, $field_name, $column = 'value', $delta = 0) {
  $langcode = _fnet_common_get_field_langcode($entity_type, $entity, $field_name);
  $entity->{$field_name}[$langcode][$delta][$column] = $value;
}


/**
 * Set the entire array of values for a field.
 *
 * @param array $values
 *   The values to set.
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 */
function fnet_common_set_field_values($values, $entity_type, $entity, $field_name) {
  $langcode = _fnet_common_get_field_langcode($entity_type, $entity, $field_name);
  $entity->{$field_name}[$langcode] = $values;
}


/**
 * Get a renderable array for a field from an entity.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 * @param array/string $display
 *   Either a string with just the type of field formatter or an array of
 *   the field display settings as expected by field_view_field() and
 *   as typically defined in hook_field_formatter_info(). Includes:
 *   - type: the key of the element in hook_field_formatter_info().
 *   - settings: the settings array in hook_field_formatter_info().
 * @param integer $delta
 *   The item delta if there are multiple items.
 *
 * @return array
 *   A renderable array.
 */
function fnet_common_get_field_renderable($entity_type, $entity, $field_name, $display, $delta = 0) {
  if (isset($entity->{$field_name})) {
    $items = field_get_items($entity_type, $entity, $field_name);

    // Allow display argument to be just the type.
    if (!is_array($display)) {
      $display = array(
        'type' => $display,
      );
    }

    return field_view_value($entity_type, $entity, $field_name, $items[$delta], $display);
  }
}


/**
 * Wrapper for fnet_common_get_field_renderable() that renders the renderable
 * array.
 */
function fnet_common_get_field_rendered($entity_type, $entity, $field_name, $display, $delta = 0) {
  $renderable = fnet_common_get_field_renderable($entity_type, $entity, $field_name, $display, $delta);
  return drupal_render($renderable);
}


/**
 * Get the value of Product from the key in the URL
 *
 * 
 */
function fnet_common_get_industry_value(){	
	$industries = array(
		-1 => t('Show all'),
		1 => t('Cabling Certification'),
		2 => t('Installation and Test'),
		3 => t('Telecom Test'),
	);
	$support_types = array('manuals','downloads','training','whitepapers','application-notes','datasheets','webcasts');
	$product_name = urldecode(arg(3));
	if($product_name == ''){
		if(arg(2)!= ""){
			$all_param = (arg(2)== -1)?'':arg(2);
			$product_name = $industries[$all_param];
		}
	}
	return $product_name;
}

