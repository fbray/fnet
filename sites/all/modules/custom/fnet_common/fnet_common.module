<?php

/**
 * @file
 * A module that collects utility code and definitions that don't really belong
 * anywhere else, or rise to the level of having their own module.
 */

/**
 * Implementation of hook_menu().
 *
 * Just create FNET top-level menu
 */
function fnet_common_menu() {

  $items['admin/fnet'] = array(
    'title' => t('FNET'),
    'description' => t('Adminstrative functions for managing the Extranet'),
    'access arguments' => array('access administration menu'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;

}

/*
 * TODO: This is all over the products/theme/node--products.tpl.php file. It still sucks.
*   returns $some_field_name[0]['value'] type variables, prevents undefined index errors
*
 * @param $field
 * @param int $delta
 * @param string $column
 * @return null
 */
function fnet_common_safe_get($field, $delta = 0, $column = 'value') {

  if ( isset($field[$delta]) && isset($field[$delta][$column]) ) {
    return $field[$delta][$column];
  }else if ( isset($field[LANGUAGE_NONE][$delta]) && isset($field[LANGUAGE_NONE][$delta][$column]) ) {
    return $field[LANGUAGE_NONE][$delta][$column];
  }

  return NULL;

}


/**
 * TODO: This is used all over. It still sucks, so come up with an alternative.
 * Get a raw value for a field from an entity.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 * @param array/string $column
 *   Name of the field value column, e.g. 'value'.
 * @param integer $delta
 *   The item delta if there are multiple items.
 *
 * @return array
 *   A renderable array.
 */
function fnet_common_get_field_value($entity_type, $entity, $field_name, $column = 'value', $delta = 0) {
    $values = fnet_common_get_field_values($entity_type, $entity, $field_name);
    if (is_string($column) && isset($values[$delta][$column])) {
        return $values[$delta][$column];
    }
    else {
        return NULL;
    }
}

/**
 * TODO: Clean this function out of other modules.
 *
 * Get the array of values for an entity field.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 *
 * @return array
 *   An indexed array of field values.
 */
function fnet_common_get_field_values($entity_type, $entity, $field_name) {
    if (isset($entity->{$field_name})) {
        $langcode = _fnet_common_get_field_langcode($entity_type, $entity, $field_name);
        if (isset($entity->{$field_name}[$langcode]) && is_array($entity->{$field_name}[$langcode])) {
            return $entity->{$field_name}[$langcode];
        }
    }
    return array();
}


/**
 * TODO: Deprecated!
 * Returns the form field language
 *
 * @return string
 *   String of the form field language;
 *   Always returns 'und' as we're not currently using field level language settings
 */
function fnet_common_form_field_language($form) {
  return 'und';
}


/**
 * TODO: Oh, crap. THIS IS A HACK!!
 * Helper function to centralize obtaining the language code for a field.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 *
 * @return string
 *   A language code.
 */
function _fnet_common_get_field_langcode($entity_type, $entity, $field_name) {
  /* TODO: We should be calling field_language() here if doing it properly, but it is
   * unnecessary under the current rules, where all fields are LANGUAGE_NONE.
   *
   * Note that this has caused problems in practice: there are circumstances
   * under which field_language() will intermittently fail to return the right
   * value.
   */
  // $langcode = field_language($entity_type, $entity, $field_name);
  $langcode = LANGUAGE_NONE;
  return $langcode;
}

/**
 * Set a raw value for a field for an entity.
 *
 * Doesn't save the entity, just makes sure the right field gets set.
 *
 * @param string $value
 *   The value to set.
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 * @param array/string $column
 *   Name of the field value column, e.g. 'value'.
 * @param integer $delta
 *   The item delta if there are multiple items.
 */
function fnet_common_set_field_value($value, $entity_type, $entity, $field_name, $column = 'value', $delta = 0) {
  $langcode = _fnet_common_get_field_langcode($entity_type, $entity, $field_name);
  $entity->{$field_name}[$langcode][$delta][$column] = $value;
}


/**
 * Set the entire array of values for a field.
 *
 * @param array $values
 *   The values to set.
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   An entity such as a node.
 * @param string $field_name
 *   A field name with an image.
 */
function fnet_common_set_field_values($values, $entity_type, $entity, $field_name) {
  $langcode = _fnet_common_get_field_langcode($entity_type, $entity, $field_name);
  $entity->{$field_name}[$langcode] = $values;
}



