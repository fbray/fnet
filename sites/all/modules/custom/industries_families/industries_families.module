<?php
/**
 * @file
 * Code for the industries_families module.
 */

// TODO: Merge this module with the Products module. -rositis 10/11/2017

function industries_families_help() {

}

/**
 * Implementation of hook_views_api()
 *
 * @return array
 */
function industries_families_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'industries_families') . '/views',
  );
}

/**
 * Implementation of hook_preprocess_page().
 *
 * @param $variables
 */
function industries_families_preprocess_page(&$variables) {
  if (isset($variables['node']) && ($variables['node']->type == 'product_category' || $variables['node']->type == 'product_family')) {

    // Add necessary JavaScript and CSS for the industry page.
    drupal_add_js(drupal_get_path('module', 'industries_families') . '/javascript/script.js');
    drupal_add_css(drupal_get_path('module', 'industries_families') . '/css/styles.css');

    // Adds the jQuery UI Tabs widget library making it available for use.
    drupal_add_library('system', 'ui.tabs');

    // Hide title for this content type.
    // TODO: Only on non-admin pages
    $variables['title'] = '';
  }
}

/**
 * Implementation of hook_preprocess_node().
 * These variables will be processed through the node--product_category.tpl.php.
 *
 * @param $variables
 */
function industries_families_preprocess_node(&$variables) {
  if ($variables['view_mode'] != 'full') return;
  if (isset($variables['node']) && $variables['node']->type == 'product_category') {

    // Fetch the current user's region/language.
    $siteReg = module_invoke('fnet_helper', 'site_region');
    $regLang = (!isset($regLang)) ? $siteReg["regLang"] : 'en-us';

    $nid = $variables['node']->nid;
    $variables['industry_families'] = array();
    // Get the family nodes that are associated with a product category.
    $query = "SELECT n.nid 
      FROM node n
      JOIN field_data_field_product_category category ON category.entity_id = n.nid
      WHERE n.type = 'product_family'
      AND n.status = :published";
    $result = db_query($query, array(':published' => NODE_PUBLISHED))->fetchAllAssoc('nid');

    if (count($result) > 0) {
      $variables['industry_families'] = node_load_multiple(array_keys($result));
    }

    // TODO: Do the theming of the industry_families here and then simply barf them back into the variables.

    // Get list of products by family related to this industry
    $products_by_family = array();
    foreach ($variables['industry_families'] as $family) {
      $product_list = views_get_view('product_family');
      $product_list->set_items_per_page(0);
      $product_list->set_arguments(array($family->nid)); // , strtolower($regLang)
      $product_list->set_display('products_by_family');
      $product_list->execute();
      $products_by_family[] = array($family->nid, $family->title, $product_list->result);
    }
    $variables['products_by_family'] = $products_by_family;

    //get whitepapers
    // dpm($variables['node']->title);
    $variables['whitepapers'] = industries_families_digital_assets($siteReg['lang'], $variables['node']->title, 'whitepapers');
    //get webcasts
    $variables['webcasts'] = industries_families_digital_assets($siteReg['lang'], $variables['node']->title, 'webcasts');
    //get cse studies
    $variables['case_studies'] = industries_families_case_studies($variables['node']->nid);
    $industries_links = '';
    foreach (array('whitepapers', 'webcasts', 'case_studies') as $section) {
      if ($variables[$section]) {
        switch ($section) {
          case 'whitepapers':
            $industries_links .= '<a href="#white_papers">White Papers</a>';
            break;
          case 'webcasts':
            $industries_links .= '&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;<a href="#webcasts">Webcasts</a>';
            break;
          case 'case_studies':
            $industries_links .= '&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;<a href="#case_studies">Case Studies</a>';
            break;
        }
      }
    }
    $variables['industries_links'] = $industries_links;

    // Language Overrides
   // dpm($variables['node']);
    // Hero banner

    $banners = array();
    $banners_lng = array();

    for ($i = 1; $i <= 5 ; $i++) {
      $banner_text = fnet_common_get_field_value('node', $variables['node'], 'field_family_banner_text_' . $i);
      // dpm('Banner Text: ' . $banner_text);
      if ( $banner_text) $banners[] = $banner_text;
    }

    // get industry_lang
    // TODO: Great. This crap again.
    $nodes_refs = fnet_common_get_field_values('node', $variables['node'], 'field_industry_language');

    $lang_nids = array();
    foreach($nodes_refs as $nid_list) {
        $lang_nids[] = $nid_list['nid'];
    }

    $field_industry_language_nodes = node_load_multiple($lang_nids);

    // TODO: The fields are named the same.
    if ($field_industry_language_nodes) {
       $sub_fields = _get_field_substitution_array();
    }

    foreach ($field_industry_language_nodes as $key => $field_industry_language_node) {

        $field_langreg = fnet_common_get_field_value('node', $field_industry_language_node, 'field_indlang_language');
        //  substring would be 'en-us', 'de-eu', etc..
        if (substr($field_langreg,0,5) == $regLang) {

            // build hero banner array
            for ($i = 1; $i <= 5 ; $i++) {
                $fieldname='field_banner_txt_' . $i;
                $bannerval = fnet_common_get_field_value('node', $field_industry_language_node, $fieldname);
                if ($bannerval)  $banners_lng[] = $bannerval;
            }

            // Loop over fields, either copy value from lang, or erase
            foreach ($sub_fields as $original => $translated) {

                      //if original field is set
                      if (  fnet_common_get_field_values('node', $variables['node'], $original) ) {
                        if ( fnet_common_get_field_values('node', $field_industry_language_node, $translated) ) {
                                $variables['node']->$original = $field_industry_language_node->{$translated};
                              } else {
                                  // Erase
                                  fnet_common_set_field_values(NULL, 'node', $variables['node'], $original);
                                  //unset($variables[$original]);
                        } // end if translated set
                      } // end if original set

            } // end foreach field

         } // end if langreg match

    } // end foreach lang node

    $variables['banners'] = $banners_lng ? $banners_lng : $banners ;

  } // end type = industry

  if (isset($variables['node']) && $variables['node']->type == 'product_family') {
    // Fetch the current user's region/language.
    $siteReg = module_invoke('fnet_helper', 'site_region');

    $regLang = (!isset($regLang)) ? $siteReg["regLang"] : 'en-us';

    // Get list of products by family
    $product_list = views_get_view('product_family');
    $product_list->set_items_per_page(0);
    $product_list->set_arguments(array($variables['node']->nid));
    $product_list->set_display('families_by_product_category');
    $product_list->execute();
    // dpm($product_list->result);
    $products_by_family = array($variables['node']->nid, $variables['node']->title, $product_list->result);

    $variables['products_by_family'] = $products_by_family;
    $node = $variables['node'];
    if (!empty($node->field_family_expert_boxdesc_1) || !empty($node->field_family_expert_boxdesc_2) || !empty($node->field_family_expert_boxdesc_3)) {
      $variables['expertise_column_1_class'] = 'col-2-3';
      $variables['expertise_column_2_class'] = 'col-1-3';
    }
    else {
      $variables['expertise_column_1_class'] = 'col-3-3';
      $variables['expertise_column_2_class'] = 'col-0-3';
    }

  }
}


/**
 *  Helper function that returns array mapping industry field names to industry_lang's
 *
 * @return array
 */
function _get_field_substitution_array() {
  // This might be unnecessary. The field names are the same in both Product Category and Product Category Language!
  $all_field_names = array(
    'field_family_banner_srt_1' => '',
    'field_family_banner_srt_2' => '',
    'field_family_banner_srt_3' => '',
    'field_family_banner_srt_4' => '',
    'field_family_banner_srt_5' => '',
    'field_family_banner_txt_1' => '',
    'field_family_banner_txt_2' => '',
    'field_family_banner_txt_3' => '',
    'field_family_banner_txt_4' => '',
    'field_family_banner_txt_5' => '',
    'field_industry_box_desc_1' => '',
    'field_industry_box_desc_2' => '',
    'field_industry_box_desc_3' => '',
    'field_industry_box_img_1' => '',
    'field_industry_box_img_2' => '',
    'field_industry_box_img_3' => '',
    'field_industry_box_title_1' => '',
    'field_industry_box_title_2' => '',
    'field_industry_box_title_3' => '',
    'field_industry_box_url_1' => '',
    'field_industry_box_url_2' => '',
    'field_industry_box_url_3' => '',
    'field_industry_demo_1' => '',
    'field_industry_demo_2' => '',
    'field_industry_demo_3' => '',
    'field_industry_demo_type_1' => '',
    'field_industry_demo_type_2' => '',
    'field_industry_demo_type_3' => '',
    'field_industry_expertise_box' => '',
    'field_featured_topic_1' => '',
    'field_featured_topic_2' => '',
    'field_featured_topic_3' => '',
    'field_industry_image' => '',
    'field_industry_language' => '',
    'field_learn_about_1' => '',
    'field_learn_about_2' => '',
    'field_learn_about_3' => '',
    'field_industry_overview_intro' => '',
    'field_popular_resources_1' => '',
    'field_popular_resources_2' => '',
    'field_popular_resources_3' => '',
    'field_industry_product_box' => '',
    'field_industry_promo_1' => '',
    'field_industry_promo_2' => '',
    'field_industry_promo_3' => '',
    'field_industry_shortdesc' => '',
    'field_industry_trial_1' => '',
    'field_industry_trial_2' => '',
    'field_industry_trial_3' => '',
    'field_industry_trial_type_1' => '',
    'field_industry_trial_type_2' => '',
    'field_industry_trial_type_3' => '',
    'field_ind_background_img' => '',
  );
  return $all_field_names;
}


function industries_families_digital_assets($language, $product_category, $type) {
  // Make sure the type is lower case.
  $type = strtolower($type);

  // Product Category
  $assets = views_get_view('product_category', FALSE);
  $assets->set_display($type); // Machine Name of the display.
  $assets->set_arguments(array($language, $product_category));
  $assets->pre_execute();
  $assets->execute();

  if (count($assets->result) > 0) {
    $table = $assets->render();
  }
  else {
    $table = NULL;
  }
  return $table;
}

function industries_families_case_studies($industry_nid) {
  $case_studies = views_get_view('product_category');
  $case_studies->set_display('case_studies');
  $case_studies->set_arguments(array($industry_nid));
  $case_studies->pre_execute();
  $case_studies->execute();
  if (count($case_studies->result) > 0) {
    $output = $case_studies->render();
  }
  else {
    $output = NULL;
  }
  return $output;
}

